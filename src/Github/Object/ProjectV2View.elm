-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Object.ProjectV2View exposing (..)

import Github.Enum.ProjectV2ViewLayout
import Github.InputObject
import Github.Interface
import Github.Object
import Github.Scalar
import Github.ScalarCodecs
import Github.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Identifies the date and time when the object was created.
-}
createdAt : SelectionSet Github.ScalarCodecs.DateTime Github.Object.ProjectV2View
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| Identifies the primary key from the database.
-}
databaseId : SelectionSet (Maybe Int) Github.Object.ProjectV2View
databaseId =
    Object.selectionForField "(Maybe Int)" "databaseId" [] (Decode.int |> Decode.nullable)


type alias FieldsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.ProjectV2FieldOrder
    }


{-| The view's visible fields.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for the project v2 fields returned from the connection.

-}
fields :
    (FieldsOptionalArguments -> FieldsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.ProjectV2FieldConfigurationConnection
    -> SelectionSet (Maybe decodesTo) Github.Object.ProjectV2View
fields fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeProjectV2FieldOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "fields" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


{-| The project view's filter.
-}
filter : SelectionSet (Maybe String) Github.Object.ProjectV2View
filter =
    Object.selectionForField "(Maybe String)" "filter" [] (Decode.string |> Decode.nullable)


type alias GroupByOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.ProjectV2FieldOrder
    }


{-| The view's group-by field.
@deprecated The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for the project v2 fields returned from the connection.

-}
groupBy :
    (GroupByOptionalArguments -> GroupByOptionalArguments)
    -> SelectionSet decodesTo Github.Object.ProjectV2FieldConnection
    -> SelectionSet (Maybe decodesTo) Github.Object.ProjectV2View
groupBy fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeProjectV2FieldOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "groupBy" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias GroupByFieldsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.ProjectV2FieldOrder
    }


{-| The view's group-by field.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for the project v2 fields returned from the connection.

-}
groupByFields :
    (GroupByFieldsOptionalArguments -> GroupByFieldsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.ProjectV2FieldConfigurationConnection
    -> SelectionSet (Maybe decodesTo) Github.Object.ProjectV2View
groupByFields fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeProjectV2FieldOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "groupByFields" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


id : SelectionSet Github.ScalarCodecs.Id Github.Object.ProjectV2View
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| The project view's layout.
-}
layout : SelectionSet Github.Enum.ProjectV2ViewLayout.ProjectV2ViewLayout Github.Object.ProjectV2View
layout =
    Object.selectionForField "Enum.ProjectV2ViewLayout.ProjectV2ViewLayout" "layout" [] Github.Enum.ProjectV2ViewLayout.decoder


{-| The project view's name.
-}
name : SelectionSet String Github.Object.ProjectV2View
name =
    Object.selectionForField "String" "name" [] Decode.string


{-| The project view's number.
-}
number : SelectionSet Int Github.Object.ProjectV2View
number =
    Object.selectionForField "Int" "number" [] Decode.int


{-| The project that contains this view.
-}
project :
    SelectionSet decodesTo Github.Object.ProjectV2
    -> SelectionSet decodesTo Github.Object.ProjectV2View
project object____ =
    Object.selectionForCompositeField "project" [] object____ Basics.identity


type alias SortByOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| The view's sort-by config.
@deprecated The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
sortBy :
    (SortByOptionalArguments -> SortByOptionalArguments)
    -> SelectionSet decodesTo Github.Object.ProjectV2SortByConnection
    -> SelectionSet (Maybe decodesTo) Github.Object.ProjectV2View
sortBy fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "sortBy" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias SortByFieldsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| The view's sort-by config.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
sortByFields :
    (SortByFieldsOptionalArguments -> SortByFieldsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.ProjectV2SortByFieldConnection
    -> SelectionSet (Maybe decodesTo) Github.Object.ProjectV2View
sortByFields fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "sortByFields" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


{-| Identifies the date and time when the object was last updated.
-}
updatedAt : SelectionSet Github.ScalarCodecs.DateTime Github.Object.ProjectV2View
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


type alias VerticalGroupByOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.ProjectV2FieldOrder
    }


{-| The view's vertical-group-by field.
@deprecated The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for the project v2 fields returned from the connection.

-}
verticalGroupBy :
    (VerticalGroupByOptionalArguments -> VerticalGroupByOptionalArguments)
    -> SelectionSet decodesTo Github.Object.ProjectV2FieldConnection
    -> SelectionSet (Maybe decodesTo) Github.Object.ProjectV2View
verticalGroupBy fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeProjectV2FieldOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "verticalGroupBy" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias VerticalGroupByFieldsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.ProjectV2FieldOrder
    }


{-| The view's vertical-group-by field.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for the project v2 fields returned from the connection.

-}
verticalGroupByFields :
    (VerticalGroupByFieldsOptionalArguments -> VerticalGroupByFieldsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.ProjectV2FieldConfigurationConnection
    -> SelectionSet (Maybe decodesTo) Github.Object.ProjectV2View
verticalGroupByFields fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeProjectV2FieldOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "verticalGroupByFields" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias VisibleFieldsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.ProjectV2FieldOrder
    }


{-| The view's visible fields.
@deprecated The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for the project v2 fields returned from the connection.

-}
visibleFields :
    (VisibleFieldsOptionalArguments -> VisibleFieldsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.ProjectV2FieldConnection
    -> SelectionSet (Maybe decodesTo) Github.Object.ProjectV2View
visibleFields fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeProjectV2FieldOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "visibleFields" optionalArgs____ object____ (Basics.identity >> Decode.nullable)
