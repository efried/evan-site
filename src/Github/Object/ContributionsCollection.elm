-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Object.ContributionsCollection exposing (..)

import Github.InputObject
import Github.Interface
import Github.Object
import Github.Scalar
import Github.ScalarCodecs
import Github.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


type alias CommitContributionsByRepositoryOptionalArguments =
    { maxRepositories : OptionalArgument Int }


{-| Commit contributions made by the user, grouped by repository.

  - maxRepositories - How many repositories should be included.

-}
commitContributionsByRepository :
    (CommitContributionsByRepositoryOptionalArguments -> CommitContributionsByRepositoryOptionalArguments)
    -> SelectionSet decodesTo Github.Object.CommitContributionsByRepository
    -> SelectionSet (List decodesTo) Github.Object.ContributionsCollection
commitContributionsByRepository fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { maxRepositories = Absent }

        optionalArgs____ =
            [ Argument.optional "maxRepositories" filledInOptionals____.maxRepositories Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "commitContributionsByRepository" optionalArgs____ object____ (Basics.identity >> Decode.list)


{-| A calendar of this user's contributions on GitHub.
-}
contributionCalendar :
    SelectionSet decodesTo Github.Object.ContributionCalendar
    -> SelectionSet decodesTo Github.Object.ContributionsCollection
contributionCalendar object____ =
    Object.selectionForCompositeField "contributionCalendar" [] object____ Basics.identity


{-| The years the user has been making contributions with the most recent year first.
-}
contributionYears : SelectionSet (List Int) Github.Object.ContributionsCollection
contributionYears =
    Object.selectionForField "(List Int)" "contributionYears" [] (Decode.int |> Decode.list)


{-| Determine if this collection's time span ends in the current month.
-}
doesEndInCurrentMonth : SelectionSet Bool Github.Object.ContributionsCollection
doesEndInCurrentMonth =
    Object.selectionForField "Bool" "doesEndInCurrentMonth" [] Decode.bool


{-| The date of the first restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts.
-}
earliestRestrictedContributionDate : SelectionSet (Maybe Github.ScalarCodecs.Date) Github.Object.ContributionsCollection
earliestRestrictedContributionDate =
    Object.selectionForField "(Maybe ScalarCodecs.Date)" "earliestRestrictedContributionDate" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecDate |> .decoder |> Decode.nullable)


{-| The ending date and time of this collection.
-}
endedAt : SelectionSet Github.ScalarCodecs.DateTime Github.Object.ContributionsCollection
endedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "endedAt" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The first issue the user opened on GitHub. This will be null if that issue was opened outside the collection's time range and ignoreTimeRange is false. If the issue is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned.
-}
firstIssueContribution :
    SelectionSet decodesTo Github.Union.CreatedIssueOrRestrictedContribution
    -> SelectionSet (Maybe decodesTo) Github.Object.ContributionsCollection
firstIssueContribution object____ =
    Object.selectionForCompositeField "firstIssueContribution" [] object____ (Basics.identity >> Decode.nullable)


{-| The first pull request the user opened on GitHub. This will be null if that pull request was opened outside the collection's time range and ignoreTimeRange is not true. If the pull request is not visible but the user has opted to show private contributions, a RestrictedContribution will be returned.
-}
firstPullRequestContribution :
    SelectionSet decodesTo Github.Union.CreatedPullRequestOrRestrictedContribution
    -> SelectionSet (Maybe decodesTo) Github.Object.ContributionsCollection
firstPullRequestContribution object____ =
    Object.selectionForCompositeField "firstPullRequestContribution" [] object____ (Basics.identity >> Decode.nullable)


{-| The first repository the user created on GitHub. This will be null if that first repository was created outside the collection's time range and ignoreTimeRange is false. If the repository is not visible, then a RestrictedContribution is returned.
-}
firstRepositoryContribution :
    SelectionSet decodesTo Github.Union.CreatedRepositoryOrRestrictedContribution
    -> SelectionSet (Maybe decodesTo) Github.Object.ContributionsCollection
firstRepositoryContribution object____ =
    Object.selectionForCompositeField "firstRepositoryContribution" [] object____ (Basics.identity >> Decode.nullable)


{-| Does the user have any more activity in the timeline that occurred prior to the collection's time range?
-}
hasActivityInThePast : SelectionSet Bool Github.Object.ContributionsCollection
hasActivityInThePast =
    Object.selectionForField "Bool" "hasActivityInThePast" [] Decode.bool


{-| Determine if there are any contributions in this collection.
-}
hasAnyContributions : SelectionSet Bool Github.Object.ContributionsCollection
hasAnyContributions =
    Object.selectionForField "Bool" "hasAnyContributions" [] Decode.bool


{-| Determine if the user made any contributions in this time frame whose details are not visible because they were made in a private repository. Can only be true if the user enabled private contribution counts.
-}
hasAnyRestrictedContributions : SelectionSet Bool Github.Object.ContributionsCollection
hasAnyRestrictedContributions =
    Object.selectionForField "Bool" "hasAnyRestrictedContributions" [] Decode.bool


{-| Whether or not the collector's time span is all within the same day.
-}
isSingleDay : SelectionSet Bool Github.Object.ContributionsCollection
isSingleDay =
    Object.selectionForField "Bool" "isSingleDay" [] Decode.bool


type alias IssueContributionsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , excludeFirst : OptionalArgument Bool
    , excludePopular : OptionalArgument Bool
    , orderBy : OptionalArgument Github.InputObject.ContributionOrder
    }


{-| A list of issues the user opened.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - excludeFirst - Should the user's first issue ever be excluded from the result.
  - excludePopular - Should the user's most commented issue be excluded from the result.
  - orderBy - Ordering options for contributions returned from the connection.

-}
issueContributions :
    (IssueContributionsOptionalArguments -> IssueContributionsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.CreatedIssueContributionConnection
    -> SelectionSet decodesTo Github.Object.ContributionsCollection
issueContributions fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, excludeFirst = Absent, excludePopular = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "excludeFirst" filledInOptionals____.excludeFirst Encode.bool, Argument.optional "excludePopular" filledInOptionals____.excludePopular Encode.bool, Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeContributionOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "issueContributions" optionalArgs____ object____ Basics.identity


type alias IssueContributionsByRepositoryOptionalArguments =
    { maxRepositories : OptionalArgument Int
    , excludeFirst : OptionalArgument Bool
    , excludePopular : OptionalArgument Bool
    }


{-| Issue contributions made by the user, grouped by repository.

  - maxRepositories - How many repositories should be included.
  - excludeFirst - Should the user's first issue ever be excluded from the result.
  - excludePopular - Should the user's most commented issue be excluded from the result.

-}
issueContributionsByRepository :
    (IssueContributionsByRepositoryOptionalArguments -> IssueContributionsByRepositoryOptionalArguments)
    -> SelectionSet decodesTo Github.Object.IssueContributionsByRepository
    -> SelectionSet (List decodesTo) Github.Object.ContributionsCollection
issueContributionsByRepository fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { maxRepositories = Absent, excludeFirst = Absent, excludePopular = Absent }

        optionalArgs____ =
            [ Argument.optional "maxRepositories" filledInOptionals____.maxRepositories Encode.int, Argument.optional "excludeFirst" filledInOptionals____.excludeFirst Encode.bool, Argument.optional "excludePopular" filledInOptionals____.excludePopular Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "issueContributionsByRepository" optionalArgs____ object____ (Basics.identity >> Decode.list)


{-| When the user signed up for GitHub. This will be null if that sign up date falls outside the collection's time range and ignoreTimeRange is false.
-}
joinedGitHubContribution :
    SelectionSet decodesTo Github.Object.JoinedGitHubContribution
    -> SelectionSet (Maybe decodesTo) Github.Object.ContributionsCollection
joinedGitHubContribution object____ =
    Object.selectionForCompositeField "joinedGitHubContribution" [] object____ (Basics.identity >> Decode.nullable)


{-| The date of the most recent restricted contribution the user made in this time period. Can only be non-null when the user has enabled private contribution counts.
-}
latestRestrictedContributionDate : SelectionSet (Maybe Github.ScalarCodecs.Date) Github.Object.ContributionsCollection
latestRestrictedContributionDate =
    Object.selectionForField "(Maybe ScalarCodecs.Date)" "latestRestrictedContributionDate" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecDate |> .decoder |> Decode.nullable)


{-| When this collection's time range does not include any activity from the user, use this
to get a different collection from an earlier time range that does have activity.
-}
mostRecentCollectionWithActivity :
    SelectionSet decodesTo Github.Object.ContributionsCollection
    -> SelectionSet (Maybe decodesTo) Github.Object.ContributionsCollection
mostRecentCollectionWithActivity object____ =
    Object.selectionForCompositeField "mostRecentCollectionWithActivity" [] object____ (Basics.identity >> Decode.nullable)


{-| Returns a different contributions collection from an earlier time range than this one
that does not have any contributions.
-}
mostRecentCollectionWithoutActivity :
    SelectionSet decodesTo Github.Object.ContributionsCollection
    -> SelectionSet (Maybe decodesTo) Github.Object.ContributionsCollection
mostRecentCollectionWithoutActivity object____ =
    Object.selectionForCompositeField "mostRecentCollectionWithoutActivity" [] object____ (Basics.identity >> Decode.nullable)


{-| The issue the user opened on GitHub that received the most comments in the specified
time frame.
-}
popularIssueContribution :
    SelectionSet decodesTo Github.Object.CreatedIssueContribution
    -> SelectionSet (Maybe decodesTo) Github.Object.ContributionsCollection
popularIssueContribution object____ =
    Object.selectionForCompositeField "popularIssueContribution" [] object____ (Basics.identity >> Decode.nullable)


{-| The pull request the user opened on GitHub that received the most comments in the
specified time frame.
-}
popularPullRequestContribution :
    SelectionSet decodesTo Github.Object.CreatedPullRequestContribution
    -> SelectionSet (Maybe decodesTo) Github.Object.ContributionsCollection
popularPullRequestContribution object____ =
    Object.selectionForCompositeField "popularPullRequestContribution" [] object____ (Basics.identity >> Decode.nullable)


type alias PullRequestContributionsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , excludeFirst : OptionalArgument Bool
    , excludePopular : OptionalArgument Bool
    , orderBy : OptionalArgument Github.InputObject.ContributionOrder
    }


{-| Pull request contributions made by the user.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - excludeFirst - Should the user's first pull request ever be excluded from the result.
  - excludePopular - Should the user's most commented pull request be excluded from the result.
  - orderBy - Ordering options for contributions returned from the connection.

-}
pullRequestContributions :
    (PullRequestContributionsOptionalArguments -> PullRequestContributionsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.CreatedPullRequestContributionConnection
    -> SelectionSet decodesTo Github.Object.ContributionsCollection
pullRequestContributions fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, excludeFirst = Absent, excludePopular = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "excludeFirst" filledInOptionals____.excludeFirst Encode.bool, Argument.optional "excludePopular" filledInOptionals____.excludePopular Encode.bool, Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeContributionOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "pullRequestContributions" optionalArgs____ object____ Basics.identity


type alias PullRequestContributionsByRepositoryOptionalArguments =
    { maxRepositories : OptionalArgument Int
    , excludeFirst : OptionalArgument Bool
    , excludePopular : OptionalArgument Bool
    }


{-| Pull request contributions made by the user, grouped by repository.

  - maxRepositories - How many repositories should be included.
  - excludeFirst - Should the user's first pull request ever be excluded from the result.
  - excludePopular - Should the user's most commented pull request be excluded from the result.

-}
pullRequestContributionsByRepository :
    (PullRequestContributionsByRepositoryOptionalArguments -> PullRequestContributionsByRepositoryOptionalArguments)
    -> SelectionSet decodesTo Github.Object.PullRequestContributionsByRepository
    -> SelectionSet (List decodesTo) Github.Object.ContributionsCollection
pullRequestContributionsByRepository fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { maxRepositories = Absent, excludeFirst = Absent, excludePopular = Absent }

        optionalArgs____ =
            [ Argument.optional "maxRepositories" filledInOptionals____.maxRepositories Encode.int, Argument.optional "excludeFirst" filledInOptionals____.excludeFirst Encode.bool, Argument.optional "excludePopular" filledInOptionals____.excludePopular Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "pullRequestContributionsByRepository" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias PullRequestReviewContributionsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.ContributionOrder
    }


{-| Pull request review contributions made by the user. Returns the most recently
submitted review for each PR reviewed by the user.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for contributions returned from the connection.

-}
pullRequestReviewContributions :
    (PullRequestReviewContributionsOptionalArguments -> PullRequestReviewContributionsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.CreatedPullRequestReviewContributionConnection
    -> SelectionSet decodesTo Github.Object.ContributionsCollection
pullRequestReviewContributions fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeContributionOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "pullRequestReviewContributions" optionalArgs____ object____ Basics.identity


type alias PullRequestReviewContributionsByRepositoryOptionalArguments =
    { maxRepositories : OptionalArgument Int }


{-| Pull request review contributions made by the user, grouped by repository.

  - maxRepositories - How many repositories should be included.

-}
pullRequestReviewContributionsByRepository :
    (PullRequestReviewContributionsByRepositoryOptionalArguments -> PullRequestReviewContributionsByRepositoryOptionalArguments)
    -> SelectionSet decodesTo Github.Object.PullRequestReviewContributionsByRepository
    -> SelectionSet (List decodesTo) Github.Object.ContributionsCollection
pullRequestReviewContributionsByRepository fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { maxRepositories = Absent }

        optionalArgs____ =
            [ Argument.optional "maxRepositories" filledInOptionals____.maxRepositories Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "pullRequestReviewContributionsByRepository" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias RepositoryContributionsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , excludeFirst : OptionalArgument Bool
    , orderBy : OptionalArgument Github.InputObject.ContributionOrder
    }


{-| A list of repositories owned by the user that the user created in this time range.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - excludeFirst - Should the user's first repository ever be excluded from the result.
  - orderBy - Ordering options for contributions returned from the connection.

-}
repositoryContributions :
    (RepositoryContributionsOptionalArguments -> RepositoryContributionsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.CreatedRepositoryContributionConnection
    -> SelectionSet decodesTo Github.Object.ContributionsCollection
repositoryContributions fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, excludeFirst = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "excludeFirst" filledInOptionals____.excludeFirst Encode.bool, Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeContributionOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "repositoryContributions" optionalArgs____ object____ Basics.identity


{-| A count of contributions made by the user that the viewer cannot access. Only non-zero when the user has chosen to share their private contribution counts.
-}
restrictedContributionsCount : SelectionSet Int Github.Object.ContributionsCollection
restrictedContributionsCount =
    Object.selectionForField "Int" "restrictedContributionsCount" [] Decode.int


{-| The beginning date and time of this collection.
-}
startedAt : SelectionSet Github.ScalarCodecs.DateTime Github.Object.ContributionsCollection
startedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "startedAt" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| How many commits were made by the user in this time span.
-}
totalCommitContributions : SelectionSet Int Github.Object.ContributionsCollection
totalCommitContributions =
    Object.selectionForField "Int" "totalCommitContributions" [] Decode.int


type alias TotalIssueContributionsOptionalArguments =
    { excludeFirst : OptionalArgument Bool
    , excludePopular : OptionalArgument Bool
    }


{-| How many issues the user opened.

  - excludeFirst - Should the user's first issue ever be excluded from this count.
  - excludePopular - Should the user's most commented issue be excluded from this count.

-}
totalIssueContributions :
    (TotalIssueContributionsOptionalArguments -> TotalIssueContributionsOptionalArguments)
    -> SelectionSet Int Github.Object.ContributionsCollection
totalIssueContributions fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { excludeFirst = Absent, excludePopular = Absent }

        optionalArgs____ =
            [ Argument.optional "excludeFirst" filledInOptionals____.excludeFirst Encode.bool, Argument.optional "excludePopular" filledInOptionals____.excludePopular Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "Int" "totalIssueContributions" optionalArgs____ Decode.int


type alias TotalPullRequestContributionsOptionalArguments =
    { excludeFirst : OptionalArgument Bool
    , excludePopular : OptionalArgument Bool
    }


{-| How many pull requests the user opened.

  - excludeFirst - Should the user's first pull request ever be excluded from this count.
  - excludePopular - Should the user's most commented pull request be excluded from this count.

-}
totalPullRequestContributions :
    (TotalPullRequestContributionsOptionalArguments -> TotalPullRequestContributionsOptionalArguments)
    -> SelectionSet Int Github.Object.ContributionsCollection
totalPullRequestContributions fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { excludeFirst = Absent, excludePopular = Absent }

        optionalArgs____ =
            [ Argument.optional "excludeFirst" filledInOptionals____.excludeFirst Encode.bool, Argument.optional "excludePopular" filledInOptionals____.excludePopular Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "Int" "totalPullRequestContributions" optionalArgs____ Decode.int


{-| How many pull request reviews the user left.
-}
totalPullRequestReviewContributions : SelectionSet Int Github.Object.ContributionsCollection
totalPullRequestReviewContributions =
    Object.selectionForField "Int" "totalPullRequestReviewContributions" [] Decode.int


{-| How many different repositories the user committed to.
-}
totalRepositoriesWithContributedCommits : SelectionSet Int Github.Object.ContributionsCollection
totalRepositoriesWithContributedCommits =
    Object.selectionForField "Int" "totalRepositoriesWithContributedCommits" [] Decode.int


type alias TotalRepositoriesWithContributedIssuesOptionalArguments =
    { excludeFirst : OptionalArgument Bool
    , excludePopular : OptionalArgument Bool
    }


{-| How many different repositories the user opened issues in.

  - excludeFirst - Should the user's first issue ever be excluded from this count.
  - excludePopular - Should the user's most commented issue be excluded from this count.

-}
totalRepositoriesWithContributedIssues :
    (TotalRepositoriesWithContributedIssuesOptionalArguments -> TotalRepositoriesWithContributedIssuesOptionalArguments)
    -> SelectionSet Int Github.Object.ContributionsCollection
totalRepositoriesWithContributedIssues fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { excludeFirst = Absent, excludePopular = Absent }

        optionalArgs____ =
            [ Argument.optional "excludeFirst" filledInOptionals____.excludeFirst Encode.bool, Argument.optional "excludePopular" filledInOptionals____.excludePopular Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "Int" "totalRepositoriesWithContributedIssues" optionalArgs____ Decode.int


{-| How many different repositories the user left pull request reviews in.
-}
totalRepositoriesWithContributedPullRequestReviews : SelectionSet Int Github.Object.ContributionsCollection
totalRepositoriesWithContributedPullRequestReviews =
    Object.selectionForField "Int" "totalRepositoriesWithContributedPullRequestReviews" [] Decode.int


type alias TotalRepositoriesWithContributedPullRequestsOptionalArguments =
    { excludeFirst : OptionalArgument Bool
    , excludePopular : OptionalArgument Bool
    }


{-| How many different repositories the user opened pull requests in.

  - excludeFirst - Should the user's first pull request ever be excluded from this count.
  - excludePopular - Should the user's most commented pull request be excluded from this count.

-}
totalRepositoriesWithContributedPullRequests :
    (TotalRepositoriesWithContributedPullRequestsOptionalArguments -> TotalRepositoriesWithContributedPullRequestsOptionalArguments)
    -> SelectionSet Int Github.Object.ContributionsCollection
totalRepositoriesWithContributedPullRequests fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { excludeFirst = Absent, excludePopular = Absent }

        optionalArgs____ =
            [ Argument.optional "excludeFirst" filledInOptionals____.excludeFirst Encode.bool, Argument.optional "excludePopular" filledInOptionals____.excludePopular Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "Int" "totalRepositoriesWithContributedPullRequests" optionalArgs____ Decode.int


type alias TotalRepositoryContributionsOptionalArguments =
    { excludeFirst : OptionalArgument Bool }


{-| How many repositories the user created.

  - excludeFirst - Should the user's first repository ever be excluded from this count.

-}
totalRepositoryContributions :
    (TotalRepositoryContributionsOptionalArguments -> TotalRepositoryContributionsOptionalArguments)
    -> SelectionSet Int Github.Object.ContributionsCollection
totalRepositoryContributions fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { excludeFirst = Absent }

        optionalArgs____ =
            [ Argument.optional "excludeFirst" filledInOptionals____.excludeFirst Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "Int" "totalRepositoryContributions" optionalArgs____ Decode.int


{-| The user who made the contributions in this collection.
-}
user :
    SelectionSet decodesTo Github.Object.User
    -> SelectionSet decodesTo Github.Object.ContributionsCollection
user object____ =
    Object.selectionForCompositeField "user" [] object____ Basics.identity
