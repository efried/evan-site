-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Object.Topic exposing (..)

import Github.Enum.RepositoryAffiliation
import Github.Enum.RepositoryPrivacy
import Github.InputObject
import Github.Interface
import Github.Object
import Github.Scalar
import Github.ScalarCodecs
import Github.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


id : SelectionSet Github.ScalarCodecs.Id Github.Object.Topic
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| The topic's name.
-}
name : SelectionSet String Github.Object.Topic
name =
    Object.selectionForField "String" "name" [] Decode.string


type alias RelatedTopicsOptionalArguments =
    { first : OptionalArgument Int }


{-| A list of related topics, including aliases of this topic, sorted with the most relevant
first. Returns up to 10 Topics.

  - first - How many topics to return.

-}
relatedTopics :
    (RelatedTopicsOptionalArguments -> RelatedTopicsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.Topic
    -> SelectionSet (List decodesTo) Github.Object.Topic
relatedTopics fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { first = Absent }

        optionalArgs____ =
            [ Argument.optional "first" filledInOptionals____.first Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "relatedTopics" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias RepositoriesOptionalArguments =
    { privacy : OptionalArgument Github.Enum.RepositoryPrivacy.RepositoryPrivacy
    , orderBy : OptionalArgument Github.InputObject.RepositoryOrder
    , affiliations : OptionalArgument (List (Maybe Github.Enum.RepositoryAffiliation.RepositoryAffiliation))
    , ownerAffiliations : OptionalArgument (List (Maybe Github.Enum.RepositoryAffiliation.RepositoryAffiliation))
    , isLocked : OptionalArgument Bool
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , sponsorableOnly : OptionalArgument Bool
    }


{-| A list of repositories.

  - privacy - If non-null, filters repositories according to privacy
  - orderBy - Ordering options for repositories returned from the connection
  - affiliations - Array of viewer's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the current viewer owns.
  - ownerAffiliations - Array of owner's affiliation options for repositories returned from the connection. For example, OWNER will include only repositories that the organization or user being viewed owns.
  - isLocked - If non-null, filters repositories according to whether they have been locked
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - sponsorableOnly - If true, only repositories whose owner can be sponsored via GitHub Sponsors will be returned.

-}
repositories :
    (RepositoriesOptionalArguments -> RepositoriesOptionalArguments)
    -> SelectionSet decodesTo Github.Object.RepositoryConnection
    -> SelectionSet decodesTo Github.Object.Topic
repositories fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { privacy = Absent, orderBy = Absent, affiliations = Absent, ownerAffiliations = Absent, isLocked = Absent, after = Absent, before = Absent, first = Absent, last = Absent, sponsorableOnly = Absent }

        optionalArgs____ =
            [ Argument.optional "privacy" filledInOptionals____.privacy (Encode.enum Github.Enum.RepositoryPrivacy.toString), Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeRepositoryOrder, Argument.optional "affiliations" filledInOptionals____.affiliations (Encode.enum Github.Enum.RepositoryAffiliation.toString |> Encode.maybe |> Encode.list), Argument.optional "ownerAffiliations" filledInOptionals____.ownerAffiliations (Encode.enum Github.Enum.RepositoryAffiliation.toString |> Encode.maybe |> Encode.list), Argument.optional "isLocked" filledInOptionals____.isLocked Encode.bool, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "sponsorableOnly" filledInOptionals____.sponsorableOnly Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "repositories" optionalArgs____ object____ Basics.identity


{-| Returns a count of how many stargazers there are on this object
-}
stargazerCount : SelectionSet Int Github.Object.Topic
stargazerCount =
    Object.selectionForField "Int" "stargazerCount" [] Decode.int


type alias StargazersOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.StarOrder
    }


{-| A list of users who have starred this starrable.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Order for connection

-}
stargazers :
    (StargazersOptionalArguments -> StargazersOptionalArguments)
    -> SelectionSet decodesTo Github.Object.StargazerConnection
    -> SelectionSet decodesTo Github.Object.Topic
stargazers fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeStarOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "stargazers" optionalArgs____ object____ Basics.identity


{-| Returns a boolean indicating whether the viewing user has starred this starrable.
-}
viewerHasStarred : SelectionSet Bool Github.Object.Topic
viewerHasStarred =
    Object.selectionForField "Bool" "viewerHasStarred" [] Decode.bool
