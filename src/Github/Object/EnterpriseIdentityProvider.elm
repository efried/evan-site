-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Object.EnterpriseIdentityProvider exposing (..)

import Github.Enum.SamlDigestAlgorithm
import Github.Enum.SamlSignatureAlgorithm
import Github.InputObject
import Github.Interface
import Github.Object
import Github.Scalar
import Github.ScalarCodecs
import Github.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| The digest algorithm used to sign SAML requests for the identity provider.
-}
digestMethod : SelectionSet (Maybe Github.Enum.SamlDigestAlgorithm.SamlDigestAlgorithm) Github.Object.EnterpriseIdentityProvider
digestMethod =
    Object.selectionForField "(Maybe Enum.SamlDigestAlgorithm.SamlDigestAlgorithm)" "digestMethod" [] (Github.Enum.SamlDigestAlgorithm.decoder |> Decode.nullable)


{-| The enterprise this identity provider belongs to.
-}
enterprise :
    SelectionSet decodesTo Github.Object.Enterprise
    -> SelectionSet (Maybe decodesTo) Github.Object.EnterpriseIdentityProvider
enterprise object____ =
    Object.selectionForCompositeField "enterprise" [] object____ (Basics.identity >> Decode.nullable)


type alias ExternalIdentitiesOptionalArguments =
    { membersOnly : OptionalArgument Bool
    , login : OptionalArgument String
    , userName : OptionalArgument String
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| ExternalIdentities provisioned by this identity provider.

  - membersOnly - Filter to external identities with valid org membership only
  - login - Filter to external identities with the users login
  - userName - Filter to external identities with the users userName/NameID attribute
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
externalIdentities :
    (ExternalIdentitiesOptionalArguments -> ExternalIdentitiesOptionalArguments)
    -> SelectionSet decodesTo Github.Object.ExternalIdentityConnection
    -> SelectionSet decodesTo Github.Object.EnterpriseIdentityProvider
externalIdentities fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { membersOnly = Absent, login = Absent, userName = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "membersOnly" filledInOptionals____.membersOnly Encode.bool, Argument.optional "login" filledInOptionals____.login Encode.string, Argument.optional "userName" filledInOptionals____.userName Encode.string, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "externalIdentities" optionalArgs____ object____ Basics.identity


id : SelectionSet Github.ScalarCodecs.Id Github.Object.EnterpriseIdentityProvider
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| The x509 certificate used by the identity provider to sign assertions and responses.
-}
idpCertificate : SelectionSet (Maybe Github.ScalarCodecs.X509Certificate) Github.Object.EnterpriseIdentityProvider
idpCertificate =
    Object.selectionForField "(Maybe ScalarCodecs.X509Certificate)" "idpCertificate" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecX509Certificate |> .decoder |> Decode.nullable)


{-| The Issuer Entity ID for the SAML identity provider.
-}
issuer : SelectionSet (Maybe String) Github.Object.EnterpriseIdentityProvider
issuer =
    Object.selectionForField "(Maybe String)" "issuer" [] (Decode.string |> Decode.nullable)


{-| Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable.
-}
recoveryCodes : SelectionSet (Maybe (List String)) Github.Object.EnterpriseIdentityProvider
recoveryCodes =
    Object.selectionForField "(Maybe (List String))" "recoveryCodes" [] (Decode.string |> Decode.list |> Decode.nullable)


{-| The signature algorithm used to sign SAML requests for the identity provider.
-}
signatureMethod : SelectionSet (Maybe Github.Enum.SamlSignatureAlgorithm.SamlSignatureAlgorithm) Github.Object.EnterpriseIdentityProvider
signatureMethod =
    Object.selectionForField "(Maybe Enum.SamlSignatureAlgorithm.SamlSignatureAlgorithm)" "signatureMethod" [] (Github.Enum.SamlSignatureAlgorithm.decoder |> Decode.nullable)


{-| The URL endpoint for the identity provider's SAML SSO.
-}
ssoUrl : SelectionSet (Maybe Github.ScalarCodecs.Uri) Github.Object.EnterpriseIdentityProvider
ssoUrl =
    Object.selectionForField "(Maybe ScalarCodecs.Uri)" "ssoUrl" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecUri |> .decoder |> Decode.nullable)
