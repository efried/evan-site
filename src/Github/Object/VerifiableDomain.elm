-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Object.VerifiableDomain exposing (..)

import Github.InputObject
import Github.Interface
import Github.Object
import Github.Scalar
import Github.ScalarCodecs
import Github.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Identifies the date and time when the object was created.
-}
createdAt : SelectionSet Github.ScalarCodecs.DateTime Github.Object.VerifiableDomain
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| Identifies the primary key from the database.
-}
databaseId : SelectionSet (Maybe Int) Github.Object.VerifiableDomain
databaseId =
    Object.selectionForField "(Maybe Int)" "databaseId" [] (Decode.int |> Decode.nullable)


{-| The DNS host name that should be used for verification.
-}
dnsHostName : SelectionSet (Maybe Github.ScalarCodecs.Uri) Github.Object.VerifiableDomain
dnsHostName =
    Object.selectionForField "(Maybe ScalarCodecs.Uri)" "dnsHostName" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecUri |> .decoder |> Decode.nullable)


{-| The unicode encoded domain.
-}
domain : SelectionSet Github.ScalarCodecs.Uri Github.Object.VerifiableDomain
domain =
    Object.selectionForField "ScalarCodecs.Uri" "domain" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| Whether a TXT record for verification with the expected host name was found.
-}
hasFoundHostName : SelectionSet Bool Github.Object.VerifiableDomain
hasFoundHostName =
    Object.selectionForField "Bool" "hasFoundHostName" [] Decode.bool


{-| Whether a TXT record for verification with the expected verification token was found.
-}
hasFoundVerificationToken : SelectionSet Bool Github.Object.VerifiableDomain
hasFoundVerificationToken =
    Object.selectionForField "Bool" "hasFoundVerificationToken" [] Decode.bool


id : SelectionSet Github.ScalarCodecs.Id Github.Object.VerifiableDomain
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| Whether or not the domain is approved.
-}
isApproved : SelectionSet Bool Github.Object.VerifiableDomain
isApproved =
    Object.selectionForField "Bool" "isApproved" [] Decode.bool


{-| Whether this domain is required to exist for an organization or enterprise policy to be enforced.
-}
isRequiredForPolicyEnforcement : SelectionSet Bool Github.Object.VerifiableDomain
isRequiredForPolicyEnforcement =
    Object.selectionForField "Bool" "isRequiredForPolicyEnforcement" [] Decode.bool


{-| Whether or not the domain is verified.
-}
isVerified : SelectionSet Bool Github.Object.VerifiableDomain
isVerified =
    Object.selectionForField "Bool" "isVerified" [] Decode.bool


{-| The owner of the domain.
-}
owner :
    SelectionSet decodesTo Github.Union.VerifiableDomainOwner
    -> SelectionSet decodesTo Github.Object.VerifiableDomain
owner object____ =
    Object.selectionForCompositeField "owner" [] object____ Basics.identity


{-| The punycode encoded domain.
-}
punycodeEncodedDomain : SelectionSet Github.ScalarCodecs.Uri Github.Object.VerifiableDomain
punycodeEncodedDomain =
    Object.selectionForField "ScalarCodecs.Uri" "punycodeEncodedDomain" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The time that the current verification token will expire.
-}
tokenExpirationTime : SelectionSet (Maybe Github.ScalarCodecs.DateTime) Github.Object.VerifiableDomain
tokenExpirationTime =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "tokenExpirationTime" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


{-| Identifies the date and time when the object was last updated.
-}
updatedAt : SelectionSet Github.ScalarCodecs.DateTime Github.Object.VerifiableDomain
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The current verification token for the domain.
-}
verificationToken : SelectionSet (Maybe String) Github.Object.VerifiableDomain
verificationToken =
    Object.selectionForField "(Maybe String)" "verificationToken" [] (Decode.string |> Decode.nullable)
