-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Object.Status exposing (..)

import Github.Enum.StatusState
import Github.InputObject
import Github.Interface
import Github.Object
import Github.Scalar
import Github.ScalarCodecs
import Github.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


type alias CombinedContextsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of status contexts and check runs for this commit.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
combinedContexts :
    (CombinedContextsOptionalArguments -> CombinedContextsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.StatusCheckRollupContextConnection
    -> SelectionSet decodesTo Github.Object.Status
combinedContexts fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "combinedContexts" optionalArgs____ object____ Basics.identity


{-| The commit this status is attached to.
-}
commit :
    SelectionSet decodesTo Github.Object.Commit
    -> SelectionSet (Maybe decodesTo) Github.Object.Status
commit object____ =
    Object.selectionForCompositeField "commit" [] object____ (Basics.identity >> Decode.nullable)


type alias ContextRequiredArguments =
    { name : String }


{-| Looks up an individual status context by context name.

  - name - The context name.

-}
context :
    ContextRequiredArguments
    -> SelectionSet decodesTo Github.Object.StatusContext
    -> SelectionSet (Maybe decodesTo) Github.Object.Status
context requiredArgs____ object____ =
    Object.selectionForCompositeField "context" [ Argument.required "name" requiredArgs____.name Encode.string ] object____ (Basics.identity >> Decode.nullable)


{-| The individual status contexts for this commit.
-}
contexts :
    SelectionSet decodesTo Github.Object.StatusContext
    -> SelectionSet (List decodesTo) Github.Object.Status
contexts object____ =
    Object.selectionForCompositeField "contexts" [] object____ (Basics.identity >> Decode.list)


id : SelectionSet Github.ScalarCodecs.Id Github.Object.Status
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| The combined commit status.
-}
state : SelectionSet Github.Enum.StatusState.StatusState Github.Object.Status
state =
    Object.selectionForField "Enum.StatusState.StatusState" "state" [] Github.Enum.StatusState.decoder
