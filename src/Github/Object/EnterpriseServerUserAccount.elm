-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Object.EnterpriseServerUserAccount exposing (..)

import Github.InputObject
import Github.Interface
import Github.Object
import Github.Scalar
import Github.ScalarCodecs
import Github.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Identifies the date and time when the object was created.
-}
createdAt : SelectionSet Github.ScalarCodecs.DateTime Github.Object.EnterpriseServerUserAccount
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


type alias EmailsOptionalArguments =
    { orderBy : OptionalArgument Github.InputObject.EnterpriseServerUserAccountEmailOrder
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| User emails belonging to this user account.

  - orderBy - Ordering options for Enterprise Server user account emails returned from the connection.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
emails :
    (EmailsOptionalArguments -> EmailsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.EnterpriseServerUserAccountEmailConnection
    -> SelectionSet decodesTo Github.Object.EnterpriseServerUserAccount
emails fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { orderBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeEnterpriseServerUserAccountEmailOrder, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "emails" optionalArgs____ object____ Basics.identity


{-| The Enterprise Server installation on which this user account exists.
-}
enterpriseServerInstallation :
    SelectionSet decodesTo Github.Object.EnterpriseServerInstallation
    -> SelectionSet decodesTo Github.Object.EnterpriseServerUserAccount
enterpriseServerInstallation object____ =
    Object.selectionForCompositeField "enterpriseServerInstallation" [] object____ Basics.identity


id : SelectionSet Github.ScalarCodecs.Id Github.Object.EnterpriseServerUserAccount
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| Whether the user account is a site administrator on the Enterprise Server installation.
-}
isSiteAdmin : SelectionSet Bool Github.Object.EnterpriseServerUserAccount
isSiteAdmin =
    Object.selectionForField "Bool" "isSiteAdmin" [] Decode.bool


{-| The login of the user account on the Enterprise Server installation.
-}
login : SelectionSet String Github.Object.EnterpriseServerUserAccount
login =
    Object.selectionForField "String" "login" [] Decode.string


{-| The profile name of the user account on the Enterprise Server installation.
-}
profileName : SelectionSet (Maybe String) Github.Object.EnterpriseServerUserAccount
profileName =
    Object.selectionForField "(Maybe String)" "profileName" [] (Decode.string |> Decode.nullable)


{-| The date and time when the user account was created on the Enterprise Server installation.
-}
remoteCreatedAt : SelectionSet Github.ScalarCodecs.DateTime Github.Object.EnterpriseServerUserAccount
remoteCreatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "remoteCreatedAt" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The ID of the user account on the Enterprise Server installation.
-}
remoteUserId : SelectionSet Int Github.Object.EnterpriseServerUserAccount
remoteUserId =
    Object.selectionForField "Int" "remoteUserId" [] Decode.int


{-| Identifies the date and time when the object was last updated.
-}
updatedAt : SelectionSet Github.ScalarCodecs.DateTime Github.Object.EnterpriseServerUserAccount
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)
