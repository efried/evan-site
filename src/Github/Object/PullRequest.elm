-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Object.PullRequest exposing (..)

import Github.Enum.CommentAuthorAssociation
import Github.Enum.CommentCannotUpdateReason
import Github.Enum.LockReason
import Github.Enum.MergeableState
import Github.Enum.ProjectCardArchivedState
import Github.Enum.ProjectNextOrderField
import Github.Enum.PullRequestMergeMethod
import Github.Enum.PullRequestReviewDecision
import Github.Enum.PullRequestReviewState
import Github.Enum.PullRequestState
import Github.Enum.PullRequestTimelineItemsItemType
import Github.Enum.ReactionContent
import Github.Enum.SubscriptionState
import Github.InputObject
import Github.Interface
import Github.Object
import Github.Scalar
import Github.ScalarCodecs
import Github.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Reason that the conversation was locked.
-}
activeLockReason : SelectionSet (Maybe Github.Enum.LockReason.LockReason) Github.Object.PullRequest
activeLockReason =
    Object.selectionForField "(Maybe Enum.LockReason.LockReason)" "activeLockReason" [] (Github.Enum.LockReason.decoder |> Decode.nullable)


{-| The number of additions in this pull request.
-}
additions : SelectionSet Int Github.Object.PullRequest
additions =
    Object.selectionForField "Int" "additions" [] Decode.int


type alias AssigneesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of Users assigned to this object.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
assignees :
    (AssigneesOptionalArguments -> AssigneesOptionalArguments)
    -> SelectionSet decodesTo Github.Object.UserConnection
    -> SelectionSet decodesTo Github.Object.PullRequest
assignees fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "assignees" optionalArgs____ object____ Basics.identity


{-| The actor who authored the comment.
-}
author :
    SelectionSet decodesTo Github.Interface.Actor
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
author object____ =
    Object.selectionForCompositeField "author" [] object____ (Basics.identity >> Decode.nullable)


{-| Author's association with the subject of the comment.
-}
authorAssociation : SelectionSet Github.Enum.CommentAuthorAssociation.CommentAuthorAssociation Github.Object.PullRequest
authorAssociation =
    Object.selectionForField "Enum.CommentAuthorAssociation.CommentAuthorAssociation" "authorAssociation" [] Github.Enum.CommentAuthorAssociation.decoder


{-| Returns the auto-merge request object if one exists for this pull request.
-}
autoMergeRequest :
    SelectionSet decodesTo Github.Object.AutoMergeRequest
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
autoMergeRequest object____ =
    Object.selectionForCompositeField "autoMergeRequest" [] object____ (Basics.identity >> Decode.nullable)


{-| Identifies the base Ref associated with the pull request.
-}
baseRef :
    SelectionSet decodesTo Github.Object.Ref
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
baseRef object____ =
    Object.selectionForCompositeField "baseRef" [] object____ (Basics.identity >> Decode.nullable)


{-| Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
-}
baseRefName : SelectionSet String Github.Object.PullRequest
baseRefName =
    Object.selectionForField "String" "baseRefName" [] Decode.string


{-| Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
-}
baseRefOid : SelectionSet Github.ScalarCodecs.GitObjectID Github.Object.PullRequest
baseRefOid =
    Object.selectionForField "ScalarCodecs.GitObjectID" "baseRefOid" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecGitObjectID |> .decoder)


{-| The repository associated with this pull request's base Ref.
-}
baseRepository :
    SelectionSet decodesTo Github.Object.Repository
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
baseRepository object____ =
    Object.selectionForCompositeField "baseRepository" [] object____ (Basics.identity >> Decode.nullable)


{-| The body as Markdown.
-}
body : SelectionSet String Github.Object.PullRequest
body =
    Object.selectionForField "String" "body" [] Decode.string


{-| The body rendered to HTML.
-}
bodyHTML : SelectionSet Github.ScalarCodecs.Html Github.Object.PullRequest
bodyHTML =
    Object.selectionForField "ScalarCodecs.Html" "bodyHTML" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecHtml |> .decoder)


{-| The body rendered to text.
-}
bodyText : SelectionSet String Github.Object.PullRequest
bodyText =
    Object.selectionForField "String" "bodyText" [] Decode.string


{-| The number of changed files in this pull request.
-}
changedFiles : SelectionSet Int Github.Object.PullRequest
changedFiles =
    Object.selectionForField "Int" "changedFiles" [] Decode.int


{-| The HTTP path for the checks of this pull request.
-}
checksResourcePath : SelectionSet Github.ScalarCodecs.Uri Github.Object.PullRequest
checksResourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "checksResourcePath" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The HTTP URL for the checks of this pull request.
-}
checksUrl : SelectionSet Github.ScalarCodecs.Uri Github.Object.PullRequest
checksUrl =
    Object.selectionForField "ScalarCodecs.Uri" "checksUrl" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| `true` if the pull request is closed
-}
closed : SelectionSet Bool Github.Object.PullRequest
closed =
    Object.selectionForField "Bool" "closed" [] Decode.bool


{-| Identifies the date and time when the object was closed.
-}
closedAt : SelectionSet (Maybe Github.ScalarCodecs.DateTime) Github.Object.PullRequest
closedAt =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "closedAt" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


type alias ClosingIssuesReferencesOptionalArguments =
    { userLinkedOnly : OptionalArgument Bool
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.IssueOrder
    }


{-| List of issues that were may be closed by this pull request

  - userLinkedOnly - Return only manually linked Issues
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for issues returned from the connection

-}
closingIssuesReferences :
    (ClosingIssuesReferencesOptionalArguments -> ClosingIssuesReferencesOptionalArguments)
    -> SelectionSet decodesTo Github.Object.IssueConnection
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
closingIssuesReferences fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { userLinkedOnly = Absent, after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "userLinkedOnly" filledInOptionals____.userLinkedOnly Encode.bool, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeIssueOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "closingIssuesReferences" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias CommentsOptionalArguments =
    { orderBy : OptionalArgument Github.InputObject.IssueCommentOrder
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of comments associated with the pull request.

  - orderBy - Ordering options for issue comments returned from the connection.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
comments :
    (CommentsOptionalArguments -> CommentsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.IssueCommentConnection
    -> SelectionSet decodesTo Github.Object.PullRequest
comments fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { orderBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeIssueCommentOrder, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "comments" optionalArgs____ object____ Basics.identity


type alias CommitsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of commits present in this pull request's head branch not present in the base branch.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
commits :
    (CommitsOptionalArguments -> CommitsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.PullRequestCommitConnection
    -> SelectionSet decodesTo Github.Object.PullRequest
commits fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "commits" optionalArgs____ object____ Basics.identity


{-| Identifies the date and time when the object was created.
-}
createdAt : SelectionSet Github.ScalarCodecs.DateTime Github.Object.PullRequest
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| Check if this comment was created via an email reply.
-}
createdViaEmail : SelectionSet Bool Github.Object.PullRequest
createdViaEmail =
    Object.selectionForField "Bool" "createdViaEmail" [] Decode.bool


{-| Identifies the primary key from the database.
-}
databaseId : SelectionSet (Maybe Int) Github.Object.PullRequest
databaseId =
    Object.selectionForField "(Maybe Int)" "databaseId" [] (Decode.int |> Decode.nullable)


{-| The number of deletions in this pull request.
-}
deletions : SelectionSet Int Github.Object.PullRequest
deletions =
    Object.selectionForField "Int" "deletions" [] Decode.int


{-| The actor who edited this pull request's body.
-}
editor :
    SelectionSet decodesTo Github.Interface.Actor
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
editor object____ =
    Object.selectionForCompositeField "editor" [] object____ (Basics.identity >> Decode.nullable)


type alias FilesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| Lists the files changed within this pull request.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
files :
    (FilesOptionalArguments -> FilesOptionalArguments)
    -> SelectionSet decodesTo Github.Object.PullRequestChangedFileConnection
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
files fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "files" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


{-| Identifies the head Ref associated with the pull request.
-}
headRef :
    SelectionSet decodesTo Github.Object.Ref
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
headRef object____ =
    Object.selectionForCompositeField "headRef" [] object____ (Basics.identity >> Decode.nullable)


{-| Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
-}
headRefName : SelectionSet String Github.Object.PullRequest
headRefName =
    Object.selectionForField "String" "headRefName" [] Decode.string


{-| Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
-}
headRefOid : SelectionSet Github.ScalarCodecs.GitObjectID Github.Object.PullRequest
headRefOid =
    Object.selectionForField "ScalarCodecs.GitObjectID" "headRefOid" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecGitObjectID |> .decoder)


{-| The repository associated with this pull request's head Ref.
-}
headRepository :
    SelectionSet decodesTo Github.Object.Repository
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
headRepository object____ =
    Object.selectionForCompositeField "headRepository" [] object____ (Basics.identity >> Decode.nullable)


{-| The owner of the repository associated with this pull request's head Ref.
-}
headRepositoryOwner :
    SelectionSet decodesTo Github.Interface.RepositoryOwner
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
headRepositoryOwner object____ =
    Object.selectionForCompositeField "headRepositoryOwner" [] object____ (Basics.identity >> Decode.nullable)


type alias HovercardOptionalArguments =
    { includeNotificationContexts : OptionalArgument Bool }


{-| The hovercard information for this issue

  - includeNotificationContexts - Whether or not to include notification contexts

-}
hovercard :
    (HovercardOptionalArguments -> HovercardOptionalArguments)
    -> SelectionSet decodesTo Github.Object.Hovercard
    -> SelectionSet decodesTo Github.Object.PullRequest
hovercard fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { includeNotificationContexts = Absent }

        optionalArgs____ =
            [ Argument.optional "includeNotificationContexts" filledInOptionals____.includeNotificationContexts Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "hovercard" optionalArgs____ object____ Basics.identity


id : SelectionSet Github.ScalarCodecs.Id Github.Object.PullRequest
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| Check if this comment was edited and includes an edit with the creation data
-}
includesCreatedEdit : SelectionSet Bool Github.Object.PullRequest
includesCreatedEdit =
    Object.selectionForField "Bool" "includesCreatedEdit" [] Decode.bool


{-| The head and base repositories are different.
-}
isCrossRepository : SelectionSet Bool Github.Object.PullRequest
isCrossRepository =
    Object.selectionForField "Bool" "isCrossRepository" [] Decode.bool


{-| Identifies if the pull request is a draft.
-}
isDraft : SelectionSet Bool Github.Object.PullRequest
isDraft =
    Object.selectionForField "Bool" "isDraft" [] Decode.bool


{-| Is this pull request read by the viewer
-}
isReadByViewer : SelectionSet (Maybe Bool) Github.Object.PullRequest
isReadByViewer =
    Object.selectionForField "(Maybe Bool)" "isReadByViewer" [] (Decode.bool |> Decode.nullable)


type alias LabelsOptionalArguments =
    { orderBy : OptionalArgument Github.InputObject.LabelOrder
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of labels associated with the object.

  - orderBy - Ordering options for labels returned from the connection.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
labels :
    (LabelsOptionalArguments -> LabelsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.LabelConnection
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
labels fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { orderBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeLabelOrder, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "labels" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


{-| The moment the editor made the last edit
-}
lastEditedAt : SelectionSet (Maybe Github.ScalarCodecs.DateTime) Github.Object.PullRequest
lastEditedAt =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "lastEditedAt" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


type alias LatestOpinionatedReviewsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , writersOnly : OptionalArgument Bool
    }


{-| A list of latest reviews per user associated with the pull request.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - writersOnly - Only return reviews from user who have write access to the repository

-}
latestOpinionatedReviews :
    (LatestOpinionatedReviewsOptionalArguments -> LatestOpinionatedReviewsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.PullRequestReviewConnection
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
latestOpinionatedReviews fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, writersOnly = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "writersOnly" filledInOptionals____.writersOnly Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "latestOpinionatedReviews" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias LatestReviewsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of latest reviews per user associated with the pull request that are not also pending review.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
latestReviews :
    (LatestReviewsOptionalArguments -> LatestReviewsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.PullRequestReviewConnection
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
latestReviews fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "latestReviews" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


{-| `true` if the pull request is locked
-}
locked : SelectionSet Bool Github.Object.PullRequest
locked =
    Object.selectionForField "Bool" "locked" [] Decode.bool


{-| Indicates whether maintainers can modify the pull request.
-}
maintainerCanModify : SelectionSet Bool Github.Object.PullRequest
maintainerCanModify =
    Object.selectionForField "Bool" "maintainerCanModify" [] Decode.bool


{-| The commit that was created when this pull request was merged.
-}
mergeCommit :
    SelectionSet decodesTo Github.Object.Commit
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
mergeCommit object____ =
    Object.selectionForCompositeField "mergeCommit" [] object____ (Basics.identity >> Decode.nullable)


{-| Whether or not the pull request can be merged based on the existence of merge conflicts.
-}
mergeable : SelectionSet Github.Enum.MergeableState.MergeableState Github.Object.PullRequest
mergeable =
    Object.selectionForField "Enum.MergeableState.MergeableState" "mergeable" [] Github.Enum.MergeableState.decoder


{-| Whether or not the pull request was merged.
-}
merged : SelectionSet Bool Github.Object.PullRequest
merged =
    Object.selectionForField "Bool" "merged" [] Decode.bool


{-| The date and time that the pull request was merged.
-}
mergedAt : SelectionSet (Maybe Github.ScalarCodecs.DateTime) Github.Object.PullRequest
mergedAt =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "mergedAt" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


{-| The actor who merged the pull request.
-}
mergedBy :
    SelectionSet decodesTo Github.Interface.Actor
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
mergedBy object____ =
    Object.selectionForCompositeField "mergedBy" [] object____ (Basics.identity >> Decode.nullable)


{-| Identifies the milestone associated with the pull request.
-}
milestone :
    SelectionSet decodesTo Github.Object.Milestone
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
milestone object____ =
    Object.selectionForCompositeField "milestone" [] object____ (Basics.identity >> Decode.nullable)


{-| Identifies the pull request number.
-}
number : SelectionSet Int Github.Object.PullRequest
number =
    Object.selectionForField "Int" "number" [] Decode.int


type alias ParticipantsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of Users that are participating in the Pull Request conversation.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
participants :
    (ParticipantsOptionalArguments -> ParticipantsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.UserConnection
    -> SelectionSet decodesTo Github.Object.PullRequest
participants fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "participants" optionalArgs____ object____ Basics.identity


{-| The permalink to the pull request.
-}
permalink : SelectionSet Github.ScalarCodecs.Uri Github.Object.PullRequest
permalink =
    Object.selectionForField "ScalarCodecs.Uri" "permalink" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The commit that GitHub automatically generated to test if this pull request could be merged. This field will not return a value if the pull request is merged, or if the test merge commit is still being generated. See the `mergeable` field for more details on the mergeability of the pull request.
-}
potentialMergeCommit :
    SelectionSet decodesTo Github.Object.Commit
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
potentialMergeCommit object____ =
    Object.selectionForCompositeField "potentialMergeCommit" [] object____ (Basics.identity >> Decode.nullable)


type alias ProjectCardsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , archivedStates : OptionalArgument (List (Maybe Github.Enum.ProjectCardArchivedState.ProjectCardArchivedState))
    }


{-| List of project cards associated with this pull request.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - archivedStates - A list of archived states to filter the cards by

-}
projectCards :
    (ProjectCardsOptionalArguments -> ProjectCardsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.ProjectCardConnection
    -> SelectionSet decodesTo Github.Object.PullRequest
projectCards fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, archivedStates = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "archivedStates" filledInOptionals____.archivedStates (Encode.enum Github.Enum.ProjectCardArchivedState.toString |> Encode.maybe |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "projectCards" optionalArgs____ object____ Basics.identity


type alias ProjectItemsOptionalArguments =
    { includeArchived : OptionalArgument Bool
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| List of project items associated with this pull request.

  - includeArchived - Include archived items.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
projectItems :
    (ProjectItemsOptionalArguments -> ProjectItemsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.ProjectV2ItemConnection
    -> SelectionSet decodesTo Github.Object.PullRequest
projectItems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { includeArchived = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "includeArchived" filledInOptionals____.includeArchived Encode.bool, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "projectItems" optionalArgs____ object____ Basics.identity


type alias ProjectNextRequiredArguments =
    { number : Int }


{-| Find a project by project (beta) number.
@deprecated The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. Follow the ProjectV2 guide at <https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/>, to find a suitable replacement. Removal on 2023-01-01 UTC.

  - number - The project (beta) number.

-}
projectNext :
    ProjectNextRequiredArguments
    -> SelectionSet decodesTo Github.Object.ProjectNext
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
projectNext requiredArgs____ object____ =
    Object.selectionForCompositeField "projectNext" [ Argument.required "number" requiredArgs____.number Encode.int ] object____ (Basics.identity >> Decode.nullable)


type alias ProjectNextItemsOptionalArguments =
    { includeArchived : OptionalArgument Bool
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| List of project (beta) items associated with this pull request.
@deprecated The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. Follow the ProjectV2 guide at <https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/>, to find a suitable replacement. Removal on 2023-01-01 UTC.

  - includeArchived - Include archived items.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
projectNextItems :
    (ProjectNextItemsOptionalArguments -> ProjectNextItemsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.ProjectNextItemConnection
    -> SelectionSet decodesTo Github.Object.PullRequest
projectNextItems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { includeArchived = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "includeArchived" filledInOptionals____.includeArchived Encode.bool, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "projectNextItems" optionalArgs____ object____ Basics.identity


type alias ProjectV2RequiredArguments =
    { number : Int }


{-| Find a project by number.

  - number - The project number.

-}
projectV2 :
    ProjectV2RequiredArguments
    -> SelectionSet decodesTo Github.Object.ProjectV2
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
projectV2 requiredArgs____ object____ =
    Object.selectionForCompositeField "projectV2" [ Argument.required "number" requiredArgs____.number Encode.int ] object____ (Basics.identity >> Decode.nullable)


type alias ProjectsNextOptionalArguments =
    { query : OptionalArgument String
    , sortBy : OptionalArgument Github.Enum.ProjectNextOrderField.ProjectNextOrderField
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of projects (beta) under the owner.
@deprecated The `ProjectNext` API is deprecated in favour of the more capable `ProjectV2` API. Follow the ProjectV2 guide at <https://github.blog/changelog/2022-06-23-the-new-github-issues-june-23rd-update/>, to find a suitable replacement. Removal on 2023-01-01 UTC.

  - query - A project (beta) to search for under the the owner.
  - sortBy - How to order the returned projects (beta).
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
projectsNext :
    (ProjectsNextOptionalArguments -> ProjectsNextOptionalArguments)
    -> SelectionSet decodesTo Github.Object.ProjectNextConnection
    -> SelectionSet decodesTo Github.Object.PullRequest
projectsNext fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { query = Absent, sortBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "query" filledInOptionals____.query Encode.string, Argument.optional "sortBy" filledInOptionals____.sortBy (Encode.enum Github.Enum.ProjectNextOrderField.toString), Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "projectsNext" optionalArgs____ object____ Basics.identity


type alias ProjectsV2OptionalArguments =
    { query : OptionalArgument String
    , orderBy : OptionalArgument Github.InputObject.ProjectV2Order
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of projects under the owner.

  - query - A project to search for under the the owner.
  - orderBy - How to order the returned projects.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
projectsV2 :
    (ProjectsV2OptionalArguments -> ProjectsV2OptionalArguments)
    -> SelectionSet decodesTo Github.Object.ProjectV2Connection
    -> SelectionSet decodesTo Github.Object.PullRequest
projectsV2 fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { query = Absent, orderBy = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "query" filledInOptionals____.query Encode.string, Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeProjectV2Order, Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "projectsV2" optionalArgs____ object____ Basics.identity


{-| Identifies when the comment was published at.
-}
publishedAt : SelectionSet (Maybe Github.ScalarCodecs.DateTime) Github.Object.PullRequest
publishedAt =
    Object.selectionForField "(Maybe ScalarCodecs.DateTime)" "publishedAt" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecDateTime |> .decoder |> Decode.nullable)


{-| A list of reactions grouped by content left on the subject.
-}
reactionGroups :
    SelectionSet decodesTo Github.Object.ReactionGroup
    -> SelectionSet (Maybe (List decodesTo)) Github.Object.PullRequest
reactionGroups object____ =
    Object.selectionForCompositeField "reactionGroups" [] object____ (Basics.identity >> Decode.list >> Decode.nullable)


type alias ReactionsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , content : OptionalArgument Github.Enum.ReactionContent.ReactionContent
    , orderBy : OptionalArgument Github.InputObject.ReactionOrder
    }


{-| A list of Reactions left on the Issue.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - content - Allows filtering Reactions by emoji.
  - orderBy - Allows specifying the order in which reactions are returned.

-}
reactions :
    (ReactionsOptionalArguments -> ReactionsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.ReactionConnection
    -> SelectionSet decodesTo Github.Object.PullRequest
reactions fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, content = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "content" filledInOptionals____.content (Encode.enum Github.Enum.ReactionContent.toString), Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeReactionOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "reactions" optionalArgs____ object____ Basics.identity


{-| The repository associated with this node.
-}
repository :
    SelectionSet decodesTo Github.Object.Repository
    -> SelectionSet decodesTo Github.Object.PullRequest
repository object____ =
    Object.selectionForCompositeField "repository" [] object____ Basics.identity


{-| The HTTP path for this pull request.
-}
resourcePath : SelectionSet Github.ScalarCodecs.Uri Github.Object.PullRequest
resourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "resourcePath" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The HTTP path for reverting this pull request.
-}
revertResourcePath : SelectionSet Github.ScalarCodecs.Uri Github.Object.PullRequest
revertResourcePath =
    Object.selectionForField "ScalarCodecs.Uri" "revertResourcePath" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The HTTP URL for reverting this pull request.
-}
revertUrl : SelectionSet Github.ScalarCodecs.Uri Github.Object.PullRequest
revertUrl =
    Object.selectionForField "ScalarCodecs.Uri" "revertUrl" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The current status of this pull request with respect to code review.
-}
reviewDecision : SelectionSet (Maybe Github.Enum.PullRequestReviewDecision.PullRequestReviewDecision) Github.Object.PullRequest
reviewDecision =
    Object.selectionForField "(Maybe Enum.PullRequestReviewDecision.PullRequestReviewDecision)" "reviewDecision" [] (Github.Enum.PullRequestReviewDecision.decoder |> Decode.nullable)


type alias ReviewRequestsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of review requests associated with the pull request.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
reviewRequests :
    (ReviewRequestsOptionalArguments -> ReviewRequestsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.ReviewRequestConnection
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
reviewRequests fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "reviewRequests" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


type alias ReviewThreadsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| The list of all review threads for this pull request.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
reviewThreads :
    (ReviewThreadsOptionalArguments -> ReviewThreadsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.PullRequestReviewThreadConnection
    -> SelectionSet decodesTo Github.Object.PullRequest
reviewThreads fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "reviewThreads" optionalArgs____ object____ Basics.identity


type alias ReviewsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , states : OptionalArgument (List Github.Enum.PullRequestReviewState.PullRequestReviewState)
    , author : OptionalArgument String
    }


{-| A list of reviews associated with the pull request.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - states - A list of states to filter the reviews.
  - author - Filter by author of the review.

-}
reviews :
    (ReviewsOptionalArguments -> ReviewsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.PullRequestReviewConnection
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
reviews fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, states = Absent, author = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "states" filledInOptionals____.states (Encode.enum Github.Enum.PullRequestReviewState.toString |> Encode.list), Argument.optional "author" filledInOptionals____.author Encode.string ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "reviews" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


{-| Identifies the state of the pull request.
-}
state : SelectionSet Github.Enum.PullRequestState.PullRequestState Github.Object.PullRequest
state =
    Object.selectionForField "Enum.PullRequestState.PullRequestState" "state" [] Github.Enum.PullRequestState.decoder


{-| A list of reviewer suggestions based on commit history and past review comments.
-}
suggestedReviewers :
    SelectionSet decodesTo Github.Object.SuggestedReviewer
    -> SelectionSet (List (Maybe decodesTo)) Github.Object.PullRequest
suggestedReviewers object____ =
    Object.selectionForCompositeField "suggestedReviewers" [] object____ (Basics.identity >> Decode.nullable >> Decode.list)


type alias TimelineOptionalArguments =
    { since : OptionalArgument Github.ScalarCodecs.DateTime
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of events, comments, commits, etc. associated with the pull request.
@deprecated `timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.

  - since - Allows filtering timeline events by a `since` timestamp.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
timeline :
    (TimelineOptionalArguments -> TimelineOptionalArguments)
    -> SelectionSet decodesTo Github.Object.PullRequestTimelineConnection
    -> SelectionSet decodesTo Github.Object.PullRequest
timeline fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { since = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "since" filledInOptionals____.since (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecDateTime), Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "timeline" optionalArgs____ object____ Basics.identity


type alias TimelineItemsOptionalArguments =
    { since : OptionalArgument Github.ScalarCodecs.DateTime
    , skip : OptionalArgument Int
    , itemTypes : OptionalArgument (List Github.Enum.PullRequestTimelineItemsItemType.PullRequestTimelineItemsItemType)
    , after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of events, comments, commits, etc. associated with the pull request.

  - since - Filter timeline items by a `since` timestamp.
  - skip - Skips the first _n_ elements in the list.
  - itemTypes - Filter timeline items by type.
  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
timelineItems :
    (TimelineItemsOptionalArguments -> TimelineItemsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.PullRequestTimelineItemsConnection
    -> SelectionSet decodesTo Github.Object.PullRequest
timelineItems fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { since = Absent, skip = Absent, itemTypes = Absent, after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "since" filledInOptionals____.since (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecDateTime), Argument.optional "skip" filledInOptionals____.skip Encode.int, Argument.optional "itemTypes" filledInOptionals____.itemTypes (Encode.enum Github.Enum.PullRequestTimelineItemsItemType.toString |> Encode.list), Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "timelineItems" optionalArgs____ object____ Basics.identity


{-| Identifies the pull request title.
-}
title : SelectionSet String Github.Object.PullRequest
title =
    Object.selectionForField "String" "title" [] Decode.string


{-| Identifies the pull request title rendered to HTML.
-}
titleHTML : SelectionSet Github.ScalarCodecs.Html Github.Object.PullRequest
titleHTML =
    Object.selectionForField "ScalarCodecs.Html" "titleHTML" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecHtml |> .decoder)


{-| Identifies the date and time when the object was last updated.
-}
updatedAt : SelectionSet Github.ScalarCodecs.DateTime Github.Object.PullRequest
updatedAt =
    Object.selectionForField "ScalarCodecs.DateTime" "updatedAt" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| The HTTP URL for this pull request.
-}
url : SelectionSet Github.ScalarCodecs.Uri Github.Object.PullRequest
url =
    Object.selectionForField "ScalarCodecs.Uri" "url" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecUri |> .decoder)


type alias UserContentEditsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    }


{-| A list of edits to this content.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.

-}
userContentEdits :
    (UserContentEditsOptionalArguments -> UserContentEditsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.UserContentEditConnection
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
userContentEdits fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "userContentEdits" optionalArgs____ object____ (Basics.identity >> Decode.nullable)


{-| Whether or not the viewer can apply suggestion.
-}
viewerCanApplySuggestion : SelectionSet Bool Github.Object.PullRequest
viewerCanApplySuggestion =
    Object.selectionForField "Bool" "viewerCanApplySuggestion" [] Decode.bool


{-| Check if the viewer can restore the deleted head ref.
-}
viewerCanDeleteHeadRef : SelectionSet Bool Github.Object.PullRequest
viewerCanDeleteHeadRef =
    Object.selectionForField "Bool" "viewerCanDeleteHeadRef" [] Decode.bool


{-| Whether or not the viewer can disable auto-merge
-}
viewerCanDisableAutoMerge : SelectionSet Bool Github.Object.PullRequest
viewerCanDisableAutoMerge =
    Object.selectionForField "Bool" "viewerCanDisableAutoMerge" [] Decode.bool


{-| Can the viewer edit files within this pull request.
-}
viewerCanEditFiles : SelectionSet Bool Github.Object.PullRequest
viewerCanEditFiles =
    Object.selectionForField "Bool" "viewerCanEditFiles" [] Decode.bool


{-| Whether or not the viewer can enable auto-merge
-}
viewerCanEnableAutoMerge : SelectionSet Bool Github.Object.PullRequest
viewerCanEnableAutoMerge =
    Object.selectionForField "Bool" "viewerCanEnableAutoMerge" [] Decode.bool


{-| Indicates whether the viewer can bypass branch protections and merge the pull request immediately
-}
viewerCanMergeAsAdmin : SelectionSet Bool Github.Object.PullRequest
viewerCanMergeAsAdmin =
    Object.selectionForField "Bool" "viewerCanMergeAsAdmin" [] Decode.bool


{-| Can user react to this subject
-}
viewerCanReact : SelectionSet Bool Github.Object.PullRequest
viewerCanReact =
    Object.selectionForField "Bool" "viewerCanReact" [] Decode.bool


{-| Check if the viewer is able to change their subscription status for the repository.
-}
viewerCanSubscribe : SelectionSet Bool Github.Object.PullRequest
viewerCanSubscribe =
    Object.selectionForField "Bool" "viewerCanSubscribe" [] Decode.bool


{-| Check if the current viewer can update this object.
-}
viewerCanUpdate : SelectionSet Bool Github.Object.PullRequest
viewerCanUpdate =
    Object.selectionForField "Bool" "viewerCanUpdate" [] Decode.bool


{-| Reasons why the current viewer can not update this comment.
-}
viewerCannotUpdateReasons : SelectionSet (List Github.Enum.CommentCannotUpdateReason.CommentCannotUpdateReason) Github.Object.PullRequest
viewerCannotUpdateReasons =
    Object.selectionForField "(List Enum.CommentCannotUpdateReason.CommentCannotUpdateReason)" "viewerCannotUpdateReasons" [] (Github.Enum.CommentCannotUpdateReason.decoder |> Decode.list)


{-| Did the viewer author this comment.
-}
viewerDidAuthor : SelectionSet Bool Github.Object.PullRequest
viewerDidAuthor =
    Object.selectionForField "Bool" "viewerDidAuthor" [] Decode.bool


{-| The latest review given from the viewer.
-}
viewerLatestReview :
    SelectionSet decodesTo Github.Object.PullRequestReview
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
viewerLatestReview object____ =
    Object.selectionForCompositeField "viewerLatestReview" [] object____ (Basics.identity >> Decode.nullable)


{-| The person who has requested the viewer for review on this pull request.
-}
viewerLatestReviewRequest :
    SelectionSet decodesTo Github.Object.ReviewRequest
    -> SelectionSet (Maybe decodesTo) Github.Object.PullRequest
viewerLatestReviewRequest object____ =
    Object.selectionForCompositeField "viewerLatestReviewRequest" [] object____ (Basics.identity >> Decode.nullable)


type alias ViewerMergeBodyTextOptionalArguments =
    { mergeType : OptionalArgument Github.Enum.PullRequestMergeMethod.PullRequestMergeMethod }


{-| The merge body text for the viewer and method.

  - mergeType - The merge method for the message.

-}
viewerMergeBodyText :
    (ViewerMergeBodyTextOptionalArguments -> ViewerMergeBodyTextOptionalArguments)
    -> SelectionSet String Github.Object.PullRequest
viewerMergeBodyText fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { mergeType = Absent }

        optionalArgs____ =
            [ Argument.optional "mergeType" filledInOptionals____.mergeType (Encode.enum Github.Enum.PullRequestMergeMethod.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "String" "viewerMergeBodyText" optionalArgs____ Decode.string


type alias ViewerMergeHeadlineTextOptionalArguments =
    { mergeType : OptionalArgument Github.Enum.PullRequestMergeMethod.PullRequestMergeMethod }


{-| The merge headline text for the viewer and method.

  - mergeType - The merge method for the message.

-}
viewerMergeHeadlineText :
    (ViewerMergeHeadlineTextOptionalArguments -> ViewerMergeHeadlineTextOptionalArguments)
    -> SelectionSet String Github.Object.PullRequest
viewerMergeHeadlineText fillInOptionals____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { mergeType = Absent }

        optionalArgs____ =
            [ Argument.optional "mergeType" filledInOptionals____.mergeType (Encode.enum Github.Enum.PullRequestMergeMethod.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForField "String" "viewerMergeHeadlineText" optionalArgs____ Decode.string


{-| Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
-}
viewerSubscription : SelectionSet (Maybe Github.Enum.SubscriptionState.SubscriptionState) Github.Object.PullRequest
viewerSubscription =
    Object.selectionForField "(Maybe Enum.SubscriptionState.SubscriptionState)" "viewerSubscription" [] (Github.Enum.SubscriptionState.decoder |> Decode.nullable)
