-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.InputObject exposing (..)

import Github.Enum.ActorType
import Github.Enum.AuditLogOrderField
import Github.Enum.CheckAnnotationLevel
import Github.Enum.CheckConclusionState
import Github.Enum.CheckRunType
import Github.Enum.CheckStatusState
import Github.Enum.CommitContributionOrderField
import Github.Enum.DeploymentOrderField
import Github.Enum.DiffSide
import Github.Enum.DiscussionOrderField
import Github.Enum.DiscussionPollOptionOrderField
import Github.Enum.DismissReason
import Github.Enum.EnterpriseAdministratorInvitationOrderField
import Github.Enum.EnterpriseAdministratorRole
import Github.Enum.EnterpriseAllowPrivateRepositoryForkingPolicyValue
import Github.Enum.EnterpriseDefaultRepositoryPermissionSettingValue
import Github.Enum.EnterpriseEnabledDisabledSettingValue
import Github.Enum.EnterpriseEnabledSettingValue
import Github.Enum.EnterpriseMemberOrderField
import Github.Enum.EnterpriseMembersCanCreateRepositoriesSettingValue
import Github.Enum.EnterpriseMembersCanMakePurchasesSettingValue
import Github.Enum.EnterpriseServerInstallationOrderField
import Github.Enum.EnterpriseServerUserAccountEmailOrderField
import Github.Enum.EnterpriseServerUserAccountOrderField
import Github.Enum.EnterpriseServerUserAccountsUploadOrderField
import Github.Enum.GistOrderField
import Github.Enum.IpAllowListEnabledSettingValue
import Github.Enum.IpAllowListEntryOrderField
import Github.Enum.IpAllowListForInstalledAppsEnabledSettingValue
import Github.Enum.IssueClosedStateReason
import Github.Enum.IssueCommentOrderField
import Github.Enum.IssueOrderField
import Github.Enum.IssueState
import Github.Enum.LabelOrderField
import Github.Enum.LanguageOrderField
import Github.Enum.LockReason
import Github.Enum.MigrationSourceType
import Github.Enum.MilestoneOrderField
import Github.Enum.NotificationRestrictionSettingValue
import Github.Enum.OrderDirection
import Github.Enum.OrgEnterpriseOwnerOrderField
import Github.Enum.OrganizationOrderField
import Github.Enum.PackageFileOrderField
import Github.Enum.PackageOrderField
import Github.Enum.PackageVersionOrderField
import Github.Enum.ProjectOrderField
import Github.Enum.ProjectState
import Github.Enum.ProjectTemplate
import Github.Enum.ProjectV2FieldOrderField
import Github.Enum.ProjectV2ItemFieldValueOrderField
import Github.Enum.ProjectV2ItemOrderField
import Github.Enum.ProjectV2OrderField
import Github.Enum.ProjectV2ViewOrderField
import Github.Enum.PullRequestMergeMethod
import Github.Enum.PullRequestOrderField
import Github.Enum.PullRequestReviewEvent
import Github.Enum.PullRequestUpdateState
import Github.Enum.ReactionContent
import Github.Enum.ReactionOrderField
import Github.Enum.RefOrderField
import Github.Enum.ReleaseOrderField
import Github.Enum.ReportedContentClassifiers
import Github.Enum.RepositoryInteractionLimit
import Github.Enum.RepositoryInteractionLimitExpiry
import Github.Enum.RepositoryInvitationOrderField
import Github.Enum.RepositoryMigrationOrderDirection
import Github.Enum.RepositoryMigrationOrderField
import Github.Enum.RepositoryOrderField
import Github.Enum.RepositoryPermission
import Github.Enum.RepositoryVisibility
import Github.Enum.RequestableCheckStatusState
import Github.Enum.RoleInOrganization
import Github.Enum.SamlDigestAlgorithm
import Github.Enum.SamlSignatureAlgorithm
import Github.Enum.SavedReplyOrderField
import Github.Enum.SecurityAdvisoryIdentifierType
import Github.Enum.SecurityAdvisoryOrderField
import Github.Enum.SecurityVulnerabilityOrderField
import Github.Enum.SponsorOrderField
import Github.Enum.SponsorableOrderField
import Github.Enum.SponsorsActivityOrderField
import Github.Enum.SponsorsTierOrderField
import Github.Enum.SponsorshipNewsletterOrderField
import Github.Enum.SponsorshipOrderField
import Github.Enum.SponsorshipPrivacy
import Github.Enum.StarOrderField
import Github.Enum.SubscriptionState
import Github.Enum.TeamDiscussionCommentOrderField
import Github.Enum.TeamDiscussionOrderField
import Github.Enum.TeamMemberOrderField
import Github.Enum.TeamOrderField
import Github.Enum.TeamRepositoryOrderField
import Github.Enum.TopicSuggestionDeclineReason
import Github.Enum.UserStatusOrderField
import Github.Enum.VerifiableDomainOrderField
import Github.Enum.WorkflowRunOrderField
import Github.Interface
import Github.Object
import Github.Scalar
import Github.ScalarCodecs
import Github.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildAbortQueuedMigrationsInput :
    AbortQueuedMigrationsInputRequiredFields
    -> (AbortQueuedMigrationsInputOptionalFields -> AbortQueuedMigrationsInputOptionalFields)
    -> AbortQueuedMigrationsInput
buildAbortQueuedMigrationsInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { ownerId = required____.ownerId, clientMutationId = optionals____.clientMutationId }


type alias AbortQueuedMigrationsInputRequiredFields =
    { ownerId : Github.ScalarCodecs.Id }


type alias AbortQueuedMigrationsInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AbortQueuedMigrationsInput input object.
-}
type alias AbortQueuedMigrationsInput =
    { ownerId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AbortQueuedMigrationsInput into a value that can be used as an argument.
-}
encodeAbortQueuedMigrationsInput : AbortQueuedMigrationsInput -> Value
encodeAbortQueuedMigrationsInput input____ =
    Encode.maybeObject
        [ ( "ownerId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.ownerId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAcceptEnterpriseAdministratorInvitationInput :
    AcceptEnterpriseAdministratorInvitationInputRequiredFields
    -> (AcceptEnterpriseAdministratorInvitationInputOptionalFields -> AcceptEnterpriseAdministratorInvitationInputOptionalFields)
    -> AcceptEnterpriseAdministratorInvitationInput
buildAcceptEnterpriseAdministratorInvitationInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { invitationId = required____.invitationId, clientMutationId = optionals____.clientMutationId }


type alias AcceptEnterpriseAdministratorInvitationInputRequiredFields =
    { invitationId : Github.ScalarCodecs.Id }


type alias AcceptEnterpriseAdministratorInvitationInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AcceptEnterpriseAdministratorInvitationInput input object.
-}
type alias AcceptEnterpriseAdministratorInvitationInput =
    { invitationId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AcceptEnterpriseAdministratorInvitationInput into a value that can be used as an argument.
-}
encodeAcceptEnterpriseAdministratorInvitationInput : AcceptEnterpriseAdministratorInvitationInput -> Value
encodeAcceptEnterpriseAdministratorInvitationInput input____ =
    Encode.maybeObject
        [ ( "invitationId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.invitationId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAcceptTopicSuggestionInput :
    AcceptTopicSuggestionInputRequiredFields
    -> (AcceptTopicSuggestionInputOptionalFields -> AcceptTopicSuggestionInputOptionalFields)
    -> AcceptTopicSuggestionInput
buildAcceptTopicSuggestionInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { repositoryId = required____.repositoryId, name = required____.name, clientMutationId = optionals____.clientMutationId }


type alias AcceptTopicSuggestionInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id
    , name : String
    }


type alias AcceptTopicSuggestionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AcceptTopicSuggestionInput input object.
-}
type alias AcceptTopicSuggestionInput =
    { repositoryId : Github.ScalarCodecs.Id
    , name : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AcceptTopicSuggestionInput into a value that can be used as an argument.
-}
encodeAcceptTopicSuggestionInput : AcceptTopicSuggestionInput -> Value
encodeAcceptTopicSuggestionInput input____ =
    Encode.maybeObject
        [ ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "name", Encode.string input____.name |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddAssigneesToAssignableInput :
    AddAssigneesToAssignableInputRequiredFields
    -> (AddAssigneesToAssignableInputOptionalFields -> AddAssigneesToAssignableInputOptionalFields)
    -> AddAssigneesToAssignableInput
buildAddAssigneesToAssignableInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { assignableId = required____.assignableId, assigneeIds = required____.assigneeIds, clientMutationId = optionals____.clientMutationId }


type alias AddAssigneesToAssignableInputRequiredFields =
    { assignableId : Github.ScalarCodecs.Id
    , assigneeIds : List Github.ScalarCodecs.Id
    }


type alias AddAssigneesToAssignableInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddAssigneesToAssignableInput input object.
-}
type alias AddAssigneesToAssignableInput =
    { assignableId : Github.ScalarCodecs.Id
    , assigneeIds : List Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddAssigneesToAssignableInput into a value that can be used as an argument.
-}
encodeAddAssigneesToAssignableInput : AddAssigneesToAssignableInput -> Value
encodeAddAssigneesToAssignableInput input____ =
    Encode.maybeObject
        [ ( "assignableId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.assignableId |> Just ), ( "assigneeIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) input____.assigneeIds |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddCommentInput :
    AddCommentInputRequiredFields
    -> (AddCommentInputOptionalFields -> AddCommentInputOptionalFields)
    -> AddCommentInput
buildAddCommentInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { subjectId = required____.subjectId, body = required____.body, clientMutationId = optionals____.clientMutationId }


type alias AddCommentInputRequiredFields =
    { subjectId : Github.ScalarCodecs.Id
    , body : String
    }


type alias AddCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddCommentInput input object.
-}
type alias AddCommentInput =
    { subjectId : Github.ScalarCodecs.Id
    , body : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddCommentInput into a value that can be used as an argument.
-}
encodeAddCommentInput : AddCommentInput -> Value
encodeAddCommentInput input____ =
    Encode.maybeObject
        [ ( "subjectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.subjectId |> Just ), ( "body", Encode.string input____.body |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddDiscussionCommentInput :
    AddDiscussionCommentInputRequiredFields
    -> (AddDiscussionCommentInputOptionalFields -> AddDiscussionCommentInputOptionalFields)
    -> AddDiscussionCommentInput
buildAddDiscussionCommentInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { replyToId = Absent, clientMutationId = Absent }
    in
    { discussionId = required____.discussionId, replyToId = optionals____.replyToId, body = required____.body, clientMutationId = optionals____.clientMutationId }


type alias AddDiscussionCommentInputRequiredFields =
    { discussionId : Github.ScalarCodecs.Id
    , body : String
    }


type alias AddDiscussionCommentInputOptionalFields =
    { replyToId : OptionalArgument Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the AddDiscussionCommentInput input object.
-}
type alias AddDiscussionCommentInput =
    { discussionId : Github.ScalarCodecs.Id
    , replyToId : OptionalArgument Github.ScalarCodecs.Id
    , body : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddDiscussionCommentInput into a value that can be used as an argument.
-}
encodeAddDiscussionCommentInput : AddDiscussionCommentInput -> Value
encodeAddDiscussionCommentInput input____ =
    Encode.maybeObject
        [ ( "discussionId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.discussionId |> Just ), ( "replyToId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.replyToId ), ( "body", Encode.string input____.body |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddDiscussionPollVoteInput :
    AddDiscussionPollVoteInputRequiredFields
    -> (AddDiscussionPollVoteInputOptionalFields -> AddDiscussionPollVoteInputOptionalFields)
    -> AddDiscussionPollVoteInput
buildAddDiscussionPollVoteInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { pollOptionId = required____.pollOptionId, clientMutationId = optionals____.clientMutationId }


type alias AddDiscussionPollVoteInputRequiredFields =
    { pollOptionId : Github.ScalarCodecs.Id }


type alias AddDiscussionPollVoteInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddDiscussionPollVoteInput input object.
-}
type alias AddDiscussionPollVoteInput =
    { pollOptionId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddDiscussionPollVoteInput into a value that can be used as an argument.
-}
encodeAddDiscussionPollVoteInput : AddDiscussionPollVoteInput -> Value
encodeAddDiscussionPollVoteInput input____ =
    Encode.maybeObject
        [ ( "pollOptionId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.pollOptionId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddEnterpriseSupportEntitlementInput :
    AddEnterpriseSupportEntitlementInputRequiredFields
    -> (AddEnterpriseSupportEntitlementInputOptionalFields -> AddEnterpriseSupportEntitlementInputOptionalFields)
    -> AddEnterpriseSupportEntitlementInput
buildAddEnterpriseSupportEntitlementInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, login = required____.login, clientMutationId = optionals____.clientMutationId }


type alias AddEnterpriseSupportEntitlementInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , login : String
    }


type alias AddEnterpriseSupportEntitlementInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddEnterpriseSupportEntitlementInput input object.
-}
type alias AddEnterpriseSupportEntitlementInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , login : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddEnterpriseSupportEntitlementInput into a value that can be used as an argument.
-}
encodeAddEnterpriseSupportEntitlementInput : AddEnterpriseSupportEntitlementInput -> Value
encodeAddEnterpriseSupportEntitlementInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "login", Encode.string input____.login |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddLabelsToLabelableInput :
    AddLabelsToLabelableInputRequiredFields
    -> (AddLabelsToLabelableInputOptionalFields -> AddLabelsToLabelableInputOptionalFields)
    -> AddLabelsToLabelableInput
buildAddLabelsToLabelableInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { labelableId = required____.labelableId, labelIds = required____.labelIds, clientMutationId = optionals____.clientMutationId }


type alias AddLabelsToLabelableInputRequiredFields =
    { labelableId : Github.ScalarCodecs.Id
    , labelIds : List Github.ScalarCodecs.Id
    }


type alias AddLabelsToLabelableInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddLabelsToLabelableInput input object.
-}
type alias AddLabelsToLabelableInput =
    { labelableId : Github.ScalarCodecs.Id
    , labelIds : List Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddLabelsToLabelableInput into a value that can be used as an argument.
-}
encodeAddLabelsToLabelableInput : AddLabelsToLabelableInput -> Value
encodeAddLabelsToLabelableInput input____ =
    Encode.maybeObject
        [ ( "labelableId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.labelableId |> Just ), ( "labelIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) input____.labelIds |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddProjectCardInput :
    AddProjectCardInputRequiredFields
    -> (AddProjectCardInputOptionalFields -> AddProjectCardInputOptionalFields)
    -> AddProjectCardInput
buildAddProjectCardInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { contentId = Absent, note = Absent, clientMutationId = Absent }
    in
    { projectColumnId = required____.projectColumnId, contentId = optionals____.contentId, note = optionals____.note, clientMutationId = optionals____.clientMutationId }


type alias AddProjectCardInputRequiredFields =
    { projectColumnId : Github.ScalarCodecs.Id }


type alias AddProjectCardInputOptionalFields =
    { contentId : OptionalArgument Github.ScalarCodecs.Id
    , note : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the AddProjectCardInput input object.
-}
type alias AddProjectCardInput =
    { projectColumnId : Github.ScalarCodecs.Id
    , contentId : OptionalArgument Github.ScalarCodecs.Id
    , note : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddProjectCardInput into a value that can be used as an argument.
-}
encodeAddProjectCardInput : AddProjectCardInput -> Value
encodeAddProjectCardInput input____ =
    Encode.maybeObject
        [ ( "projectColumnId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.projectColumnId |> Just ), ( "contentId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.contentId ), ( "note", Encode.string |> Encode.optional input____.note ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddProjectColumnInput :
    AddProjectColumnInputRequiredFields
    -> (AddProjectColumnInputOptionalFields -> AddProjectColumnInputOptionalFields)
    -> AddProjectColumnInput
buildAddProjectColumnInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { projectId = required____.projectId, name = required____.name, clientMutationId = optionals____.clientMutationId }


type alias AddProjectColumnInputRequiredFields =
    { projectId : Github.ScalarCodecs.Id
    , name : String
    }


type alias AddProjectColumnInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddProjectColumnInput input object.
-}
type alias AddProjectColumnInput =
    { projectId : Github.ScalarCodecs.Id
    , name : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddProjectColumnInput into a value that can be used as an argument.
-}
encodeAddProjectColumnInput : AddProjectColumnInput -> Value
encodeAddProjectColumnInput input____ =
    Encode.maybeObject
        [ ( "projectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.projectId |> Just ), ( "name", Encode.string input____.name |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddProjectDraftIssueInput :
    (AddProjectDraftIssueInputOptionalFields -> AddProjectDraftIssueInputOptionalFields)
    -> AddProjectDraftIssueInput
buildAddProjectDraftIssueInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { projectId = Absent, title = Absent, body = Absent, assigneeIds = Absent, clientMutationId = Absent }
    in
    { projectId = optionals____.projectId, title = optionals____.title, body = optionals____.body, assigneeIds = optionals____.assigneeIds, clientMutationId = optionals____.clientMutationId }


type alias AddProjectDraftIssueInputOptionalFields =
    { projectId : OptionalArgument Github.ScalarCodecs.Id
    , title : OptionalArgument String
    , body : OptionalArgument String
    , assigneeIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Type for the AddProjectDraftIssueInput input object.
-}
type alias AddProjectDraftIssueInput =
    { projectId : OptionalArgument Github.ScalarCodecs.Id
    , title : OptionalArgument String
    , body : OptionalArgument String
    , assigneeIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddProjectDraftIssueInput into a value that can be used as an argument.
-}
encodeAddProjectDraftIssueInput : AddProjectDraftIssueInput -> Value
encodeAddProjectDraftIssueInput input____ =
    Encode.maybeObject
        [ ( "projectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.projectId ), ( "title", Encode.string |> Encode.optional input____.title ), ( "body", Encode.string |> Encode.optional input____.body ), ( "assigneeIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.assigneeIds ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddProjectNextItemInput :
    (AddProjectNextItemInputOptionalFields -> AddProjectNextItemInputOptionalFields)
    -> AddProjectNextItemInput
buildAddProjectNextItemInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { projectId = Absent, contentId = Absent, clientMutationId = Absent }
    in
    { projectId = optionals____.projectId, contentId = optionals____.contentId, clientMutationId = optionals____.clientMutationId }


type alias AddProjectNextItemInputOptionalFields =
    { projectId : OptionalArgument Github.ScalarCodecs.Id
    , contentId : OptionalArgument Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the AddProjectNextItemInput input object.
-}
type alias AddProjectNextItemInput =
    { projectId : OptionalArgument Github.ScalarCodecs.Id
    , contentId : OptionalArgument Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddProjectNextItemInput into a value that can be used as an argument.
-}
encodeAddProjectNextItemInput : AddProjectNextItemInput -> Value
encodeAddProjectNextItemInput input____ =
    Encode.maybeObject
        [ ( "projectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.projectId ), ( "contentId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.contentId ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddProjectV2DraftIssueInput :
    AddProjectV2DraftIssueInputRequiredFields
    -> (AddProjectV2DraftIssueInputOptionalFields -> AddProjectV2DraftIssueInputOptionalFields)
    -> AddProjectV2DraftIssueInput
buildAddProjectV2DraftIssueInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { body = Absent, assigneeIds = Absent, clientMutationId = Absent }
    in
    { projectId = required____.projectId, title = required____.title, body = optionals____.body, assigneeIds = optionals____.assigneeIds, clientMutationId = optionals____.clientMutationId }


type alias AddProjectV2DraftIssueInputRequiredFields =
    { projectId : Github.ScalarCodecs.Id
    , title : String
    }


type alias AddProjectV2DraftIssueInputOptionalFields =
    { body : OptionalArgument String
    , assigneeIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Type for the AddProjectV2DraftIssueInput input object.
-}
type alias AddProjectV2DraftIssueInput =
    { projectId : Github.ScalarCodecs.Id
    , title : String
    , body : OptionalArgument String
    , assigneeIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddProjectV2DraftIssueInput into a value that can be used as an argument.
-}
encodeAddProjectV2DraftIssueInput : AddProjectV2DraftIssueInput -> Value
encodeAddProjectV2DraftIssueInput input____ =
    Encode.maybeObject
        [ ( "projectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.projectId |> Just ), ( "title", Encode.string input____.title |> Just ), ( "body", Encode.string |> Encode.optional input____.body ), ( "assigneeIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.assigneeIds ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddProjectV2ItemByIdInput :
    AddProjectV2ItemByIdInputRequiredFields
    -> (AddProjectV2ItemByIdInputOptionalFields -> AddProjectV2ItemByIdInputOptionalFields)
    -> AddProjectV2ItemByIdInput
buildAddProjectV2ItemByIdInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { projectId = required____.projectId, contentId = required____.contentId, clientMutationId = optionals____.clientMutationId }


type alias AddProjectV2ItemByIdInputRequiredFields =
    { projectId : Github.ScalarCodecs.Id
    , contentId : Github.ScalarCodecs.Id
    }


type alias AddProjectV2ItemByIdInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddProjectV2ItemByIdInput input object.
-}
type alias AddProjectV2ItemByIdInput =
    { projectId : Github.ScalarCodecs.Id
    , contentId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddProjectV2ItemByIdInput into a value that can be used as an argument.
-}
encodeAddProjectV2ItemByIdInput : AddProjectV2ItemByIdInput -> Value
encodeAddProjectV2ItemByIdInput input____ =
    Encode.maybeObject
        [ ( "projectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.projectId |> Just ), ( "contentId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.contentId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddPullRequestReviewCommentInput :
    AddPullRequestReviewCommentInputRequiredFields
    -> (AddPullRequestReviewCommentInputOptionalFields -> AddPullRequestReviewCommentInputOptionalFields)
    -> AddPullRequestReviewCommentInput
buildAddPullRequestReviewCommentInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { pullRequestId = Absent, pullRequestReviewId = Absent, commitOID = Absent, path = Absent, position = Absent, inReplyTo = Absent, clientMutationId = Absent }
    in
    { pullRequestId = optionals____.pullRequestId, pullRequestReviewId = optionals____.pullRequestReviewId, commitOID = optionals____.commitOID, body = required____.body, path = optionals____.path, position = optionals____.position, inReplyTo = optionals____.inReplyTo, clientMutationId = optionals____.clientMutationId }


type alias AddPullRequestReviewCommentInputRequiredFields =
    { body : String }


type alias AddPullRequestReviewCommentInputOptionalFields =
    { pullRequestId : OptionalArgument Github.ScalarCodecs.Id
    , pullRequestReviewId : OptionalArgument Github.ScalarCodecs.Id
    , commitOID : OptionalArgument Github.ScalarCodecs.GitObjectID
    , path : OptionalArgument String
    , position : OptionalArgument Int
    , inReplyTo : OptionalArgument Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the AddPullRequestReviewCommentInput input object.
-}
type alias AddPullRequestReviewCommentInput =
    { pullRequestId : OptionalArgument Github.ScalarCodecs.Id
    , pullRequestReviewId : OptionalArgument Github.ScalarCodecs.Id
    , commitOID : OptionalArgument Github.ScalarCodecs.GitObjectID
    , body : String
    , path : OptionalArgument String
    , position : OptionalArgument Int
    , inReplyTo : OptionalArgument Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddPullRequestReviewCommentInput into a value that can be used as an argument.
-}
encodeAddPullRequestReviewCommentInput : AddPullRequestReviewCommentInput -> Value
encodeAddPullRequestReviewCommentInput input____ =
    Encode.maybeObject
        [ ( "pullRequestId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.pullRequestId ), ( "pullRequestReviewId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.pullRequestReviewId ), ( "commitOID", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecGitObjectID) |> Encode.optional input____.commitOID ), ( "body", Encode.string input____.body |> Just ), ( "path", Encode.string |> Encode.optional input____.path ), ( "position", Encode.int |> Encode.optional input____.position ), ( "inReplyTo", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.inReplyTo ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddPullRequestReviewInput :
    AddPullRequestReviewInputRequiredFields
    -> (AddPullRequestReviewInputOptionalFields -> AddPullRequestReviewInputOptionalFields)
    -> AddPullRequestReviewInput
buildAddPullRequestReviewInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { commitOID = Absent, body = Absent, event = Absent, comments = Absent, threads = Absent, clientMutationId = Absent }
    in
    { pullRequestId = required____.pullRequestId, commitOID = optionals____.commitOID, body = optionals____.body, event = optionals____.event, comments = optionals____.comments, threads = optionals____.threads, clientMutationId = optionals____.clientMutationId }


type alias AddPullRequestReviewInputRequiredFields =
    { pullRequestId : Github.ScalarCodecs.Id }


type alias AddPullRequestReviewInputOptionalFields =
    { commitOID : OptionalArgument Github.ScalarCodecs.GitObjectID
    , body : OptionalArgument String
    , event : OptionalArgument Github.Enum.PullRequestReviewEvent.PullRequestReviewEvent
    , comments : OptionalArgument (List (Maybe DraftPullRequestReviewComment))
    , threads : OptionalArgument (List (Maybe DraftPullRequestReviewThread))
    , clientMutationId : OptionalArgument String
    }


{-| Type for the AddPullRequestReviewInput input object.
-}
type alias AddPullRequestReviewInput =
    { pullRequestId : Github.ScalarCodecs.Id
    , commitOID : OptionalArgument Github.ScalarCodecs.GitObjectID
    , body : OptionalArgument String
    , event : OptionalArgument Github.Enum.PullRequestReviewEvent.PullRequestReviewEvent
    , comments : OptionalArgument (List (Maybe DraftPullRequestReviewComment))
    , threads : OptionalArgument (List (Maybe DraftPullRequestReviewThread))
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddPullRequestReviewInput into a value that can be used as an argument.
-}
encodeAddPullRequestReviewInput : AddPullRequestReviewInput -> Value
encodeAddPullRequestReviewInput input____ =
    Encode.maybeObject
        [ ( "pullRequestId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.pullRequestId |> Just ), ( "commitOID", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecGitObjectID) |> Encode.optional input____.commitOID ), ( "body", Encode.string |> Encode.optional input____.body ), ( "event", Encode.enum Github.Enum.PullRequestReviewEvent.toString |> Encode.optional input____.event ), ( "comments", (encodeDraftPullRequestReviewComment |> Encode.maybe |> Encode.list) |> Encode.optional input____.comments ), ( "threads", (encodeDraftPullRequestReviewThread |> Encode.maybe |> Encode.list) |> Encode.optional input____.threads ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddPullRequestReviewThreadInput :
    AddPullRequestReviewThreadInputRequiredFields
    -> (AddPullRequestReviewThreadInputOptionalFields -> AddPullRequestReviewThreadInputOptionalFields)
    -> AddPullRequestReviewThreadInput
buildAddPullRequestReviewThreadInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { pullRequestId = Absent, pullRequestReviewId = Absent, side = Absent, startLine = Absent, startSide = Absent, clientMutationId = Absent }
    in
    { path = required____.path, body = required____.body, pullRequestId = optionals____.pullRequestId, pullRequestReviewId = optionals____.pullRequestReviewId, line = required____.line, side = optionals____.side, startLine = optionals____.startLine, startSide = optionals____.startSide, clientMutationId = optionals____.clientMutationId }


type alias AddPullRequestReviewThreadInputRequiredFields =
    { path : String
    , body : String
    , line : Int
    }


type alias AddPullRequestReviewThreadInputOptionalFields =
    { pullRequestId : OptionalArgument Github.ScalarCodecs.Id
    , pullRequestReviewId : OptionalArgument Github.ScalarCodecs.Id
    , side : OptionalArgument Github.Enum.DiffSide.DiffSide
    , startLine : OptionalArgument Int
    , startSide : OptionalArgument Github.Enum.DiffSide.DiffSide
    , clientMutationId : OptionalArgument String
    }


{-| Type for the AddPullRequestReviewThreadInput input object.
-}
type alias AddPullRequestReviewThreadInput =
    { path : String
    , body : String
    , pullRequestId : OptionalArgument Github.ScalarCodecs.Id
    , pullRequestReviewId : OptionalArgument Github.ScalarCodecs.Id
    , line : Int
    , side : OptionalArgument Github.Enum.DiffSide.DiffSide
    , startLine : OptionalArgument Int
    , startSide : OptionalArgument Github.Enum.DiffSide.DiffSide
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddPullRequestReviewThreadInput into a value that can be used as an argument.
-}
encodeAddPullRequestReviewThreadInput : AddPullRequestReviewThreadInput -> Value
encodeAddPullRequestReviewThreadInput input____ =
    Encode.maybeObject
        [ ( "path", Encode.string input____.path |> Just ), ( "body", Encode.string input____.body |> Just ), ( "pullRequestId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.pullRequestId ), ( "pullRequestReviewId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.pullRequestReviewId ), ( "line", Encode.int input____.line |> Just ), ( "side", Encode.enum Github.Enum.DiffSide.toString |> Encode.optional input____.side ), ( "startLine", Encode.int |> Encode.optional input____.startLine ), ( "startSide", Encode.enum Github.Enum.DiffSide.toString |> Encode.optional input____.startSide ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddReactionInput :
    AddReactionInputRequiredFields
    -> (AddReactionInputOptionalFields -> AddReactionInputOptionalFields)
    -> AddReactionInput
buildAddReactionInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { subjectId = required____.subjectId, content = required____.content, clientMutationId = optionals____.clientMutationId }


type alias AddReactionInputRequiredFields =
    { subjectId : Github.ScalarCodecs.Id
    , content : Github.Enum.ReactionContent.ReactionContent
    }


type alias AddReactionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddReactionInput input object.
-}
type alias AddReactionInput =
    { subjectId : Github.ScalarCodecs.Id
    , content : Github.Enum.ReactionContent.ReactionContent
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddReactionInput into a value that can be used as an argument.
-}
encodeAddReactionInput : AddReactionInput -> Value
encodeAddReactionInput input____ =
    Encode.maybeObject
        [ ( "subjectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.subjectId |> Just ), ( "content", Encode.enum Github.Enum.ReactionContent.toString input____.content |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddStarInput :
    AddStarInputRequiredFields
    -> (AddStarInputOptionalFields -> AddStarInputOptionalFields)
    -> AddStarInput
buildAddStarInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { starrableId = required____.starrableId, clientMutationId = optionals____.clientMutationId }


type alias AddStarInputRequiredFields =
    { starrableId : Github.ScalarCodecs.Id }


type alias AddStarInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddStarInput input object.
-}
type alias AddStarInput =
    { starrableId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddStarInput into a value that can be used as an argument.
-}
encodeAddStarInput : AddStarInput -> Value
encodeAddStarInput input____ =
    Encode.maybeObject
        [ ( "starrableId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.starrableId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddUpvoteInput :
    AddUpvoteInputRequiredFields
    -> (AddUpvoteInputOptionalFields -> AddUpvoteInputOptionalFields)
    -> AddUpvoteInput
buildAddUpvoteInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { subjectId = required____.subjectId, clientMutationId = optionals____.clientMutationId }


type alias AddUpvoteInputRequiredFields =
    { subjectId : Github.ScalarCodecs.Id }


type alias AddUpvoteInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddUpvoteInput input object.
-}
type alias AddUpvoteInput =
    { subjectId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddUpvoteInput into a value that can be used as an argument.
-}
encodeAddUpvoteInput : AddUpvoteInput -> Value
encodeAddUpvoteInput input____ =
    Encode.maybeObject
        [ ( "subjectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.subjectId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAddVerifiableDomainInput :
    AddVerifiableDomainInputRequiredFields
    -> (AddVerifiableDomainInputOptionalFields -> AddVerifiableDomainInputOptionalFields)
    -> AddVerifiableDomainInput
buildAddVerifiableDomainInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { ownerId = required____.ownerId, domain = required____.domain, clientMutationId = optionals____.clientMutationId }


type alias AddVerifiableDomainInputRequiredFields =
    { ownerId : Github.ScalarCodecs.Id
    , domain : Github.ScalarCodecs.Uri
    }


type alias AddVerifiableDomainInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the AddVerifiableDomainInput input object.
-}
type alias AddVerifiableDomainInput =
    { ownerId : Github.ScalarCodecs.Id
    , domain : Github.ScalarCodecs.Uri
    , clientMutationId : OptionalArgument String
    }


{-| Encode a AddVerifiableDomainInput into a value that can be used as an argument.
-}
encodeAddVerifiableDomainInput : AddVerifiableDomainInput -> Value
encodeAddVerifiableDomainInput input____ =
    Encode.maybeObject
        [ ( "ownerId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.ownerId |> Just ), ( "domain", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecUri) input____.domain |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildApproveDeploymentsInput :
    ApproveDeploymentsInputRequiredFields
    -> (ApproveDeploymentsInputOptionalFields -> ApproveDeploymentsInputOptionalFields)
    -> ApproveDeploymentsInput
buildApproveDeploymentsInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { comment = Absent, clientMutationId = Absent }
    in
    { workflowRunId = required____.workflowRunId, environmentIds = required____.environmentIds, comment = optionals____.comment, clientMutationId = optionals____.clientMutationId }


type alias ApproveDeploymentsInputRequiredFields =
    { workflowRunId : Github.ScalarCodecs.Id
    , environmentIds : List Github.ScalarCodecs.Id
    }


type alias ApproveDeploymentsInputOptionalFields =
    { comment : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the ApproveDeploymentsInput input object.
-}
type alias ApproveDeploymentsInput =
    { workflowRunId : Github.ScalarCodecs.Id
    , environmentIds : List Github.ScalarCodecs.Id
    , comment : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a ApproveDeploymentsInput into a value that can be used as an argument.
-}
encodeApproveDeploymentsInput : ApproveDeploymentsInput -> Value
encodeApproveDeploymentsInput input____ =
    Encode.maybeObject
        [ ( "workflowRunId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.workflowRunId |> Just ), ( "environmentIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) input____.environmentIds |> Just ), ( "comment", Encode.string |> Encode.optional input____.comment ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildApproveVerifiableDomainInput :
    ApproveVerifiableDomainInputRequiredFields
    -> (ApproveVerifiableDomainInputOptionalFields -> ApproveVerifiableDomainInputOptionalFields)
    -> ApproveVerifiableDomainInput
buildApproveVerifiableDomainInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { id = required____.id, clientMutationId = optionals____.clientMutationId }


type alias ApproveVerifiableDomainInputRequiredFields =
    { id : Github.ScalarCodecs.Id }


type alias ApproveVerifiableDomainInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the ApproveVerifiableDomainInput input object.
-}
type alias ApproveVerifiableDomainInput =
    { id : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a ApproveVerifiableDomainInput into a value that can be used as an argument.
-}
encodeApproveVerifiableDomainInput : ApproveVerifiableDomainInput -> Value
encodeApproveVerifiableDomainInput input____ =
    Encode.maybeObject
        [ ( "id", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildArchiveRepositoryInput :
    ArchiveRepositoryInputRequiredFields
    -> (ArchiveRepositoryInputOptionalFields -> ArchiveRepositoryInputOptionalFields)
    -> ArchiveRepositoryInput
buildArchiveRepositoryInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { repositoryId = required____.repositoryId, clientMutationId = optionals____.clientMutationId }


type alias ArchiveRepositoryInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id }


type alias ArchiveRepositoryInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the ArchiveRepositoryInput input object.
-}
type alias ArchiveRepositoryInput =
    { repositoryId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a ArchiveRepositoryInput into a value that can be used as an argument.
-}
encodeArchiveRepositoryInput : ArchiveRepositoryInput -> Value
encodeArchiveRepositoryInput input____ =
    Encode.maybeObject
        [ ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildAuditLogOrder :
    (AuditLogOrderOptionalFields -> AuditLogOrderOptionalFields)
    -> AuditLogOrder
buildAuditLogOrder fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { field = Absent, direction = Absent }
    in
    { field = optionals____.field, direction = optionals____.direction }


type alias AuditLogOrderOptionalFields =
    { field : OptionalArgument Github.Enum.AuditLogOrderField.AuditLogOrderField
    , direction : OptionalArgument Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the AuditLogOrder input object.
-}
type alias AuditLogOrder =
    { field : OptionalArgument Github.Enum.AuditLogOrderField.AuditLogOrderField
    , direction : OptionalArgument Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a AuditLogOrder into a value that can be used as an argument.
-}
encodeAuditLogOrder : AuditLogOrder -> Value
encodeAuditLogOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.AuditLogOrderField.toString |> Encode.optional input____.field ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString |> Encode.optional input____.direction ) ]


buildCancelEnterpriseAdminInvitationInput :
    CancelEnterpriseAdminInvitationInputRequiredFields
    -> (CancelEnterpriseAdminInvitationInputOptionalFields -> CancelEnterpriseAdminInvitationInputOptionalFields)
    -> CancelEnterpriseAdminInvitationInput
buildCancelEnterpriseAdminInvitationInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { invitationId = required____.invitationId, clientMutationId = optionals____.clientMutationId }


type alias CancelEnterpriseAdminInvitationInputRequiredFields =
    { invitationId : Github.ScalarCodecs.Id }


type alias CancelEnterpriseAdminInvitationInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the CancelEnterpriseAdminInvitationInput input object.
-}
type alias CancelEnterpriseAdminInvitationInput =
    { invitationId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CancelEnterpriseAdminInvitationInput into a value that can be used as an argument.
-}
encodeCancelEnterpriseAdminInvitationInput : CancelEnterpriseAdminInvitationInput -> Value
encodeCancelEnterpriseAdminInvitationInput input____ =
    Encode.maybeObject
        [ ( "invitationId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.invitationId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCancelSponsorshipInput :
    (CancelSponsorshipInputOptionalFields -> CancelSponsorshipInputOptionalFields)
    -> CancelSponsorshipInput
buildCancelSponsorshipInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { sponsorId = Absent, sponsorLogin = Absent, sponsorableId = Absent, sponsorableLogin = Absent, clientMutationId = Absent }
    in
    { sponsorId = optionals____.sponsorId, sponsorLogin = optionals____.sponsorLogin, sponsorableId = optionals____.sponsorableId, sponsorableLogin = optionals____.sponsorableLogin, clientMutationId = optionals____.clientMutationId }


type alias CancelSponsorshipInputOptionalFields =
    { sponsorId : OptionalArgument Github.ScalarCodecs.Id
    , sponsorLogin : OptionalArgument String
    , sponsorableId : OptionalArgument Github.ScalarCodecs.Id
    , sponsorableLogin : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CancelSponsorshipInput input object.
-}
type alias CancelSponsorshipInput =
    { sponsorId : OptionalArgument Github.ScalarCodecs.Id
    , sponsorLogin : OptionalArgument String
    , sponsorableId : OptionalArgument Github.ScalarCodecs.Id
    , sponsorableLogin : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CancelSponsorshipInput into a value that can be used as an argument.
-}
encodeCancelSponsorshipInput : CancelSponsorshipInput -> Value
encodeCancelSponsorshipInput input____ =
    Encode.maybeObject
        [ ( "sponsorId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.sponsorId ), ( "sponsorLogin", Encode.string |> Encode.optional input____.sponsorLogin ), ( "sponsorableId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.sponsorableId ), ( "sponsorableLogin", Encode.string |> Encode.optional input____.sponsorableLogin ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildChangeUserStatusInput :
    (ChangeUserStatusInputOptionalFields -> ChangeUserStatusInputOptionalFields)
    -> ChangeUserStatusInput
buildChangeUserStatusInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { emoji = Absent, message = Absent, organizationId = Absent, limitedAvailability = Absent, expiresAt = Absent, clientMutationId = Absent }
    in
    { emoji = optionals____.emoji, message = optionals____.message, organizationId = optionals____.organizationId, limitedAvailability = optionals____.limitedAvailability, expiresAt = optionals____.expiresAt, clientMutationId = optionals____.clientMutationId }


type alias ChangeUserStatusInputOptionalFields =
    { emoji : OptionalArgument String
    , message : OptionalArgument String
    , organizationId : OptionalArgument Github.ScalarCodecs.Id
    , limitedAvailability : OptionalArgument Bool
    , expiresAt : OptionalArgument Github.ScalarCodecs.DateTime
    , clientMutationId : OptionalArgument String
    }


{-| Type for the ChangeUserStatusInput input object.
-}
type alias ChangeUserStatusInput =
    { emoji : OptionalArgument String
    , message : OptionalArgument String
    , organizationId : OptionalArgument Github.ScalarCodecs.Id
    , limitedAvailability : OptionalArgument Bool
    , expiresAt : OptionalArgument Github.ScalarCodecs.DateTime
    , clientMutationId : OptionalArgument String
    }


{-| Encode a ChangeUserStatusInput into a value that can be used as an argument.
-}
encodeChangeUserStatusInput : ChangeUserStatusInput -> Value
encodeChangeUserStatusInput input____ =
    Encode.maybeObject
        [ ( "emoji", Encode.string |> Encode.optional input____.emoji ), ( "message", Encode.string |> Encode.optional input____.message ), ( "organizationId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.organizationId ), ( "limitedAvailability", Encode.bool |> Encode.optional input____.limitedAvailability ), ( "expiresAt", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.expiresAt ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCheckAnnotationData :
    CheckAnnotationDataRequiredFields
    -> (CheckAnnotationDataOptionalFields -> CheckAnnotationDataOptionalFields)
    -> CheckAnnotationData
buildCheckAnnotationData required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { title = Absent, rawDetails = Absent }
    in
    { path = required____.path, location = required____.location, annotationLevel = required____.annotationLevel, message = required____.message, title = optionals____.title, rawDetails = optionals____.rawDetails }


type alias CheckAnnotationDataRequiredFields =
    { path : String
    , location : CheckAnnotationRange
    , annotationLevel : Github.Enum.CheckAnnotationLevel.CheckAnnotationLevel
    , message : String
    }


type alias CheckAnnotationDataOptionalFields =
    { title : OptionalArgument String
    , rawDetails : OptionalArgument String
    }


{-| Type for the CheckAnnotationData input object.
-}
type alias CheckAnnotationData =
    { path : String
    , location : CheckAnnotationRange
    , annotationLevel : Github.Enum.CheckAnnotationLevel.CheckAnnotationLevel
    , message : String
    , title : OptionalArgument String
    , rawDetails : OptionalArgument String
    }


{-| Encode a CheckAnnotationData into a value that can be used as an argument.
-}
encodeCheckAnnotationData : CheckAnnotationData -> Value
encodeCheckAnnotationData input____ =
    Encode.maybeObject
        [ ( "path", Encode.string input____.path |> Just ), ( "location", encodeCheckAnnotationRange input____.location |> Just ), ( "annotationLevel", Encode.enum Github.Enum.CheckAnnotationLevel.toString input____.annotationLevel |> Just ), ( "message", Encode.string input____.message |> Just ), ( "title", Encode.string |> Encode.optional input____.title ), ( "rawDetails", Encode.string |> Encode.optional input____.rawDetails ) ]


buildCheckAnnotationRange :
    CheckAnnotationRangeRequiredFields
    -> (CheckAnnotationRangeOptionalFields -> CheckAnnotationRangeOptionalFields)
    -> CheckAnnotationRange
buildCheckAnnotationRange required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { startColumn = Absent, endColumn = Absent }
    in
    { startLine = required____.startLine, startColumn = optionals____.startColumn, endLine = required____.endLine, endColumn = optionals____.endColumn }


type alias CheckAnnotationRangeRequiredFields =
    { startLine : Int
    , endLine : Int
    }


type alias CheckAnnotationRangeOptionalFields =
    { startColumn : OptionalArgument Int
    , endColumn : OptionalArgument Int
    }


{-| Type for the CheckAnnotationRange input object.
-}
type alias CheckAnnotationRange =
    { startLine : Int
    , startColumn : OptionalArgument Int
    , endLine : Int
    , endColumn : OptionalArgument Int
    }


{-| Encode a CheckAnnotationRange into a value that can be used as an argument.
-}
encodeCheckAnnotationRange : CheckAnnotationRange -> Value
encodeCheckAnnotationRange input____ =
    Encode.maybeObject
        [ ( "startLine", Encode.int input____.startLine |> Just ), ( "startColumn", Encode.int |> Encode.optional input____.startColumn ), ( "endLine", Encode.int input____.endLine |> Just ), ( "endColumn", Encode.int |> Encode.optional input____.endColumn ) ]


buildCheckRunAction :
    CheckRunActionRequiredFields
    -> CheckRunAction
buildCheckRunAction required____ =
    { label = required____.label, description = required____.description, identifier = required____.identifier }


type alias CheckRunActionRequiredFields =
    { label : String
    , description : String
    , identifier : String
    }


{-| Type for the CheckRunAction input object.
-}
type alias CheckRunAction =
    { label : String
    , description : String
    , identifier : String
    }


{-| Encode a CheckRunAction into a value that can be used as an argument.
-}
encodeCheckRunAction : CheckRunAction -> Value
encodeCheckRunAction input____ =
    Encode.maybeObject
        [ ( "label", Encode.string input____.label |> Just ), ( "description", Encode.string input____.description |> Just ), ( "identifier", Encode.string input____.identifier |> Just ) ]


buildCheckRunFilter :
    (CheckRunFilterOptionalFields -> CheckRunFilterOptionalFields)
    -> CheckRunFilter
buildCheckRunFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { checkType = Absent, appId = Absent, checkName = Absent, status = Absent, statuses = Absent, conclusions = Absent }
    in
    { checkType = optionals____.checkType, appId = optionals____.appId, checkName = optionals____.checkName, status = optionals____.status, statuses = optionals____.statuses, conclusions = optionals____.conclusions }


type alias CheckRunFilterOptionalFields =
    { checkType : OptionalArgument Github.Enum.CheckRunType.CheckRunType
    , appId : OptionalArgument Int
    , checkName : OptionalArgument String
    , status : OptionalArgument Github.Enum.CheckStatusState.CheckStatusState
    , statuses : OptionalArgument (List Github.Enum.CheckStatusState.CheckStatusState)
    , conclusions : OptionalArgument (List Github.Enum.CheckConclusionState.CheckConclusionState)
    }


{-| Type for the CheckRunFilter input object.
-}
type alias CheckRunFilter =
    { checkType : OptionalArgument Github.Enum.CheckRunType.CheckRunType
    , appId : OptionalArgument Int
    , checkName : OptionalArgument String
    , status : OptionalArgument Github.Enum.CheckStatusState.CheckStatusState
    , statuses : OptionalArgument (List Github.Enum.CheckStatusState.CheckStatusState)
    , conclusions : OptionalArgument (List Github.Enum.CheckConclusionState.CheckConclusionState)
    }


{-| Encode a CheckRunFilter into a value that can be used as an argument.
-}
encodeCheckRunFilter : CheckRunFilter -> Value
encodeCheckRunFilter input____ =
    Encode.maybeObject
        [ ( "checkType", Encode.enum Github.Enum.CheckRunType.toString |> Encode.optional input____.checkType ), ( "appId", Encode.int |> Encode.optional input____.appId ), ( "checkName", Encode.string |> Encode.optional input____.checkName ), ( "status", Encode.enum Github.Enum.CheckStatusState.toString |> Encode.optional input____.status ), ( "statuses", (Encode.enum Github.Enum.CheckStatusState.toString |> Encode.list) |> Encode.optional input____.statuses ), ( "conclusions", (Encode.enum Github.Enum.CheckConclusionState.toString |> Encode.list) |> Encode.optional input____.conclusions ) ]


buildCheckRunOutput :
    CheckRunOutputRequiredFields
    -> (CheckRunOutputOptionalFields -> CheckRunOutputOptionalFields)
    -> CheckRunOutput
buildCheckRunOutput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { text = Absent, annotations = Absent, images = Absent }
    in
    { title = required____.title, summary = required____.summary, text = optionals____.text, annotations = optionals____.annotations, images = optionals____.images }


type alias CheckRunOutputRequiredFields =
    { title : String
    , summary : String
    }


type alias CheckRunOutputOptionalFields =
    { text : OptionalArgument String
    , annotations : OptionalArgument (List CheckAnnotationData)
    , images : OptionalArgument (List CheckRunOutputImage)
    }


{-| Type for the CheckRunOutput input object.
-}
type alias CheckRunOutput =
    { title : String
    , summary : String
    , text : OptionalArgument String
    , annotations : OptionalArgument (List CheckAnnotationData)
    , images : OptionalArgument (List CheckRunOutputImage)
    }


{-| Encode a CheckRunOutput into a value that can be used as an argument.
-}
encodeCheckRunOutput : CheckRunOutput -> Value
encodeCheckRunOutput input____ =
    Encode.maybeObject
        [ ( "title", Encode.string input____.title |> Just ), ( "summary", Encode.string input____.summary |> Just ), ( "text", Encode.string |> Encode.optional input____.text ), ( "annotations", (encodeCheckAnnotationData |> Encode.list) |> Encode.optional input____.annotations ), ( "images", (encodeCheckRunOutputImage |> Encode.list) |> Encode.optional input____.images ) ]


buildCheckRunOutputImage :
    CheckRunOutputImageRequiredFields
    -> (CheckRunOutputImageOptionalFields -> CheckRunOutputImageOptionalFields)
    -> CheckRunOutputImage
buildCheckRunOutputImage required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { caption = Absent }
    in
    { alt = required____.alt, imageUrl = required____.imageUrl, caption = optionals____.caption }


type alias CheckRunOutputImageRequiredFields =
    { alt : String
    , imageUrl : Github.ScalarCodecs.Uri
    }


type alias CheckRunOutputImageOptionalFields =
    { caption : OptionalArgument String }


{-| Type for the CheckRunOutputImage input object.
-}
type alias CheckRunOutputImage =
    { alt : String
    , imageUrl : Github.ScalarCodecs.Uri
    , caption : OptionalArgument String
    }


{-| Encode a CheckRunOutputImage into a value that can be used as an argument.
-}
encodeCheckRunOutputImage : CheckRunOutputImage -> Value
encodeCheckRunOutputImage input____ =
    Encode.maybeObject
        [ ( "alt", Encode.string input____.alt |> Just ), ( "imageUrl", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecUri) input____.imageUrl |> Just ), ( "caption", Encode.string |> Encode.optional input____.caption ) ]


buildCheckSuiteAutoTriggerPreference :
    CheckSuiteAutoTriggerPreferenceRequiredFields
    -> CheckSuiteAutoTriggerPreference
buildCheckSuiteAutoTriggerPreference required____ =
    { appId = required____.appId, setting = required____.setting }


type alias CheckSuiteAutoTriggerPreferenceRequiredFields =
    { appId : Github.ScalarCodecs.Id
    , setting : Bool
    }


{-| Type for the CheckSuiteAutoTriggerPreference input object.
-}
type alias CheckSuiteAutoTriggerPreference =
    { appId : Github.ScalarCodecs.Id
    , setting : Bool
    }


{-| Encode a CheckSuiteAutoTriggerPreference into a value that can be used as an argument.
-}
encodeCheckSuiteAutoTriggerPreference : CheckSuiteAutoTriggerPreference -> Value
encodeCheckSuiteAutoTriggerPreference input____ =
    Encode.maybeObject
        [ ( "appId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.appId |> Just ), ( "setting", Encode.bool input____.setting |> Just ) ]


buildCheckSuiteFilter :
    (CheckSuiteFilterOptionalFields -> CheckSuiteFilterOptionalFields)
    -> CheckSuiteFilter
buildCheckSuiteFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { appId = Absent, checkName = Absent }
    in
    { appId = optionals____.appId, checkName = optionals____.checkName }


type alias CheckSuiteFilterOptionalFields =
    { appId : OptionalArgument Int
    , checkName : OptionalArgument String
    }


{-| Type for the CheckSuiteFilter input object.
-}
type alias CheckSuiteFilter =
    { appId : OptionalArgument Int
    , checkName : OptionalArgument String
    }


{-| Encode a CheckSuiteFilter into a value that can be used as an argument.
-}
encodeCheckSuiteFilter : CheckSuiteFilter -> Value
encodeCheckSuiteFilter input____ =
    Encode.maybeObject
        [ ( "appId", Encode.int |> Encode.optional input____.appId ), ( "checkName", Encode.string |> Encode.optional input____.checkName ) ]


buildClearLabelsFromLabelableInput :
    ClearLabelsFromLabelableInputRequiredFields
    -> (ClearLabelsFromLabelableInputOptionalFields -> ClearLabelsFromLabelableInputOptionalFields)
    -> ClearLabelsFromLabelableInput
buildClearLabelsFromLabelableInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { labelableId = required____.labelableId, clientMutationId = optionals____.clientMutationId }


type alias ClearLabelsFromLabelableInputRequiredFields =
    { labelableId : Github.ScalarCodecs.Id }


type alias ClearLabelsFromLabelableInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the ClearLabelsFromLabelableInput input object.
-}
type alias ClearLabelsFromLabelableInput =
    { labelableId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a ClearLabelsFromLabelableInput into a value that can be used as an argument.
-}
encodeClearLabelsFromLabelableInput : ClearLabelsFromLabelableInput -> Value
encodeClearLabelsFromLabelableInput input____ =
    Encode.maybeObject
        [ ( "labelableId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.labelableId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildClearProjectV2ItemFieldValueInput :
    ClearProjectV2ItemFieldValueInputRequiredFields
    -> (ClearProjectV2ItemFieldValueInputOptionalFields -> ClearProjectV2ItemFieldValueInputOptionalFields)
    -> ClearProjectV2ItemFieldValueInput
buildClearProjectV2ItemFieldValueInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { projectId = required____.projectId, itemId = required____.itemId, fieldId = required____.fieldId, clientMutationId = optionals____.clientMutationId }


type alias ClearProjectV2ItemFieldValueInputRequiredFields =
    { projectId : Github.ScalarCodecs.Id
    , itemId : Github.ScalarCodecs.Id
    , fieldId : Github.ScalarCodecs.Id
    }


type alias ClearProjectV2ItemFieldValueInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the ClearProjectV2ItemFieldValueInput input object.
-}
type alias ClearProjectV2ItemFieldValueInput =
    { projectId : Github.ScalarCodecs.Id
    , itemId : Github.ScalarCodecs.Id
    , fieldId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a ClearProjectV2ItemFieldValueInput into a value that can be used as an argument.
-}
encodeClearProjectV2ItemFieldValueInput : ClearProjectV2ItemFieldValueInput -> Value
encodeClearProjectV2ItemFieldValueInput input____ =
    Encode.maybeObject
        [ ( "projectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.projectId |> Just ), ( "itemId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.itemId |> Just ), ( "fieldId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.fieldId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCloneProjectInput :
    CloneProjectInputRequiredFields
    -> (CloneProjectInputOptionalFields -> CloneProjectInputOptionalFields)
    -> CloneProjectInput
buildCloneProjectInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { body = Absent, public = Absent, clientMutationId = Absent }
    in
    { targetOwnerId = required____.targetOwnerId, sourceId = required____.sourceId, includeWorkflows = required____.includeWorkflows, name = required____.name, body = optionals____.body, public = optionals____.public, clientMutationId = optionals____.clientMutationId }


type alias CloneProjectInputRequiredFields =
    { targetOwnerId : Github.ScalarCodecs.Id
    , sourceId : Github.ScalarCodecs.Id
    , includeWorkflows : Bool
    , name : String
    }


type alias CloneProjectInputOptionalFields =
    { body : OptionalArgument String
    , public : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CloneProjectInput input object.
-}
type alias CloneProjectInput =
    { targetOwnerId : Github.ScalarCodecs.Id
    , sourceId : Github.ScalarCodecs.Id
    , includeWorkflows : Bool
    , name : String
    , body : OptionalArgument String
    , public : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CloneProjectInput into a value that can be used as an argument.
-}
encodeCloneProjectInput : CloneProjectInput -> Value
encodeCloneProjectInput input____ =
    Encode.maybeObject
        [ ( "targetOwnerId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.targetOwnerId |> Just ), ( "sourceId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.sourceId |> Just ), ( "includeWorkflows", Encode.bool input____.includeWorkflows |> Just ), ( "name", Encode.string input____.name |> Just ), ( "body", Encode.string |> Encode.optional input____.body ), ( "public", Encode.bool |> Encode.optional input____.public ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCloneTemplateRepositoryInput :
    CloneTemplateRepositoryInputRequiredFields
    -> (CloneTemplateRepositoryInputOptionalFields -> CloneTemplateRepositoryInputOptionalFields)
    -> CloneTemplateRepositoryInput
buildCloneTemplateRepositoryInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { description = Absent, includeAllBranches = Absent, clientMutationId = Absent }
    in
    { repositoryId = required____.repositoryId, name = required____.name, ownerId = required____.ownerId, description = optionals____.description, visibility = required____.visibility, includeAllBranches = optionals____.includeAllBranches, clientMutationId = optionals____.clientMutationId }


type alias CloneTemplateRepositoryInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id
    , name : String
    , ownerId : Github.ScalarCodecs.Id
    , visibility : Github.Enum.RepositoryVisibility.RepositoryVisibility
    }


type alias CloneTemplateRepositoryInputOptionalFields =
    { description : OptionalArgument String
    , includeAllBranches : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CloneTemplateRepositoryInput input object.
-}
type alias CloneTemplateRepositoryInput =
    { repositoryId : Github.ScalarCodecs.Id
    , name : String
    , ownerId : Github.ScalarCodecs.Id
    , description : OptionalArgument String
    , visibility : Github.Enum.RepositoryVisibility.RepositoryVisibility
    , includeAllBranches : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CloneTemplateRepositoryInput into a value that can be used as an argument.
-}
encodeCloneTemplateRepositoryInput : CloneTemplateRepositoryInput -> Value
encodeCloneTemplateRepositoryInput input____ =
    Encode.maybeObject
        [ ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "name", Encode.string input____.name |> Just ), ( "ownerId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.ownerId |> Just ), ( "description", Encode.string |> Encode.optional input____.description ), ( "visibility", Encode.enum Github.Enum.RepositoryVisibility.toString input____.visibility |> Just ), ( "includeAllBranches", Encode.bool |> Encode.optional input____.includeAllBranches ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCloseIssueInput :
    CloseIssueInputRequiredFields
    -> (CloseIssueInputOptionalFields -> CloseIssueInputOptionalFields)
    -> CloseIssueInput
buildCloseIssueInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { stateReason = Absent, clientMutationId = Absent }
    in
    { issueId = required____.issueId, stateReason = optionals____.stateReason, clientMutationId = optionals____.clientMutationId }


type alias CloseIssueInputRequiredFields =
    { issueId : Github.ScalarCodecs.Id }


type alias CloseIssueInputOptionalFields =
    { stateReason : OptionalArgument Github.Enum.IssueClosedStateReason.IssueClosedStateReason
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CloseIssueInput input object.
-}
type alias CloseIssueInput =
    { issueId : Github.ScalarCodecs.Id
    , stateReason : OptionalArgument Github.Enum.IssueClosedStateReason.IssueClosedStateReason
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CloseIssueInput into a value that can be used as an argument.
-}
encodeCloseIssueInput : CloseIssueInput -> Value
encodeCloseIssueInput input____ =
    Encode.maybeObject
        [ ( "issueId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.issueId |> Just ), ( "stateReason", Encode.enum Github.Enum.IssueClosedStateReason.toString |> Encode.optional input____.stateReason ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildClosePullRequestInput :
    ClosePullRequestInputRequiredFields
    -> (ClosePullRequestInputOptionalFields -> ClosePullRequestInputOptionalFields)
    -> ClosePullRequestInput
buildClosePullRequestInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { pullRequestId = required____.pullRequestId, clientMutationId = optionals____.clientMutationId }


type alias ClosePullRequestInputRequiredFields =
    { pullRequestId : Github.ScalarCodecs.Id }


type alias ClosePullRequestInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the ClosePullRequestInput input object.
-}
type alias ClosePullRequestInput =
    { pullRequestId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a ClosePullRequestInput into a value that can be used as an argument.
-}
encodeClosePullRequestInput : ClosePullRequestInput -> Value
encodeClosePullRequestInput input____ =
    Encode.maybeObject
        [ ( "pullRequestId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.pullRequestId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCommitAuthor :
    (CommitAuthorOptionalFields -> CommitAuthorOptionalFields)
    -> CommitAuthor
buildCommitAuthor fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, emails = Absent }
    in
    { id = optionals____.id, emails = optionals____.emails }


type alias CommitAuthorOptionalFields =
    { id : OptionalArgument Github.ScalarCodecs.Id
    , emails : OptionalArgument (List String)
    }


{-| Type for the CommitAuthor input object.
-}
type alias CommitAuthor =
    { id : OptionalArgument Github.ScalarCodecs.Id
    , emails : OptionalArgument (List String)
    }


{-| Encode a CommitAuthor into a value that can be used as an argument.
-}
encodeCommitAuthor : CommitAuthor -> Value
encodeCommitAuthor input____ =
    Encode.maybeObject
        [ ( "id", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.id ), ( "emails", (Encode.string |> Encode.list) |> Encode.optional input____.emails ) ]


buildCommitContributionOrder :
    CommitContributionOrderRequiredFields
    -> CommitContributionOrder
buildCommitContributionOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias CommitContributionOrderRequiredFields =
    { field : Github.Enum.CommitContributionOrderField.CommitContributionOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the CommitContributionOrder input object.
-}
type alias CommitContributionOrder =
    { field : Github.Enum.CommitContributionOrderField.CommitContributionOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a CommitContributionOrder into a value that can be used as an argument.
-}
encodeCommitContributionOrder : CommitContributionOrder -> Value
encodeCommitContributionOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.CommitContributionOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildCommitMessage :
    CommitMessageRequiredFields
    -> (CommitMessageOptionalFields -> CommitMessageOptionalFields)
    -> CommitMessage
buildCommitMessage required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { body = Absent }
    in
    { headline = required____.headline, body = optionals____.body }


type alias CommitMessageRequiredFields =
    { headline : String }


type alias CommitMessageOptionalFields =
    { body : OptionalArgument String }


{-| Type for the CommitMessage input object.
-}
type alias CommitMessage =
    { headline : String
    , body : OptionalArgument String
    }


{-| Encode a CommitMessage into a value that can be used as an argument.
-}
encodeCommitMessage : CommitMessage -> Value
encodeCommitMessage input____ =
    Encode.maybeObject
        [ ( "headline", Encode.string input____.headline |> Just ), ( "body", Encode.string |> Encode.optional input____.body ) ]


buildCommittableBranch :
    (CommittableBranchOptionalFields -> CommittableBranchOptionalFields)
    -> CommittableBranch
buildCommittableBranch fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, repositoryNameWithOwner = Absent, branchName = Absent }
    in
    { id = optionals____.id, repositoryNameWithOwner = optionals____.repositoryNameWithOwner, branchName = optionals____.branchName }


type alias CommittableBranchOptionalFields =
    { id : OptionalArgument Github.ScalarCodecs.Id
    , repositoryNameWithOwner : OptionalArgument String
    , branchName : OptionalArgument String
    }


{-| Type for the CommittableBranch input object.
-}
type alias CommittableBranch =
    { id : OptionalArgument Github.ScalarCodecs.Id
    , repositoryNameWithOwner : OptionalArgument String
    , branchName : OptionalArgument String
    }


{-| Encode a CommittableBranch into a value that can be used as an argument.
-}
encodeCommittableBranch : CommittableBranch -> Value
encodeCommittableBranch input____ =
    Encode.maybeObject
        [ ( "id", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.id ), ( "repositoryNameWithOwner", Encode.string |> Encode.optional input____.repositoryNameWithOwner ), ( "branchName", Encode.string |> Encode.optional input____.branchName ) ]


buildContributionOrder :
    ContributionOrderRequiredFields
    -> ContributionOrder
buildContributionOrder required____ =
    { direction = required____.direction }


type alias ContributionOrderRequiredFields =
    { direction : Github.Enum.OrderDirection.OrderDirection }


{-| Type for the ContributionOrder input object.
-}
type alias ContributionOrder =
    { direction : Github.Enum.OrderDirection.OrderDirection }


{-| Encode a ContributionOrder into a value that can be used as an argument.
-}
encodeContributionOrder : ContributionOrder -> Value
encodeContributionOrder input____ =
    Encode.maybeObject
        [ ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildConvertProjectCardNoteToIssueInput :
    ConvertProjectCardNoteToIssueInputRequiredFields
    -> (ConvertProjectCardNoteToIssueInputOptionalFields -> ConvertProjectCardNoteToIssueInputOptionalFields)
    -> ConvertProjectCardNoteToIssueInput
buildConvertProjectCardNoteToIssueInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { title = Absent, body = Absent, clientMutationId = Absent }
    in
    { projectCardId = required____.projectCardId, repositoryId = required____.repositoryId, title = optionals____.title, body = optionals____.body, clientMutationId = optionals____.clientMutationId }


type alias ConvertProjectCardNoteToIssueInputRequiredFields =
    { projectCardId : Github.ScalarCodecs.Id
    , repositoryId : Github.ScalarCodecs.Id
    }


type alias ConvertProjectCardNoteToIssueInputOptionalFields =
    { title : OptionalArgument String
    , body : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the ConvertProjectCardNoteToIssueInput input object.
-}
type alias ConvertProjectCardNoteToIssueInput =
    { projectCardId : Github.ScalarCodecs.Id
    , repositoryId : Github.ScalarCodecs.Id
    , title : OptionalArgument String
    , body : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a ConvertProjectCardNoteToIssueInput into a value that can be used as an argument.
-}
encodeConvertProjectCardNoteToIssueInput : ConvertProjectCardNoteToIssueInput -> Value
encodeConvertProjectCardNoteToIssueInput input____ =
    Encode.maybeObject
        [ ( "projectCardId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.projectCardId |> Just ), ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "title", Encode.string |> Encode.optional input____.title ), ( "body", Encode.string |> Encode.optional input____.body ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildConvertPullRequestToDraftInput :
    ConvertPullRequestToDraftInputRequiredFields
    -> (ConvertPullRequestToDraftInputOptionalFields -> ConvertPullRequestToDraftInputOptionalFields)
    -> ConvertPullRequestToDraftInput
buildConvertPullRequestToDraftInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { pullRequestId = required____.pullRequestId, clientMutationId = optionals____.clientMutationId }


type alias ConvertPullRequestToDraftInputRequiredFields =
    { pullRequestId : Github.ScalarCodecs.Id }


type alias ConvertPullRequestToDraftInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the ConvertPullRequestToDraftInput input object.
-}
type alias ConvertPullRequestToDraftInput =
    { pullRequestId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a ConvertPullRequestToDraftInput into a value that can be used as an argument.
-}
encodeConvertPullRequestToDraftInput : ConvertPullRequestToDraftInput -> Value
encodeConvertPullRequestToDraftInput input____ =
    Encode.maybeObject
        [ ( "pullRequestId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.pullRequestId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCreateBranchProtectionRuleInput :
    CreateBranchProtectionRuleInputRequiredFields
    -> (CreateBranchProtectionRuleInputOptionalFields -> CreateBranchProtectionRuleInputOptionalFields)
    -> CreateBranchProtectionRuleInput
buildCreateBranchProtectionRuleInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { requiresApprovingReviews = Absent, requiredApprovingReviewCount = Absent, requiresCommitSignatures = Absent, requiresLinearHistory = Absent, blocksCreations = Absent, allowsForcePushes = Absent, allowsDeletions = Absent, isAdminEnforced = Absent, requiresStatusChecks = Absent, requiresStrictStatusChecks = Absent, requiresCodeOwnerReviews = Absent, dismissesStaleReviews = Absent, restrictsReviewDismissals = Absent, reviewDismissalActorIds = Absent, bypassPullRequestActorIds = Absent, bypassForcePushActorIds = Absent, restrictsPushes = Absent, pushActorIds = Absent, requiredStatusCheckContexts = Absent, requiredStatusChecks = Absent, requiresConversationResolution = Absent, requireLastPushApproval = Absent, lockBranch = Absent, lockAllowsFetchAndMerge = Absent, clientMutationId = Absent }
    in
    { repositoryId = required____.repositoryId, pattern = required____.pattern, requiresApprovingReviews = optionals____.requiresApprovingReviews, requiredApprovingReviewCount = optionals____.requiredApprovingReviewCount, requiresCommitSignatures = optionals____.requiresCommitSignatures, requiresLinearHistory = optionals____.requiresLinearHistory, blocksCreations = optionals____.blocksCreations, allowsForcePushes = optionals____.allowsForcePushes, allowsDeletions = optionals____.allowsDeletions, isAdminEnforced = optionals____.isAdminEnforced, requiresStatusChecks = optionals____.requiresStatusChecks, requiresStrictStatusChecks = optionals____.requiresStrictStatusChecks, requiresCodeOwnerReviews = optionals____.requiresCodeOwnerReviews, dismissesStaleReviews = optionals____.dismissesStaleReviews, restrictsReviewDismissals = optionals____.restrictsReviewDismissals, reviewDismissalActorIds = optionals____.reviewDismissalActorIds, bypassPullRequestActorIds = optionals____.bypassPullRequestActorIds, bypassForcePushActorIds = optionals____.bypassForcePushActorIds, restrictsPushes = optionals____.restrictsPushes, pushActorIds = optionals____.pushActorIds, requiredStatusCheckContexts = optionals____.requiredStatusCheckContexts, requiredStatusChecks = optionals____.requiredStatusChecks, requiresConversationResolution = optionals____.requiresConversationResolution, requireLastPushApproval = optionals____.requireLastPushApproval, lockBranch = optionals____.lockBranch, lockAllowsFetchAndMerge = optionals____.lockAllowsFetchAndMerge, clientMutationId = optionals____.clientMutationId }


type alias CreateBranchProtectionRuleInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id
    , pattern : String
    }


type alias CreateBranchProtectionRuleInputOptionalFields =
    { requiresApprovingReviews : OptionalArgument Bool
    , requiredApprovingReviewCount : OptionalArgument Int
    , requiresCommitSignatures : OptionalArgument Bool
    , requiresLinearHistory : OptionalArgument Bool
    , blocksCreations : OptionalArgument Bool
    , allowsForcePushes : OptionalArgument Bool
    , allowsDeletions : OptionalArgument Bool
    , isAdminEnforced : OptionalArgument Bool
    , requiresStatusChecks : OptionalArgument Bool
    , requiresStrictStatusChecks : OptionalArgument Bool
    , requiresCodeOwnerReviews : OptionalArgument Bool
    , dismissesStaleReviews : OptionalArgument Bool
    , restrictsReviewDismissals : OptionalArgument Bool
    , reviewDismissalActorIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , bypassPullRequestActorIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , bypassForcePushActorIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , restrictsPushes : OptionalArgument Bool
    , pushActorIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , requiredStatusCheckContexts : OptionalArgument (List String)
    , requiredStatusChecks : OptionalArgument (List RequiredStatusCheckInput)
    , requiresConversationResolution : OptionalArgument Bool
    , requireLastPushApproval : OptionalArgument Bool
    , lockBranch : OptionalArgument Bool
    , lockAllowsFetchAndMerge : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CreateBranchProtectionRuleInput input object.
-}
type alias CreateBranchProtectionRuleInput =
    { repositoryId : Github.ScalarCodecs.Id
    , pattern : String
    , requiresApprovingReviews : OptionalArgument Bool
    , requiredApprovingReviewCount : OptionalArgument Int
    , requiresCommitSignatures : OptionalArgument Bool
    , requiresLinearHistory : OptionalArgument Bool
    , blocksCreations : OptionalArgument Bool
    , allowsForcePushes : OptionalArgument Bool
    , allowsDeletions : OptionalArgument Bool
    , isAdminEnforced : OptionalArgument Bool
    , requiresStatusChecks : OptionalArgument Bool
    , requiresStrictStatusChecks : OptionalArgument Bool
    , requiresCodeOwnerReviews : OptionalArgument Bool
    , dismissesStaleReviews : OptionalArgument Bool
    , restrictsReviewDismissals : OptionalArgument Bool
    , reviewDismissalActorIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , bypassPullRequestActorIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , bypassForcePushActorIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , restrictsPushes : OptionalArgument Bool
    , pushActorIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , requiredStatusCheckContexts : OptionalArgument (List String)
    , requiredStatusChecks : OptionalArgument (List RequiredStatusCheckInput)
    , requiresConversationResolution : OptionalArgument Bool
    , requireLastPushApproval : OptionalArgument Bool
    , lockBranch : OptionalArgument Bool
    , lockAllowsFetchAndMerge : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateBranchProtectionRuleInput into a value that can be used as an argument.
-}
encodeCreateBranchProtectionRuleInput : CreateBranchProtectionRuleInput -> Value
encodeCreateBranchProtectionRuleInput input____ =
    Encode.maybeObject
        [ ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "pattern", Encode.string input____.pattern |> Just ), ( "requiresApprovingReviews", Encode.bool |> Encode.optional input____.requiresApprovingReviews ), ( "requiredApprovingReviewCount", Encode.int |> Encode.optional input____.requiredApprovingReviewCount ), ( "requiresCommitSignatures", Encode.bool |> Encode.optional input____.requiresCommitSignatures ), ( "requiresLinearHistory", Encode.bool |> Encode.optional input____.requiresLinearHistory ), ( "blocksCreations", Encode.bool |> Encode.optional input____.blocksCreations ), ( "allowsForcePushes", Encode.bool |> Encode.optional input____.allowsForcePushes ), ( "allowsDeletions", Encode.bool |> Encode.optional input____.allowsDeletions ), ( "isAdminEnforced", Encode.bool |> Encode.optional input____.isAdminEnforced ), ( "requiresStatusChecks", Encode.bool |> Encode.optional input____.requiresStatusChecks ), ( "requiresStrictStatusChecks", Encode.bool |> Encode.optional input____.requiresStrictStatusChecks ), ( "requiresCodeOwnerReviews", Encode.bool |> Encode.optional input____.requiresCodeOwnerReviews ), ( "dismissesStaleReviews", Encode.bool |> Encode.optional input____.dismissesStaleReviews ), ( "restrictsReviewDismissals", Encode.bool |> Encode.optional input____.restrictsReviewDismissals ), ( "reviewDismissalActorIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.reviewDismissalActorIds ), ( "bypassPullRequestActorIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.bypassPullRequestActorIds ), ( "bypassForcePushActorIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.bypassForcePushActorIds ), ( "restrictsPushes", Encode.bool |> Encode.optional input____.restrictsPushes ), ( "pushActorIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.pushActorIds ), ( "requiredStatusCheckContexts", (Encode.string |> Encode.list) |> Encode.optional input____.requiredStatusCheckContexts ), ( "requiredStatusChecks", (encodeRequiredStatusCheckInput |> Encode.list) |> Encode.optional input____.requiredStatusChecks ), ( "requiresConversationResolution", Encode.bool |> Encode.optional input____.requiresConversationResolution ), ( "requireLastPushApproval", Encode.bool |> Encode.optional input____.requireLastPushApproval ), ( "lockBranch", Encode.bool |> Encode.optional input____.lockBranch ), ( "lockAllowsFetchAndMerge", Encode.bool |> Encode.optional input____.lockAllowsFetchAndMerge ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCreateCheckRunInput :
    CreateCheckRunInputRequiredFields
    -> (CreateCheckRunInputOptionalFields -> CreateCheckRunInputOptionalFields)
    -> CreateCheckRunInput
buildCreateCheckRunInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { detailsUrl = Absent, externalId = Absent, status = Absent, startedAt = Absent, conclusion = Absent, completedAt = Absent, output = Absent, actions = Absent, clientMutationId = Absent }
    in
    { repositoryId = required____.repositoryId, name = required____.name, headSha = required____.headSha, detailsUrl = optionals____.detailsUrl, externalId = optionals____.externalId, status = optionals____.status, startedAt = optionals____.startedAt, conclusion = optionals____.conclusion, completedAt = optionals____.completedAt, output = optionals____.output, actions = optionals____.actions, clientMutationId = optionals____.clientMutationId }


type alias CreateCheckRunInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id
    , name : String
    , headSha : Github.ScalarCodecs.GitObjectID
    }


type alias CreateCheckRunInputOptionalFields =
    { detailsUrl : OptionalArgument Github.ScalarCodecs.Uri
    , externalId : OptionalArgument String
    , status : OptionalArgument Github.Enum.RequestableCheckStatusState.RequestableCheckStatusState
    , startedAt : OptionalArgument Github.ScalarCodecs.DateTime
    , conclusion : OptionalArgument Github.Enum.CheckConclusionState.CheckConclusionState
    , completedAt : OptionalArgument Github.ScalarCodecs.DateTime
    , output : OptionalArgument CheckRunOutput
    , actions : OptionalArgument (List CheckRunAction)
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CreateCheckRunInput input object.
-}
type alias CreateCheckRunInput =
    { repositoryId : Github.ScalarCodecs.Id
    , name : String
    , headSha : Github.ScalarCodecs.GitObjectID
    , detailsUrl : OptionalArgument Github.ScalarCodecs.Uri
    , externalId : OptionalArgument String
    , status : OptionalArgument Github.Enum.RequestableCheckStatusState.RequestableCheckStatusState
    , startedAt : OptionalArgument Github.ScalarCodecs.DateTime
    , conclusion : OptionalArgument Github.Enum.CheckConclusionState.CheckConclusionState
    , completedAt : OptionalArgument Github.ScalarCodecs.DateTime
    , output : OptionalArgument CheckRunOutput
    , actions : OptionalArgument (List CheckRunAction)
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateCheckRunInput into a value that can be used as an argument.
-}
encodeCreateCheckRunInput : CreateCheckRunInput -> Value
encodeCreateCheckRunInput input____ =
    Encode.maybeObject
        [ ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "name", Encode.string input____.name |> Just ), ( "headSha", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecGitObjectID) input____.headSha |> Just ), ( "detailsUrl", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecUri) |> Encode.optional input____.detailsUrl ), ( "externalId", Encode.string |> Encode.optional input____.externalId ), ( "status", Encode.enum Github.Enum.RequestableCheckStatusState.toString |> Encode.optional input____.status ), ( "startedAt", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.startedAt ), ( "conclusion", Encode.enum Github.Enum.CheckConclusionState.toString |> Encode.optional input____.conclusion ), ( "completedAt", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.completedAt ), ( "output", encodeCheckRunOutput |> Encode.optional input____.output ), ( "actions", (encodeCheckRunAction |> Encode.list) |> Encode.optional input____.actions ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCreateCheckSuiteInput :
    CreateCheckSuiteInputRequiredFields
    -> (CreateCheckSuiteInputOptionalFields -> CreateCheckSuiteInputOptionalFields)
    -> CreateCheckSuiteInput
buildCreateCheckSuiteInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { repositoryId = required____.repositoryId, headSha = required____.headSha, clientMutationId = optionals____.clientMutationId }


type alias CreateCheckSuiteInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id
    , headSha : Github.ScalarCodecs.GitObjectID
    }


type alias CreateCheckSuiteInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the CreateCheckSuiteInput input object.
-}
type alias CreateCheckSuiteInput =
    { repositoryId : Github.ScalarCodecs.Id
    , headSha : Github.ScalarCodecs.GitObjectID
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateCheckSuiteInput into a value that can be used as an argument.
-}
encodeCreateCheckSuiteInput : CreateCheckSuiteInput -> Value
encodeCreateCheckSuiteInput input____ =
    Encode.maybeObject
        [ ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "headSha", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecGitObjectID) input____.headSha |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCreateCommitOnBranchInput :
    CreateCommitOnBranchInputRequiredFields
    -> (CreateCommitOnBranchInputOptionalFields -> CreateCommitOnBranchInputOptionalFields)
    -> CreateCommitOnBranchInput
buildCreateCommitOnBranchInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { fileChanges = Absent, clientMutationId = Absent }
    in
    { branch = required____.branch, fileChanges = optionals____.fileChanges, message = required____.message, expectedHeadOid = required____.expectedHeadOid, clientMutationId = optionals____.clientMutationId }


type alias CreateCommitOnBranchInputRequiredFields =
    { branch : CommittableBranch
    , message : CommitMessage
    , expectedHeadOid : Github.ScalarCodecs.GitObjectID
    }


type alias CreateCommitOnBranchInputOptionalFields =
    { fileChanges : OptionalArgument FileChanges
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CreateCommitOnBranchInput input object.
-}
type alias CreateCommitOnBranchInput =
    { branch : CommittableBranch
    , fileChanges : OptionalArgument FileChanges
    , message : CommitMessage
    , expectedHeadOid : Github.ScalarCodecs.GitObjectID
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateCommitOnBranchInput into a value that can be used as an argument.
-}
encodeCreateCommitOnBranchInput : CreateCommitOnBranchInput -> Value
encodeCreateCommitOnBranchInput input____ =
    Encode.maybeObject
        [ ( "branch", encodeCommittableBranch input____.branch |> Just ), ( "fileChanges", encodeFileChanges |> Encode.optional input____.fileChanges ), ( "message", encodeCommitMessage input____.message |> Just ), ( "expectedHeadOid", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecGitObjectID) input____.expectedHeadOid |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCreateDiscussionInput :
    CreateDiscussionInputRequiredFields
    -> (CreateDiscussionInputOptionalFields -> CreateDiscussionInputOptionalFields)
    -> CreateDiscussionInput
buildCreateDiscussionInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { repositoryId = required____.repositoryId, title = required____.title, body = required____.body, categoryId = required____.categoryId, clientMutationId = optionals____.clientMutationId }


type alias CreateDiscussionInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id
    , title : String
    , body : String
    , categoryId : Github.ScalarCodecs.Id
    }


type alias CreateDiscussionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the CreateDiscussionInput input object.
-}
type alias CreateDiscussionInput =
    { repositoryId : Github.ScalarCodecs.Id
    , title : String
    , body : String
    , categoryId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateDiscussionInput into a value that can be used as an argument.
-}
encodeCreateDiscussionInput : CreateDiscussionInput -> Value
encodeCreateDiscussionInput input____ =
    Encode.maybeObject
        [ ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "title", Encode.string input____.title |> Just ), ( "body", Encode.string input____.body |> Just ), ( "categoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.categoryId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCreateEnterpriseOrganizationInput :
    CreateEnterpriseOrganizationInputRequiredFields
    -> (CreateEnterpriseOrganizationInputOptionalFields -> CreateEnterpriseOrganizationInputOptionalFields)
    -> CreateEnterpriseOrganizationInput
buildCreateEnterpriseOrganizationInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, login = required____.login, profileName = required____.profileName, billingEmail = required____.billingEmail, adminLogins = required____.adminLogins, clientMutationId = optionals____.clientMutationId }


type alias CreateEnterpriseOrganizationInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , login : String
    , profileName : String
    , billingEmail : String
    , adminLogins : List String
    }


type alias CreateEnterpriseOrganizationInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the CreateEnterpriseOrganizationInput input object.
-}
type alias CreateEnterpriseOrganizationInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , login : String
    , profileName : String
    , billingEmail : String
    , adminLogins : List String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateEnterpriseOrganizationInput into a value that can be used as an argument.
-}
encodeCreateEnterpriseOrganizationInput : CreateEnterpriseOrganizationInput -> Value
encodeCreateEnterpriseOrganizationInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "login", Encode.string input____.login |> Just ), ( "profileName", Encode.string input____.profileName |> Just ), ( "billingEmail", Encode.string input____.billingEmail |> Just ), ( "adminLogins", (Encode.string |> Encode.list) input____.adminLogins |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCreateEnvironmentInput :
    CreateEnvironmentInputRequiredFields
    -> (CreateEnvironmentInputOptionalFields -> CreateEnvironmentInputOptionalFields)
    -> CreateEnvironmentInput
buildCreateEnvironmentInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { repositoryId = required____.repositoryId, name = required____.name, clientMutationId = optionals____.clientMutationId }


type alias CreateEnvironmentInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id
    , name : String
    }


type alias CreateEnvironmentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the CreateEnvironmentInput input object.
-}
type alias CreateEnvironmentInput =
    { repositoryId : Github.ScalarCodecs.Id
    , name : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateEnvironmentInput into a value that can be used as an argument.
-}
encodeCreateEnvironmentInput : CreateEnvironmentInput -> Value
encodeCreateEnvironmentInput input____ =
    Encode.maybeObject
        [ ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "name", Encode.string input____.name |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCreateIpAllowListEntryInput :
    CreateIpAllowListEntryInputRequiredFields
    -> (CreateIpAllowListEntryInputOptionalFields -> CreateIpAllowListEntryInputOptionalFields)
    -> CreateIpAllowListEntryInput
buildCreateIpAllowListEntryInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { name = Absent, clientMutationId = Absent }
    in
    { ownerId = required____.ownerId, allowListValue = required____.allowListValue, name = optionals____.name, isActive = required____.isActive, clientMutationId = optionals____.clientMutationId }


type alias CreateIpAllowListEntryInputRequiredFields =
    { ownerId : Github.ScalarCodecs.Id
    , allowListValue : String
    , isActive : Bool
    }


type alias CreateIpAllowListEntryInputOptionalFields =
    { name : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CreateIpAllowListEntryInput input object.
-}
type alias CreateIpAllowListEntryInput =
    { ownerId : Github.ScalarCodecs.Id
    , allowListValue : String
    , name : OptionalArgument String
    , isActive : Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateIpAllowListEntryInput into a value that can be used as an argument.
-}
encodeCreateIpAllowListEntryInput : CreateIpAllowListEntryInput -> Value
encodeCreateIpAllowListEntryInput input____ =
    Encode.maybeObject
        [ ( "ownerId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.ownerId |> Just ), ( "allowListValue", Encode.string input____.allowListValue |> Just ), ( "name", Encode.string |> Encode.optional input____.name ), ( "isActive", Encode.bool input____.isActive |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCreateIssueInput :
    CreateIssueInputRequiredFields
    -> (CreateIssueInputOptionalFields -> CreateIssueInputOptionalFields)
    -> CreateIssueInput
buildCreateIssueInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { body = Absent, assigneeIds = Absent, milestoneId = Absent, labelIds = Absent, projectIds = Absent, issueTemplate = Absent, clientMutationId = Absent }
    in
    { repositoryId = required____.repositoryId, title = required____.title, body = optionals____.body, assigneeIds = optionals____.assigneeIds, milestoneId = optionals____.milestoneId, labelIds = optionals____.labelIds, projectIds = optionals____.projectIds, issueTemplate = optionals____.issueTemplate, clientMutationId = optionals____.clientMutationId }


type alias CreateIssueInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id
    , title : String
    }


type alias CreateIssueInputOptionalFields =
    { body : OptionalArgument String
    , assigneeIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , milestoneId : OptionalArgument Github.ScalarCodecs.Id
    , labelIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , projectIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , issueTemplate : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CreateIssueInput input object.
-}
type alias CreateIssueInput =
    { repositoryId : Github.ScalarCodecs.Id
    , title : String
    , body : OptionalArgument String
    , assigneeIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , milestoneId : OptionalArgument Github.ScalarCodecs.Id
    , labelIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , projectIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , issueTemplate : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateIssueInput into a value that can be used as an argument.
-}
encodeCreateIssueInput : CreateIssueInput -> Value
encodeCreateIssueInput input____ =
    Encode.maybeObject
        [ ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "title", Encode.string input____.title |> Just ), ( "body", Encode.string |> Encode.optional input____.body ), ( "assigneeIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.assigneeIds ), ( "milestoneId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.milestoneId ), ( "labelIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.labelIds ), ( "projectIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.projectIds ), ( "issueTemplate", Encode.string |> Encode.optional input____.issueTemplate ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCreateLinkedBranchInput :
    CreateLinkedBranchInputRequiredFields
    -> (CreateLinkedBranchInputOptionalFields -> CreateLinkedBranchInputOptionalFields)
    -> CreateLinkedBranchInput
buildCreateLinkedBranchInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { name = Absent, repositoryId = Absent, clientMutationId = Absent }
    in
    { issueId = required____.issueId, oid = required____.oid, name = optionals____.name, repositoryId = optionals____.repositoryId, clientMutationId = optionals____.clientMutationId }


type alias CreateLinkedBranchInputRequiredFields =
    { issueId : Github.ScalarCodecs.Id
    , oid : Github.ScalarCodecs.GitObjectID
    }


type alias CreateLinkedBranchInputOptionalFields =
    { name : OptionalArgument String
    , repositoryId : OptionalArgument Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CreateLinkedBranchInput input object.
-}
type alias CreateLinkedBranchInput =
    { issueId : Github.ScalarCodecs.Id
    , oid : Github.ScalarCodecs.GitObjectID
    , name : OptionalArgument String
    , repositoryId : OptionalArgument Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateLinkedBranchInput into a value that can be used as an argument.
-}
encodeCreateLinkedBranchInput : CreateLinkedBranchInput -> Value
encodeCreateLinkedBranchInput input____ =
    Encode.maybeObject
        [ ( "issueId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.issueId |> Just ), ( "oid", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecGitObjectID) input____.oid |> Just ), ( "name", Encode.string |> Encode.optional input____.name ), ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.repositoryId ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCreateMigrationSourceInput :
    CreateMigrationSourceInputRequiredFields
    -> (CreateMigrationSourceInputOptionalFields -> CreateMigrationSourceInputOptionalFields)
    -> CreateMigrationSourceInput
buildCreateMigrationSourceInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { accessToken = Absent, githubPat = Absent, clientMutationId = Absent }
    in
    { name = required____.name, url = required____.url, accessToken = optionals____.accessToken, type_ = required____.type_, ownerId = required____.ownerId, githubPat = optionals____.githubPat, clientMutationId = optionals____.clientMutationId }


type alias CreateMigrationSourceInputRequiredFields =
    { name : String
    , url : String
    , type_ : Github.Enum.MigrationSourceType.MigrationSourceType
    , ownerId : Github.ScalarCodecs.Id
    }


type alias CreateMigrationSourceInputOptionalFields =
    { accessToken : OptionalArgument String
    , githubPat : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CreateMigrationSourceInput input object.
-}
type alias CreateMigrationSourceInput =
    { name : String
    , url : String
    , accessToken : OptionalArgument String
    , type_ : Github.Enum.MigrationSourceType.MigrationSourceType
    , ownerId : Github.ScalarCodecs.Id
    , githubPat : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateMigrationSourceInput into a value that can be used as an argument.
-}
encodeCreateMigrationSourceInput : CreateMigrationSourceInput -> Value
encodeCreateMigrationSourceInput input____ =
    Encode.maybeObject
        [ ( "name", Encode.string input____.name |> Just ), ( "url", Encode.string input____.url |> Just ), ( "accessToken", Encode.string |> Encode.optional input____.accessToken ), ( "type", Encode.enum Github.Enum.MigrationSourceType.toString input____.type_ |> Just ), ( "ownerId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.ownerId |> Just ), ( "githubPat", Encode.string |> Encode.optional input____.githubPat ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCreateProjectInput :
    CreateProjectInputRequiredFields
    -> (CreateProjectInputOptionalFields -> CreateProjectInputOptionalFields)
    -> CreateProjectInput
buildCreateProjectInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { body = Absent, template = Absent, repositoryIds = Absent, clientMutationId = Absent }
    in
    { ownerId = required____.ownerId, name = required____.name, body = optionals____.body, template = optionals____.template, repositoryIds = optionals____.repositoryIds, clientMutationId = optionals____.clientMutationId }


type alias CreateProjectInputRequiredFields =
    { ownerId : Github.ScalarCodecs.Id
    , name : String
    }


type alias CreateProjectInputOptionalFields =
    { body : OptionalArgument String
    , template : OptionalArgument Github.Enum.ProjectTemplate.ProjectTemplate
    , repositoryIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CreateProjectInput input object.
-}
type alias CreateProjectInput =
    { ownerId : Github.ScalarCodecs.Id
    , name : String
    , body : OptionalArgument String
    , template : OptionalArgument Github.Enum.ProjectTemplate.ProjectTemplate
    , repositoryIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateProjectInput into a value that can be used as an argument.
-}
encodeCreateProjectInput : CreateProjectInput -> Value
encodeCreateProjectInput input____ =
    Encode.maybeObject
        [ ( "ownerId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.ownerId |> Just ), ( "name", Encode.string input____.name |> Just ), ( "body", Encode.string |> Encode.optional input____.body ), ( "template", Encode.enum Github.Enum.ProjectTemplate.toString |> Encode.optional input____.template ), ( "repositoryIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.repositoryIds ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCreateProjectV2Input :
    CreateProjectV2InputRequiredFields
    -> (CreateProjectV2InputOptionalFields -> CreateProjectV2InputOptionalFields)
    -> CreateProjectV2Input
buildCreateProjectV2Input required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { ownerId = required____.ownerId, title = required____.title, clientMutationId = optionals____.clientMutationId }


type alias CreateProjectV2InputRequiredFields =
    { ownerId : Github.ScalarCodecs.Id
    , title : String
    }


type alias CreateProjectV2InputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the CreateProjectV2Input input object.
-}
type alias CreateProjectV2Input =
    { ownerId : Github.ScalarCodecs.Id
    , title : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateProjectV2Input into a value that can be used as an argument.
-}
encodeCreateProjectV2Input : CreateProjectV2Input -> Value
encodeCreateProjectV2Input input____ =
    Encode.maybeObject
        [ ( "ownerId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.ownerId |> Just ), ( "title", Encode.string input____.title |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCreatePullRequestInput :
    CreatePullRequestInputRequiredFields
    -> (CreatePullRequestInputOptionalFields -> CreatePullRequestInputOptionalFields)
    -> CreatePullRequestInput
buildCreatePullRequestInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { body = Absent, maintainerCanModify = Absent, draft = Absent, clientMutationId = Absent }
    in
    { repositoryId = required____.repositoryId, baseRefName = required____.baseRefName, headRefName = required____.headRefName, title = required____.title, body = optionals____.body, maintainerCanModify = optionals____.maintainerCanModify, draft = optionals____.draft, clientMutationId = optionals____.clientMutationId }


type alias CreatePullRequestInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id
    , baseRefName : String
    , headRefName : String
    , title : String
    }


type alias CreatePullRequestInputOptionalFields =
    { body : OptionalArgument String
    , maintainerCanModify : OptionalArgument Bool
    , draft : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CreatePullRequestInput input object.
-}
type alias CreatePullRequestInput =
    { repositoryId : Github.ScalarCodecs.Id
    , baseRefName : String
    , headRefName : String
    , title : String
    , body : OptionalArgument String
    , maintainerCanModify : OptionalArgument Bool
    , draft : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreatePullRequestInput into a value that can be used as an argument.
-}
encodeCreatePullRequestInput : CreatePullRequestInput -> Value
encodeCreatePullRequestInput input____ =
    Encode.maybeObject
        [ ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "baseRefName", Encode.string input____.baseRefName |> Just ), ( "headRefName", Encode.string input____.headRefName |> Just ), ( "title", Encode.string input____.title |> Just ), ( "body", Encode.string |> Encode.optional input____.body ), ( "maintainerCanModify", Encode.bool |> Encode.optional input____.maintainerCanModify ), ( "draft", Encode.bool |> Encode.optional input____.draft ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCreateRefInput :
    CreateRefInputRequiredFields
    -> (CreateRefInputOptionalFields -> CreateRefInputOptionalFields)
    -> CreateRefInput
buildCreateRefInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { repositoryId = required____.repositoryId, name = required____.name, oid = required____.oid, clientMutationId = optionals____.clientMutationId }


type alias CreateRefInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id
    , name : String
    , oid : Github.ScalarCodecs.GitObjectID
    }


type alias CreateRefInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the CreateRefInput input object.
-}
type alias CreateRefInput =
    { repositoryId : Github.ScalarCodecs.Id
    , name : String
    , oid : Github.ScalarCodecs.GitObjectID
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateRefInput into a value that can be used as an argument.
-}
encodeCreateRefInput : CreateRefInput -> Value
encodeCreateRefInput input____ =
    Encode.maybeObject
        [ ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "name", Encode.string input____.name |> Just ), ( "oid", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecGitObjectID) input____.oid |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCreateRepositoryInput :
    CreateRepositoryInputRequiredFields
    -> (CreateRepositoryInputOptionalFields -> CreateRepositoryInputOptionalFields)
    -> CreateRepositoryInput
buildCreateRepositoryInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { ownerId = Absent, description = Absent, template = Absent, homepageUrl = Absent, hasWikiEnabled = Absent, hasIssuesEnabled = Absent, teamId = Absent, clientMutationId = Absent }
    in
    { name = required____.name, ownerId = optionals____.ownerId, description = optionals____.description, visibility = required____.visibility, template = optionals____.template, homepageUrl = optionals____.homepageUrl, hasWikiEnabled = optionals____.hasWikiEnabled, hasIssuesEnabled = optionals____.hasIssuesEnabled, teamId = optionals____.teamId, clientMutationId = optionals____.clientMutationId }


type alias CreateRepositoryInputRequiredFields =
    { name : String
    , visibility : Github.Enum.RepositoryVisibility.RepositoryVisibility
    }


type alias CreateRepositoryInputOptionalFields =
    { ownerId : OptionalArgument Github.ScalarCodecs.Id
    , description : OptionalArgument String
    , template : OptionalArgument Bool
    , homepageUrl : OptionalArgument Github.ScalarCodecs.Uri
    , hasWikiEnabled : OptionalArgument Bool
    , hasIssuesEnabled : OptionalArgument Bool
    , teamId : OptionalArgument Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CreateRepositoryInput input object.
-}
type alias CreateRepositoryInput =
    { name : String
    , ownerId : OptionalArgument Github.ScalarCodecs.Id
    , description : OptionalArgument String
    , visibility : Github.Enum.RepositoryVisibility.RepositoryVisibility
    , template : OptionalArgument Bool
    , homepageUrl : OptionalArgument Github.ScalarCodecs.Uri
    , hasWikiEnabled : OptionalArgument Bool
    , hasIssuesEnabled : OptionalArgument Bool
    , teamId : OptionalArgument Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateRepositoryInput into a value that can be used as an argument.
-}
encodeCreateRepositoryInput : CreateRepositoryInput -> Value
encodeCreateRepositoryInput input____ =
    Encode.maybeObject
        [ ( "name", Encode.string input____.name |> Just ), ( "ownerId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.ownerId ), ( "description", Encode.string |> Encode.optional input____.description ), ( "visibility", Encode.enum Github.Enum.RepositoryVisibility.toString input____.visibility |> Just ), ( "template", Encode.bool |> Encode.optional input____.template ), ( "homepageUrl", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecUri) |> Encode.optional input____.homepageUrl ), ( "hasWikiEnabled", Encode.bool |> Encode.optional input____.hasWikiEnabled ), ( "hasIssuesEnabled", Encode.bool |> Encode.optional input____.hasIssuesEnabled ), ( "teamId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.teamId ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCreateSponsorsTierInput :
    CreateSponsorsTierInputRequiredFields
    -> (CreateSponsorsTierInputOptionalFields -> CreateSponsorsTierInputOptionalFields)
    -> CreateSponsorsTierInput
buildCreateSponsorsTierInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { sponsorableId = Absent, sponsorableLogin = Absent, isRecurring = Absent, repositoryId = Absent, repositoryOwnerLogin = Absent, repositoryName = Absent, welcomeMessage = Absent, publish = Absent, clientMutationId = Absent }
    in
    { sponsorableId = optionals____.sponsorableId, sponsorableLogin = optionals____.sponsorableLogin, amount = required____.amount, isRecurring = optionals____.isRecurring, repositoryId = optionals____.repositoryId, repositoryOwnerLogin = optionals____.repositoryOwnerLogin, repositoryName = optionals____.repositoryName, welcomeMessage = optionals____.welcomeMessage, description = required____.description, publish = optionals____.publish, clientMutationId = optionals____.clientMutationId }


type alias CreateSponsorsTierInputRequiredFields =
    { amount : Int
    , description : String
    }


type alias CreateSponsorsTierInputOptionalFields =
    { sponsorableId : OptionalArgument Github.ScalarCodecs.Id
    , sponsorableLogin : OptionalArgument String
    , isRecurring : OptionalArgument Bool
    , repositoryId : OptionalArgument Github.ScalarCodecs.Id
    , repositoryOwnerLogin : OptionalArgument String
    , repositoryName : OptionalArgument String
    , welcomeMessage : OptionalArgument String
    , publish : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CreateSponsorsTierInput input object.
-}
type alias CreateSponsorsTierInput =
    { sponsorableId : OptionalArgument Github.ScalarCodecs.Id
    , sponsorableLogin : OptionalArgument String
    , amount : Int
    , isRecurring : OptionalArgument Bool
    , repositoryId : OptionalArgument Github.ScalarCodecs.Id
    , repositoryOwnerLogin : OptionalArgument String
    , repositoryName : OptionalArgument String
    , welcomeMessage : OptionalArgument String
    , description : String
    , publish : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateSponsorsTierInput into a value that can be used as an argument.
-}
encodeCreateSponsorsTierInput : CreateSponsorsTierInput -> Value
encodeCreateSponsorsTierInput input____ =
    Encode.maybeObject
        [ ( "sponsorableId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.sponsorableId ), ( "sponsorableLogin", Encode.string |> Encode.optional input____.sponsorableLogin ), ( "amount", Encode.int input____.amount |> Just ), ( "isRecurring", Encode.bool |> Encode.optional input____.isRecurring ), ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.repositoryId ), ( "repositoryOwnerLogin", Encode.string |> Encode.optional input____.repositoryOwnerLogin ), ( "repositoryName", Encode.string |> Encode.optional input____.repositoryName ), ( "welcomeMessage", Encode.string |> Encode.optional input____.welcomeMessage ), ( "description", Encode.string input____.description |> Just ), ( "publish", Encode.bool |> Encode.optional input____.publish ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCreateSponsorshipInput :
    (CreateSponsorshipInputOptionalFields -> CreateSponsorshipInputOptionalFields)
    -> CreateSponsorshipInput
buildCreateSponsorshipInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { sponsorId = Absent, sponsorLogin = Absent, sponsorableId = Absent, sponsorableLogin = Absent, tierId = Absent, amount = Absent, isRecurring = Absent, receiveEmails = Absent, privacyLevel = Absent, clientMutationId = Absent }
    in
    { sponsorId = optionals____.sponsorId, sponsorLogin = optionals____.sponsorLogin, sponsorableId = optionals____.sponsorableId, sponsorableLogin = optionals____.sponsorableLogin, tierId = optionals____.tierId, amount = optionals____.amount, isRecurring = optionals____.isRecurring, receiveEmails = optionals____.receiveEmails, privacyLevel = optionals____.privacyLevel, clientMutationId = optionals____.clientMutationId }


type alias CreateSponsorshipInputOptionalFields =
    { sponsorId : OptionalArgument Github.ScalarCodecs.Id
    , sponsorLogin : OptionalArgument String
    , sponsorableId : OptionalArgument Github.ScalarCodecs.Id
    , sponsorableLogin : OptionalArgument String
    , tierId : OptionalArgument Github.ScalarCodecs.Id
    , amount : OptionalArgument Int
    , isRecurring : OptionalArgument Bool
    , receiveEmails : OptionalArgument Bool
    , privacyLevel : OptionalArgument Github.Enum.SponsorshipPrivacy.SponsorshipPrivacy
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CreateSponsorshipInput input object.
-}
type alias CreateSponsorshipInput =
    { sponsorId : OptionalArgument Github.ScalarCodecs.Id
    , sponsorLogin : OptionalArgument String
    , sponsorableId : OptionalArgument Github.ScalarCodecs.Id
    , sponsorableLogin : OptionalArgument String
    , tierId : OptionalArgument Github.ScalarCodecs.Id
    , amount : OptionalArgument Int
    , isRecurring : OptionalArgument Bool
    , receiveEmails : OptionalArgument Bool
    , privacyLevel : OptionalArgument Github.Enum.SponsorshipPrivacy.SponsorshipPrivacy
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateSponsorshipInput into a value that can be used as an argument.
-}
encodeCreateSponsorshipInput : CreateSponsorshipInput -> Value
encodeCreateSponsorshipInput input____ =
    Encode.maybeObject
        [ ( "sponsorId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.sponsorId ), ( "sponsorLogin", Encode.string |> Encode.optional input____.sponsorLogin ), ( "sponsorableId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.sponsorableId ), ( "sponsorableLogin", Encode.string |> Encode.optional input____.sponsorableLogin ), ( "tierId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.tierId ), ( "amount", Encode.int |> Encode.optional input____.amount ), ( "isRecurring", Encode.bool |> Encode.optional input____.isRecurring ), ( "receiveEmails", Encode.bool |> Encode.optional input____.receiveEmails ), ( "privacyLevel", Encode.enum Github.Enum.SponsorshipPrivacy.toString |> Encode.optional input____.privacyLevel ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCreateTeamDiscussionCommentInput :
    CreateTeamDiscussionCommentInputRequiredFields
    -> (CreateTeamDiscussionCommentInputOptionalFields -> CreateTeamDiscussionCommentInputOptionalFields)
    -> CreateTeamDiscussionCommentInput
buildCreateTeamDiscussionCommentInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { discussionId = required____.discussionId, body = required____.body, clientMutationId = optionals____.clientMutationId }


type alias CreateTeamDiscussionCommentInputRequiredFields =
    { discussionId : Github.ScalarCodecs.Id
    , body : String
    }


type alias CreateTeamDiscussionCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the CreateTeamDiscussionCommentInput input object.
-}
type alias CreateTeamDiscussionCommentInput =
    { discussionId : Github.ScalarCodecs.Id
    , body : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateTeamDiscussionCommentInput into a value that can be used as an argument.
-}
encodeCreateTeamDiscussionCommentInput : CreateTeamDiscussionCommentInput -> Value
encodeCreateTeamDiscussionCommentInput input____ =
    Encode.maybeObject
        [ ( "discussionId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.discussionId |> Just ), ( "body", Encode.string input____.body |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildCreateTeamDiscussionInput :
    CreateTeamDiscussionInputRequiredFields
    -> (CreateTeamDiscussionInputOptionalFields -> CreateTeamDiscussionInputOptionalFields)
    -> CreateTeamDiscussionInput
buildCreateTeamDiscussionInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { private = Absent, clientMutationId = Absent }
    in
    { teamId = required____.teamId, title = required____.title, body = required____.body, private = optionals____.private, clientMutationId = optionals____.clientMutationId }


type alias CreateTeamDiscussionInputRequiredFields =
    { teamId : Github.ScalarCodecs.Id
    , title : String
    , body : String
    }


type alias CreateTeamDiscussionInputOptionalFields =
    { private : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the CreateTeamDiscussionInput input object.
-}
type alias CreateTeamDiscussionInput =
    { teamId : Github.ScalarCodecs.Id
    , title : String
    , body : String
    , private : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a CreateTeamDiscussionInput into a value that can be used as an argument.
-}
encodeCreateTeamDiscussionInput : CreateTeamDiscussionInput -> Value
encodeCreateTeamDiscussionInput input____ =
    Encode.maybeObject
        [ ( "teamId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.teamId |> Just ), ( "title", Encode.string input____.title |> Just ), ( "body", Encode.string input____.body |> Just ), ( "private", Encode.bool |> Encode.optional input____.private ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDeclineTopicSuggestionInput :
    DeclineTopicSuggestionInputRequiredFields
    -> (DeclineTopicSuggestionInputOptionalFields -> DeclineTopicSuggestionInputOptionalFields)
    -> DeclineTopicSuggestionInput
buildDeclineTopicSuggestionInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { repositoryId = required____.repositoryId, name = required____.name, reason = required____.reason, clientMutationId = optionals____.clientMutationId }


type alias DeclineTopicSuggestionInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id
    , name : String
    , reason : Github.Enum.TopicSuggestionDeclineReason.TopicSuggestionDeclineReason
    }


type alias DeclineTopicSuggestionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeclineTopicSuggestionInput input object.
-}
type alias DeclineTopicSuggestionInput =
    { repositoryId : Github.ScalarCodecs.Id
    , name : String
    , reason : Github.Enum.TopicSuggestionDeclineReason.TopicSuggestionDeclineReason
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeclineTopicSuggestionInput into a value that can be used as an argument.
-}
encodeDeclineTopicSuggestionInput : DeclineTopicSuggestionInput -> Value
encodeDeclineTopicSuggestionInput input____ =
    Encode.maybeObject
        [ ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "name", Encode.string input____.name |> Just ), ( "reason", Encode.enum Github.Enum.TopicSuggestionDeclineReason.toString input____.reason |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDeleteBranchProtectionRuleInput :
    DeleteBranchProtectionRuleInputRequiredFields
    -> (DeleteBranchProtectionRuleInputOptionalFields -> DeleteBranchProtectionRuleInputOptionalFields)
    -> DeleteBranchProtectionRuleInput
buildDeleteBranchProtectionRuleInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { branchProtectionRuleId = required____.branchProtectionRuleId, clientMutationId = optionals____.clientMutationId }


type alias DeleteBranchProtectionRuleInputRequiredFields =
    { branchProtectionRuleId : Github.ScalarCodecs.Id }


type alias DeleteBranchProtectionRuleInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteBranchProtectionRuleInput input object.
-}
type alias DeleteBranchProtectionRuleInput =
    { branchProtectionRuleId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteBranchProtectionRuleInput into a value that can be used as an argument.
-}
encodeDeleteBranchProtectionRuleInput : DeleteBranchProtectionRuleInput -> Value
encodeDeleteBranchProtectionRuleInput input____ =
    Encode.maybeObject
        [ ( "branchProtectionRuleId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.branchProtectionRuleId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDeleteDeploymentInput :
    DeleteDeploymentInputRequiredFields
    -> (DeleteDeploymentInputOptionalFields -> DeleteDeploymentInputOptionalFields)
    -> DeleteDeploymentInput
buildDeleteDeploymentInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { id = required____.id, clientMutationId = optionals____.clientMutationId }


type alias DeleteDeploymentInputRequiredFields =
    { id : Github.ScalarCodecs.Id }


type alias DeleteDeploymentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteDeploymentInput input object.
-}
type alias DeleteDeploymentInput =
    { id : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteDeploymentInput into a value that can be used as an argument.
-}
encodeDeleteDeploymentInput : DeleteDeploymentInput -> Value
encodeDeleteDeploymentInput input____ =
    Encode.maybeObject
        [ ( "id", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDeleteDiscussionCommentInput :
    DeleteDiscussionCommentInputRequiredFields
    -> (DeleteDiscussionCommentInputOptionalFields -> DeleteDiscussionCommentInputOptionalFields)
    -> DeleteDiscussionCommentInput
buildDeleteDiscussionCommentInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { id = required____.id, clientMutationId = optionals____.clientMutationId }


type alias DeleteDiscussionCommentInputRequiredFields =
    { id : Github.ScalarCodecs.Id }


type alias DeleteDiscussionCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteDiscussionCommentInput input object.
-}
type alias DeleteDiscussionCommentInput =
    { id : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteDiscussionCommentInput into a value that can be used as an argument.
-}
encodeDeleteDiscussionCommentInput : DeleteDiscussionCommentInput -> Value
encodeDeleteDiscussionCommentInput input____ =
    Encode.maybeObject
        [ ( "id", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDeleteDiscussionInput :
    DeleteDiscussionInputRequiredFields
    -> (DeleteDiscussionInputOptionalFields -> DeleteDiscussionInputOptionalFields)
    -> DeleteDiscussionInput
buildDeleteDiscussionInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { id = required____.id, clientMutationId = optionals____.clientMutationId }


type alias DeleteDiscussionInputRequiredFields =
    { id : Github.ScalarCodecs.Id }


type alias DeleteDiscussionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteDiscussionInput input object.
-}
type alias DeleteDiscussionInput =
    { id : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteDiscussionInput into a value that can be used as an argument.
-}
encodeDeleteDiscussionInput : DeleteDiscussionInput -> Value
encodeDeleteDiscussionInput input____ =
    Encode.maybeObject
        [ ( "id", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDeleteEnvironmentInput :
    DeleteEnvironmentInputRequiredFields
    -> (DeleteEnvironmentInputOptionalFields -> DeleteEnvironmentInputOptionalFields)
    -> DeleteEnvironmentInput
buildDeleteEnvironmentInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { id = required____.id, clientMutationId = optionals____.clientMutationId }


type alias DeleteEnvironmentInputRequiredFields =
    { id : Github.ScalarCodecs.Id }


type alias DeleteEnvironmentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteEnvironmentInput input object.
-}
type alias DeleteEnvironmentInput =
    { id : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteEnvironmentInput into a value that can be used as an argument.
-}
encodeDeleteEnvironmentInput : DeleteEnvironmentInput -> Value
encodeDeleteEnvironmentInput input____ =
    Encode.maybeObject
        [ ( "id", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDeleteIpAllowListEntryInput :
    DeleteIpAllowListEntryInputRequiredFields
    -> (DeleteIpAllowListEntryInputOptionalFields -> DeleteIpAllowListEntryInputOptionalFields)
    -> DeleteIpAllowListEntryInput
buildDeleteIpAllowListEntryInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { ipAllowListEntryId = required____.ipAllowListEntryId, clientMutationId = optionals____.clientMutationId }


type alias DeleteIpAllowListEntryInputRequiredFields =
    { ipAllowListEntryId : Github.ScalarCodecs.Id }


type alias DeleteIpAllowListEntryInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteIpAllowListEntryInput input object.
-}
type alias DeleteIpAllowListEntryInput =
    { ipAllowListEntryId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteIpAllowListEntryInput into a value that can be used as an argument.
-}
encodeDeleteIpAllowListEntryInput : DeleteIpAllowListEntryInput -> Value
encodeDeleteIpAllowListEntryInput input____ =
    Encode.maybeObject
        [ ( "ipAllowListEntryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.ipAllowListEntryId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDeleteIssueCommentInput :
    DeleteIssueCommentInputRequiredFields
    -> (DeleteIssueCommentInputOptionalFields -> DeleteIssueCommentInputOptionalFields)
    -> DeleteIssueCommentInput
buildDeleteIssueCommentInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { id = required____.id, clientMutationId = optionals____.clientMutationId }


type alias DeleteIssueCommentInputRequiredFields =
    { id : Github.ScalarCodecs.Id }


type alias DeleteIssueCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteIssueCommentInput input object.
-}
type alias DeleteIssueCommentInput =
    { id : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteIssueCommentInput into a value that can be used as an argument.
-}
encodeDeleteIssueCommentInput : DeleteIssueCommentInput -> Value
encodeDeleteIssueCommentInput input____ =
    Encode.maybeObject
        [ ( "id", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDeleteIssueInput :
    DeleteIssueInputRequiredFields
    -> (DeleteIssueInputOptionalFields -> DeleteIssueInputOptionalFields)
    -> DeleteIssueInput
buildDeleteIssueInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { issueId = required____.issueId, clientMutationId = optionals____.clientMutationId }


type alias DeleteIssueInputRequiredFields =
    { issueId : Github.ScalarCodecs.Id }


type alias DeleteIssueInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteIssueInput input object.
-}
type alias DeleteIssueInput =
    { issueId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteIssueInput into a value that can be used as an argument.
-}
encodeDeleteIssueInput : DeleteIssueInput -> Value
encodeDeleteIssueInput input____ =
    Encode.maybeObject
        [ ( "issueId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.issueId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDeleteLinkedBranchInput :
    DeleteLinkedBranchInputRequiredFields
    -> (DeleteLinkedBranchInputOptionalFields -> DeleteLinkedBranchInputOptionalFields)
    -> DeleteLinkedBranchInput
buildDeleteLinkedBranchInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { linkedBranchId = required____.linkedBranchId, clientMutationId = optionals____.clientMutationId }


type alias DeleteLinkedBranchInputRequiredFields =
    { linkedBranchId : Github.ScalarCodecs.Id }


type alias DeleteLinkedBranchInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteLinkedBranchInput input object.
-}
type alias DeleteLinkedBranchInput =
    { linkedBranchId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteLinkedBranchInput into a value that can be used as an argument.
-}
encodeDeleteLinkedBranchInput : DeleteLinkedBranchInput -> Value
encodeDeleteLinkedBranchInput input____ =
    Encode.maybeObject
        [ ( "linkedBranchId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.linkedBranchId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDeleteProjectCardInput :
    DeleteProjectCardInputRequiredFields
    -> (DeleteProjectCardInputOptionalFields -> DeleteProjectCardInputOptionalFields)
    -> DeleteProjectCardInput
buildDeleteProjectCardInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { cardId = required____.cardId, clientMutationId = optionals____.clientMutationId }


type alias DeleteProjectCardInputRequiredFields =
    { cardId : Github.ScalarCodecs.Id }


type alias DeleteProjectCardInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteProjectCardInput input object.
-}
type alias DeleteProjectCardInput =
    { cardId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteProjectCardInput into a value that can be used as an argument.
-}
encodeDeleteProjectCardInput : DeleteProjectCardInput -> Value
encodeDeleteProjectCardInput input____ =
    Encode.maybeObject
        [ ( "cardId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.cardId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDeleteProjectColumnInput :
    DeleteProjectColumnInputRequiredFields
    -> (DeleteProjectColumnInputOptionalFields -> DeleteProjectColumnInputOptionalFields)
    -> DeleteProjectColumnInput
buildDeleteProjectColumnInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { columnId = required____.columnId, clientMutationId = optionals____.clientMutationId }


type alias DeleteProjectColumnInputRequiredFields =
    { columnId : Github.ScalarCodecs.Id }


type alias DeleteProjectColumnInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteProjectColumnInput input object.
-}
type alias DeleteProjectColumnInput =
    { columnId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteProjectColumnInput into a value that can be used as an argument.
-}
encodeDeleteProjectColumnInput : DeleteProjectColumnInput -> Value
encodeDeleteProjectColumnInput input____ =
    Encode.maybeObject
        [ ( "columnId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.columnId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDeleteProjectInput :
    DeleteProjectInputRequiredFields
    -> (DeleteProjectInputOptionalFields -> DeleteProjectInputOptionalFields)
    -> DeleteProjectInput
buildDeleteProjectInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { projectId = required____.projectId, clientMutationId = optionals____.clientMutationId }


type alias DeleteProjectInputRequiredFields =
    { projectId : Github.ScalarCodecs.Id }


type alias DeleteProjectInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteProjectInput input object.
-}
type alias DeleteProjectInput =
    { projectId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteProjectInput into a value that can be used as an argument.
-}
encodeDeleteProjectInput : DeleteProjectInput -> Value
encodeDeleteProjectInput input____ =
    Encode.maybeObject
        [ ( "projectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.projectId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDeleteProjectNextItemInput :
    (DeleteProjectNextItemInputOptionalFields -> DeleteProjectNextItemInputOptionalFields)
    -> DeleteProjectNextItemInput
buildDeleteProjectNextItemInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { projectId = Absent, itemId = Absent, clientMutationId = Absent }
    in
    { projectId = optionals____.projectId, itemId = optionals____.itemId, clientMutationId = optionals____.clientMutationId }


type alias DeleteProjectNextItemInputOptionalFields =
    { projectId : OptionalArgument Github.ScalarCodecs.Id
    , itemId : OptionalArgument Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the DeleteProjectNextItemInput input object.
-}
type alias DeleteProjectNextItemInput =
    { projectId : OptionalArgument Github.ScalarCodecs.Id
    , itemId : OptionalArgument Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteProjectNextItemInput into a value that can be used as an argument.
-}
encodeDeleteProjectNextItemInput : DeleteProjectNextItemInput -> Value
encodeDeleteProjectNextItemInput input____ =
    Encode.maybeObject
        [ ( "projectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.projectId ), ( "itemId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.itemId ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDeleteProjectV2ItemInput :
    DeleteProjectV2ItemInputRequiredFields
    -> (DeleteProjectV2ItemInputOptionalFields -> DeleteProjectV2ItemInputOptionalFields)
    -> DeleteProjectV2ItemInput
buildDeleteProjectV2ItemInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { projectId = required____.projectId, itemId = required____.itemId, clientMutationId = optionals____.clientMutationId }


type alias DeleteProjectV2ItemInputRequiredFields =
    { projectId : Github.ScalarCodecs.Id
    , itemId : Github.ScalarCodecs.Id
    }


type alias DeleteProjectV2ItemInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteProjectV2ItemInput input object.
-}
type alias DeleteProjectV2ItemInput =
    { projectId : Github.ScalarCodecs.Id
    , itemId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteProjectV2ItemInput into a value that can be used as an argument.
-}
encodeDeleteProjectV2ItemInput : DeleteProjectV2ItemInput -> Value
encodeDeleteProjectV2ItemInput input____ =
    Encode.maybeObject
        [ ( "projectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.projectId |> Just ), ( "itemId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.itemId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDeletePullRequestReviewCommentInput :
    DeletePullRequestReviewCommentInputRequiredFields
    -> (DeletePullRequestReviewCommentInputOptionalFields -> DeletePullRequestReviewCommentInputOptionalFields)
    -> DeletePullRequestReviewCommentInput
buildDeletePullRequestReviewCommentInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { id = required____.id, clientMutationId = optionals____.clientMutationId }


type alias DeletePullRequestReviewCommentInputRequiredFields =
    { id : Github.ScalarCodecs.Id }


type alias DeletePullRequestReviewCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeletePullRequestReviewCommentInput input object.
-}
type alias DeletePullRequestReviewCommentInput =
    { id : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeletePullRequestReviewCommentInput into a value that can be used as an argument.
-}
encodeDeletePullRequestReviewCommentInput : DeletePullRequestReviewCommentInput -> Value
encodeDeletePullRequestReviewCommentInput input____ =
    Encode.maybeObject
        [ ( "id", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDeletePullRequestReviewInput :
    DeletePullRequestReviewInputRequiredFields
    -> (DeletePullRequestReviewInputOptionalFields -> DeletePullRequestReviewInputOptionalFields)
    -> DeletePullRequestReviewInput
buildDeletePullRequestReviewInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { pullRequestReviewId = required____.pullRequestReviewId, clientMutationId = optionals____.clientMutationId }


type alias DeletePullRequestReviewInputRequiredFields =
    { pullRequestReviewId : Github.ScalarCodecs.Id }


type alias DeletePullRequestReviewInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeletePullRequestReviewInput input object.
-}
type alias DeletePullRequestReviewInput =
    { pullRequestReviewId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeletePullRequestReviewInput into a value that can be used as an argument.
-}
encodeDeletePullRequestReviewInput : DeletePullRequestReviewInput -> Value
encodeDeletePullRequestReviewInput input____ =
    Encode.maybeObject
        [ ( "pullRequestReviewId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.pullRequestReviewId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDeleteRefInput :
    DeleteRefInputRequiredFields
    -> (DeleteRefInputOptionalFields -> DeleteRefInputOptionalFields)
    -> DeleteRefInput
buildDeleteRefInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { refId = required____.refId, clientMutationId = optionals____.clientMutationId }


type alias DeleteRefInputRequiredFields =
    { refId : Github.ScalarCodecs.Id }


type alias DeleteRefInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteRefInput input object.
-}
type alias DeleteRefInput =
    { refId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteRefInput into a value that can be used as an argument.
-}
encodeDeleteRefInput : DeleteRefInput -> Value
encodeDeleteRefInput input____ =
    Encode.maybeObject
        [ ( "refId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.refId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDeleteTeamDiscussionCommentInput :
    DeleteTeamDiscussionCommentInputRequiredFields
    -> (DeleteTeamDiscussionCommentInputOptionalFields -> DeleteTeamDiscussionCommentInputOptionalFields)
    -> DeleteTeamDiscussionCommentInput
buildDeleteTeamDiscussionCommentInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { id = required____.id, clientMutationId = optionals____.clientMutationId }


type alias DeleteTeamDiscussionCommentInputRequiredFields =
    { id : Github.ScalarCodecs.Id }


type alias DeleteTeamDiscussionCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteTeamDiscussionCommentInput input object.
-}
type alias DeleteTeamDiscussionCommentInput =
    { id : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteTeamDiscussionCommentInput into a value that can be used as an argument.
-}
encodeDeleteTeamDiscussionCommentInput : DeleteTeamDiscussionCommentInput -> Value
encodeDeleteTeamDiscussionCommentInput input____ =
    Encode.maybeObject
        [ ( "id", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDeleteTeamDiscussionInput :
    DeleteTeamDiscussionInputRequiredFields
    -> (DeleteTeamDiscussionInputOptionalFields -> DeleteTeamDiscussionInputOptionalFields)
    -> DeleteTeamDiscussionInput
buildDeleteTeamDiscussionInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { id = required____.id, clientMutationId = optionals____.clientMutationId }


type alias DeleteTeamDiscussionInputRequiredFields =
    { id : Github.ScalarCodecs.Id }


type alias DeleteTeamDiscussionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteTeamDiscussionInput input object.
-}
type alias DeleteTeamDiscussionInput =
    { id : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteTeamDiscussionInput into a value that can be used as an argument.
-}
encodeDeleteTeamDiscussionInput : DeleteTeamDiscussionInput -> Value
encodeDeleteTeamDiscussionInput input____ =
    Encode.maybeObject
        [ ( "id", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDeleteVerifiableDomainInput :
    DeleteVerifiableDomainInputRequiredFields
    -> (DeleteVerifiableDomainInputOptionalFields -> DeleteVerifiableDomainInputOptionalFields)
    -> DeleteVerifiableDomainInput
buildDeleteVerifiableDomainInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { id = required____.id, clientMutationId = optionals____.clientMutationId }


type alias DeleteVerifiableDomainInputRequiredFields =
    { id : Github.ScalarCodecs.Id }


type alias DeleteVerifiableDomainInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DeleteVerifiableDomainInput input object.
-}
type alias DeleteVerifiableDomainInput =
    { id : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DeleteVerifiableDomainInput into a value that can be used as an argument.
-}
encodeDeleteVerifiableDomainInput : DeleteVerifiableDomainInput -> Value
encodeDeleteVerifiableDomainInput input____ =
    Encode.maybeObject
        [ ( "id", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDeploymentOrder :
    DeploymentOrderRequiredFields
    -> DeploymentOrder
buildDeploymentOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias DeploymentOrderRequiredFields =
    { field : Github.Enum.DeploymentOrderField.DeploymentOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the DeploymentOrder input object.
-}
type alias DeploymentOrder =
    { field : Github.Enum.DeploymentOrderField.DeploymentOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a DeploymentOrder into a value that can be used as an argument.
-}
encodeDeploymentOrder : DeploymentOrder -> Value
encodeDeploymentOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.DeploymentOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildDisablePullRequestAutoMergeInput :
    DisablePullRequestAutoMergeInputRequiredFields
    -> (DisablePullRequestAutoMergeInputOptionalFields -> DisablePullRequestAutoMergeInputOptionalFields)
    -> DisablePullRequestAutoMergeInput
buildDisablePullRequestAutoMergeInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { pullRequestId = required____.pullRequestId, clientMutationId = optionals____.clientMutationId }


type alias DisablePullRequestAutoMergeInputRequiredFields =
    { pullRequestId : Github.ScalarCodecs.Id }


type alias DisablePullRequestAutoMergeInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DisablePullRequestAutoMergeInput input object.
-}
type alias DisablePullRequestAutoMergeInput =
    { pullRequestId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DisablePullRequestAutoMergeInput into a value that can be used as an argument.
-}
encodeDisablePullRequestAutoMergeInput : DisablePullRequestAutoMergeInput -> Value
encodeDisablePullRequestAutoMergeInput input____ =
    Encode.maybeObject
        [ ( "pullRequestId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.pullRequestId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDiscussionOrder :
    DiscussionOrderRequiredFields
    -> DiscussionOrder
buildDiscussionOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias DiscussionOrderRequiredFields =
    { field : Github.Enum.DiscussionOrderField.DiscussionOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the DiscussionOrder input object.
-}
type alias DiscussionOrder =
    { field : Github.Enum.DiscussionOrderField.DiscussionOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a DiscussionOrder into a value that can be used as an argument.
-}
encodeDiscussionOrder : DiscussionOrder -> Value
encodeDiscussionOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.DiscussionOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildDiscussionPollOptionOrder :
    DiscussionPollOptionOrderRequiredFields
    -> DiscussionPollOptionOrder
buildDiscussionPollOptionOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias DiscussionPollOptionOrderRequiredFields =
    { field : Github.Enum.DiscussionPollOptionOrderField.DiscussionPollOptionOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the DiscussionPollOptionOrder input object.
-}
type alias DiscussionPollOptionOrder =
    { field : Github.Enum.DiscussionPollOptionOrderField.DiscussionPollOptionOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a DiscussionPollOptionOrder into a value that can be used as an argument.
-}
encodeDiscussionPollOptionOrder : DiscussionPollOptionOrder -> Value
encodeDiscussionPollOptionOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.DiscussionPollOptionOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildDismissPullRequestReviewInput :
    DismissPullRequestReviewInputRequiredFields
    -> (DismissPullRequestReviewInputOptionalFields -> DismissPullRequestReviewInputOptionalFields)
    -> DismissPullRequestReviewInput
buildDismissPullRequestReviewInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { pullRequestReviewId = required____.pullRequestReviewId, message = required____.message, clientMutationId = optionals____.clientMutationId }


type alias DismissPullRequestReviewInputRequiredFields =
    { pullRequestReviewId : Github.ScalarCodecs.Id
    , message : String
    }


type alias DismissPullRequestReviewInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DismissPullRequestReviewInput input object.
-}
type alias DismissPullRequestReviewInput =
    { pullRequestReviewId : Github.ScalarCodecs.Id
    , message : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DismissPullRequestReviewInput into a value that can be used as an argument.
-}
encodeDismissPullRequestReviewInput : DismissPullRequestReviewInput -> Value
encodeDismissPullRequestReviewInput input____ =
    Encode.maybeObject
        [ ( "pullRequestReviewId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.pullRequestReviewId |> Just ), ( "message", Encode.string input____.message |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDismissRepositoryVulnerabilityAlertInput :
    DismissRepositoryVulnerabilityAlertInputRequiredFields
    -> (DismissRepositoryVulnerabilityAlertInputOptionalFields -> DismissRepositoryVulnerabilityAlertInputOptionalFields)
    -> DismissRepositoryVulnerabilityAlertInput
buildDismissRepositoryVulnerabilityAlertInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { repositoryVulnerabilityAlertId = required____.repositoryVulnerabilityAlertId, dismissReason = required____.dismissReason, clientMutationId = optionals____.clientMutationId }


type alias DismissRepositoryVulnerabilityAlertInputRequiredFields =
    { repositoryVulnerabilityAlertId : Github.ScalarCodecs.Id
    , dismissReason : Github.Enum.DismissReason.DismissReason
    }


type alias DismissRepositoryVulnerabilityAlertInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the DismissRepositoryVulnerabilityAlertInput input object.
-}
type alias DismissRepositoryVulnerabilityAlertInput =
    { repositoryVulnerabilityAlertId : Github.ScalarCodecs.Id
    , dismissReason : Github.Enum.DismissReason.DismissReason
    , clientMutationId : OptionalArgument String
    }


{-| Encode a DismissRepositoryVulnerabilityAlertInput into a value that can be used as an argument.
-}
encodeDismissRepositoryVulnerabilityAlertInput : DismissRepositoryVulnerabilityAlertInput -> Value
encodeDismissRepositoryVulnerabilityAlertInput input____ =
    Encode.maybeObject
        [ ( "repositoryVulnerabilityAlertId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryVulnerabilityAlertId |> Just ), ( "dismissReason", Encode.enum Github.Enum.DismissReason.toString input____.dismissReason |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildDraftPullRequestReviewComment :
    DraftPullRequestReviewCommentRequiredFields
    -> DraftPullRequestReviewComment
buildDraftPullRequestReviewComment required____ =
    { path = required____.path, position = required____.position, body = required____.body }


type alias DraftPullRequestReviewCommentRequiredFields =
    { path : String
    , position : Int
    , body : String
    }


{-| Type for the DraftPullRequestReviewComment input object.
-}
type alias DraftPullRequestReviewComment =
    { path : String
    , position : Int
    , body : String
    }


{-| Encode a DraftPullRequestReviewComment into a value that can be used as an argument.
-}
encodeDraftPullRequestReviewComment : DraftPullRequestReviewComment -> Value
encodeDraftPullRequestReviewComment input____ =
    Encode.maybeObject
        [ ( "path", Encode.string input____.path |> Just ), ( "position", Encode.int input____.position |> Just ), ( "body", Encode.string input____.body |> Just ) ]


buildDraftPullRequestReviewThread :
    DraftPullRequestReviewThreadRequiredFields
    -> (DraftPullRequestReviewThreadOptionalFields -> DraftPullRequestReviewThreadOptionalFields)
    -> DraftPullRequestReviewThread
buildDraftPullRequestReviewThread required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { side = Absent, startLine = Absent, startSide = Absent }
    in
    { path = required____.path, line = required____.line, side = optionals____.side, startLine = optionals____.startLine, startSide = optionals____.startSide, body = required____.body }


type alias DraftPullRequestReviewThreadRequiredFields =
    { path : String
    , line : Int
    , body : String
    }


type alias DraftPullRequestReviewThreadOptionalFields =
    { side : OptionalArgument Github.Enum.DiffSide.DiffSide
    , startLine : OptionalArgument Int
    , startSide : OptionalArgument Github.Enum.DiffSide.DiffSide
    }


{-| Type for the DraftPullRequestReviewThread input object.
-}
type alias DraftPullRequestReviewThread =
    { path : String
    , line : Int
    , side : OptionalArgument Github.Enum.DiffSide.DiffSide
    , startLine : OptionalArgument Int
    , startSide : OptionalArgument Github.Enum.DiffSide.DiffSide
    , body : String
    }


{-| Encode a DraftPullRequestReviewThread into a value that can be used as an argument.
-}
encodeDraftPullRequestReviewThread : DraftPullRequestReviewThread -> Value
encodeDraftPullRequestReviewThread input____ =
    Encode.maybeObject
        [ ( "path", Encode.string input____.path |> Just ), ( "line", Encode.int input____.line |> Just ), ( "side", Encode.enum Github.Enum.DiffSide.toString |> Encode.optional input____.side ), ( "startLine", Encode.int |> Encode.optional input____.startLine ), ( "startSide", Encode.enum Github.Enum.DiffSide.toString |> Encode.optional input____.startSide ), ( "body", Encode.string input____.body |> Just ) ]


buildEnablePullRequestAutoMergeInput :
    EnablePullRequestAutoMergeInputRequiredFields
    -> (EnablePullRequestAutoMergeInputOptionalFields -> EnablePullRequestAutoMergeInputOptionalFields)
    -> EnablePullRequestAutoMergeInput
buildEnablePullRequestAutoMergeInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { commitHeadline = Absent, commitBody = Absent, mergeMethod = Absent, authorEmail = Absent, clientMutationId = Absent }
    in
    { pullRequestId = required____.pullRequestId, commitHeadline = optionals____.commitHeadline, commitBody = optionals____.commitBody, mergeMethod = optionals____.mergeMethod, authorEmail = optionals____.authorEmail, clientMutationId = optionals____.clientMutationId }


type alias EnablePullRequestAutoMergeInputRequiredFields =
    { pullRequestId : Github.ScalarCodecs.Id }


type alias EnablePullRequestAutoMergeInputOptionalFields =
    { commitHeadline : OptionalArgument String
    , commitBody : OptionalArgument String
    , mergeMethod : OptionalArgument Github.Enum.PullRequestMergeMethod.PullRequestMergeMethod
    , authorEmail : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the EnablePullRequestAutoMergeInput input object.
-}
type alias EnablePullRequestAutoMergeInput =
    { pullRequestId : Github.ScalarCodecs.Id
    , commitHeadline : OptionalArgument String
    , commitBody : OptionalArgument String
    , mergeMethod : OptionalArgument Github.Enum.PullRequestMergeMethod.PullRequestMergeMethod
    , authorEmail : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a EnablePullRequestAutoMergeInput into a value that can be used as an argument.
-}
encodeEnablePullRequestAutoMergeInput : EnablePullRequestAutoMergeInput -> Value
encodeEnablePullRequestAutoMergeInput input____ =
    Encode.maybeObject
        [ ( "pullRequestId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.pullRequestId |> Just ), ( "commitHeadline", Encode.string |> Encode.optional input____.commitHeadline ), ( "commitBody", Encode.string |> Encode.optional input____.commitBody ), ( "mergeMethod", Encode.enum Github.Enum.PullRequestMergeMethod.toString |> Encode.optional input____.mergeMethod ), ( "authorEmail", Encode.string |> Encode.optional input____.authorEmail ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildEnterpriseAdministratorInvitationOrder :
    EnterpriseAdministratorInvitationOrderRequiredFields
    -> EnterpriseAdministratorInvitationOrder
buildEnterpriseAdministratorInvitationOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias EnterpriseAdministratorInvitationOrderRequiredFields =
    { field : Github.Enum.EnterpriseAdministratorInvitationOrderField.EnterpriseAdministratorInvitationOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the EnterpriseAdministratorInvitationOrder input object.
-}
type alias EnterpriseAdministratorInvitationOrder =
    { field : Github.Enum.EnterpriseAdministratorInvitationOrderField.EnterpriseAdministratorInvitationOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a EnterpriseAdministratorInvitationOrder into a value that can be used as an argument.
-}
encodeEnterpriseAdministratorInvitationOrder : EnterpriseAdministratorInvitationOrder -> Value
encodeEnterpriseAdministratorInvitationOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.EnterpriseAdministratorInvitationOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildEnterpriseMemberOrder :
    EnterpriseMemberOrderRequiredFields
    -> EnterpriseMemberOrder
buildEnterpriseMemberOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias EnterpriseMemberOrderRequiredFields =
    { field : Github.Enum.EnterpriseMemberOrderField.EnterpriseMemberOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the EnterpriseMemberOrder input object.
-}
type alias EnterpriseMemberOrder =
    { field : Github.Enum.EnterpriseMemberOrderField.EnterpriseMemberOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a EnterpriseMemberOrder into a value that can be used as an argument.
-}
encodeEnterpriseMemberOrder : EnterpriseMemberOrder -> Value
encodeEnterpriseMemberOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.EnterpriseMemberOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildEnterpriseServerInstallationOrder :
    EnterpriseServerInstallationOrderRequiredFields
    -> EnterpriseServerInstallationOrder
buildEnterpriseServerInstallationOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias EnterpriseServerInstallationOrderRequiredFields =
    { field : Github.Enum.EnterpriseServerInstallationOrderField.EnterpriseServerInstallationOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the EnterpriseServerInstallationOrder input object.
-}
type alias EnterpriseServerInstallationOrder =
    { field : Github.Enum.EnterpriseServerInstallationOrderField.EnterpriseServerInstallationOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a EnterpriseServerInstallationOrder into a value that can be used as an argument.
-}
encodeEnterpriseServerInstallationOrder : EnterpriseServerInstallationOrder -> Value
encodeEnterpriseServerInstallationOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.EnterpriseServerInstallationOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildEnterpriseServerUserAccountEmailOrder :
    EnterpriseServerUserAccountEmailOrderRequiredFields
    -> EnterpriseServerUserAccountEmailOrder
buildEnterpriseServerUserAccountEmailOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias EnterpriseServerUserAccountEmailOrderRequiredFields =
    { field : Github.Enum.EnterpriseServerUserAccountEmailOrderField.EnterpriseServerUserAccountEmailOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the EnterpriseServerUserAccountEmailOrder input object.
-}
type alias EnterpriseServerUserAccountEmailOrder =
    { field : Github.Enum.EnterpriseServerUserAccountEmailOrderField.EnterpriseServerUserAccountEmailOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a EnterpriseServerUserAccountEmailOrder into a value that can be used as an argument.
-}
encodeEnterpriseServerUserAccountEmailOrder : EnterpriseServerUserAccountEmailOrder -> Value
encodeEnterpriseServerUserAccountEmailOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.EnterpriseServerUserAccountEmailOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildEnterpriseServerUserAccountOrder :
    EnterpriseServerUserAccountOrderRequiredFields
    -> EnterpriseServerUserAccountOrder
buildEnterpriseServerUserAccountOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias EnterpriseServerUserAccountOrderRequiredFields =
    { field : Github.Enum.EnterpriseServerUserAccountOrderField.EnterpriseServerUserAccountOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the EnterpriseServerUserAccountOrder input object.
-}
type alias EnterpriseServerUserAccountOrder =
    { field : Github.Enum.EnterpriseServerUserAccountOrderField.EnterpriseServerUserAccountOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a EnterpriseServerUserAccountOrder into a value that can be used as an argument.
-}
encodeEnterpriseServerUserAccountOrder : EnterpriseServerUserAccountOrder -> Value
encodeEnterpriseServerUserAccountOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.EnterpriseServerUserAccountOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildEnterpriseServerUserAccountsUploadOrder :
    EnterpriseServerUserAccountsUploadOrderRequiredFields
    -> EnterpriseServerUserAccountsUploadOrder
buildEnterpriseServerUserAccountsUploadOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias EnterpriseServerUserAccountsUploadOrderRequiredFields =
    { field : Github.Enum.EnterpriseServerUserAccountsUploadOrderField.EnterpriseServerUserAccountsUploadOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the EnterpriseServerUserAccountsUploadOrder input object.
-}
type alias EnterpriseServerUserAccountsUploadOrder =
    { field : Github.Enum.EnterpriseServerUserAccountsUploadOrderField.EnterpriseServerUserAccountsUploadOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a EnterpriseServerUserAccountsUploadOrder into a value that can be used as an argument.
-}
encodeEnterpriseServerUserAccountsUploadOrder : EnterpriseServerUserAccountsUploadOrder -> Value
encodeEnterpriseServerUserAccountsUploadOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.EnterpriseServerUserAccountsUploadOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildFileAddition :
    FileAdditionRequiredFields
    -> FileAddition
buildFileAddition required____ =
    { path = required____.path, contents = required____.contents }


type alias FileAdditionRequiredFields =
    { path : String
    , contents : Github.ScalarCodecs.Base64String
    }


{-| Type for the FileAddition input object.
-}
type alias FileAddition =
    { path : String
    , contents : Github.ScalarCodecs.Base64String
    }


{-| Encode a FileAddition into a value that can be used as an argument.
-}
encodeFileAddition : FileAddition -> Value
encodeFileAddition input____ =
    Encode.maybeObject
        [ ( "path", Encode.string input____.path |> Just ), ( "contents", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecBase64String) input____.contents |> Just ) ]


buildFileChanges :
    (FileChangesOptionalFields -> FileChangesOptionalFields)
    -> FileChanges
buildFileChanges fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { deletions = Absent, additions = Absent }
    in
    { deletions = optionals____.deletions, additions = optionals____.additions }


type alias FileChangesOptionalFields =
    { deletions : OptionalArgument (List FileDeletion)
    , additions : OptionalArgument (List FileAddition)
    }


{-| Type for the FileChanges input object.
-}
type alias FileChanges =
    { deletions : OptionalArgument (List FileDeletion)
    , additions : OptionalArgument (List FileAddition)
    }


{-| Encode a FileChanges into a value that can be used as an argument.
-}
encodeFileChanges : FileChanges -> Value
encodeFileChanges input____ =
    Encode.maybeObject
        [ ( "deletions", (encodeFileDeletion |> Encode.list) |> Encode.optional input____.deletions ), ( "additions", (encodeFileAddition |> Encode.list) |> Encode.optional input____.additions ) ]


buildFileDeletion :
    FileDeletionRequiredFields
    -> FileDeletion
buildFileDeletion required____ =
    { path = required____.path }


type alias FileDeletionRequiredFields =
    { path : String }


{-| Type for the FileDeletion input object.
-}
type alias FileDeletion =
    { path : String }


{-| Encode a FileDeletion into a value that can be used as an argument.
-}
encodeFileDeletion : FileDeletion -> Value
encodeFileDeletion input____ =
    Encode.maybeObject
        [ ( "path", Encode.string input____.path |> Just ) ]


buildFollowOrganizationInput :
    FollowOrganizationInputRequiredFields
    -> (FollowOrganizationInputOptionalFields -> FollowOrganizationInputOptionalFields)
    -> FollowOrganizationInput
buildFollowOrganizationInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { organizationId = required____.organizationId, clientMutationId = optionals____.clientMutationId }


type alias FollowOrganizationInputRequiredFields =
    { organizationId : Github.ScalarCodecs.Id }


type alias FollowOrganizationInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the FollowOrganizationInput input object.
-}
type alias FollowOrganizationInput =
    { organizationId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a FollowOrganizationInput into a value that can be used as an argument.
-}
encodeFollowOrganizationInput : FollowOrganizationInput -> Value
encodeFollowOrganizationInput input____ =
    Encode.maybeObject
        [ ( "organizationId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.organizationId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildFollowUserInput :
    FollowUserInputRequiredFields
    -> (FollowUserInputOptionalFields -> FollowUserInputOptionalFields)
    -> FollowUserInput
buildFollowUserInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { userId = required____.userId, clientMutationId = optionals____.clientMutationId }


type alias FollowUserInputRequiredFields =
    { userId : Github.ScalarCodecs.Id }


type alias FollowUserInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the FollowUserInput input object.
-}
type alias FollowUserInput =
    { userId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a FollowUserInput into a value that can be used as an argument.
-}
encodeFollowUserInput : FollowUserInput -> Value
encodeFollowUserInput input____ =
    Encode.maybeObject
        [ ( "userId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.userId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildGistOrder :
    GistOrderRequiredFields
    -> GistOrder
buildGistOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias GistOrderRequiredFields =
    { field : Github.Enum.GistOrderField.GistOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the GistOrder input object.
-}
type alias GistOrder =
    { field : Github.Enum.GistOrderField.GistOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a GistOrder into a value that can be used as an argument.
-}
encodeGistOrder : GistOrder -> Value
encodeGistOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.GistOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildGrantEnterpriseOrganizationsMigratorRoleInput :
    GrantEnterpriseOrganizationsMigratorRoleInputRequiredFields
    -> (GrantEnterpriseOrganizationsMigratorRoleInputOptionalFields -> GrantEnterpriseOrganizationsMigratorRoleInputOptionalFields)
    -> GrantEnterpriseOrganizationsMigratorRoleInput
buildGrantEnterpriseOrganizationsMigratorRoleInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, login = required____.login, clientMutationId = optionals____.clientMutationId }


type alias GrantEnterpriseOrganizationsMigratorRoleInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , login : String
    }


type alias GrantEnterpriseOrganizationsMigratorRoleInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the GrantEnterpriseOrganizationsMigratorRoleInput input object.
-}
type alias GrantEnterpriseOrganizationsMigratorRoleInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , login : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a GrantEnterpriseOrganizationsMigratorRoleInput into a value that can be used as an argument.
-}
encodeGrantEnterpriseOrganizationsMigratorRoleInput : GrantEnterpriseOrganizationsMigratorRoleInput -> Value
encodeGrantEnterpriseOrganizationsMigratorRoleInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "login", Encode.string input____.login |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildGrantMigratorRoleInput :
    GrantMigratorRoleInputRequiredFields
    -> (GrantMigratorRoleInputOptionalFields -> GrantMigratorRoleInputOptionalFields)
    -> GrantMigratorRoleInput
buildGrantMigratorRoleInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { organizationId = required____.organizationId, actor = required____.actor, actorType = required____.actorType, clientMutationId = optionals____.clientMutationId }


type alias GrantMigratorRoleInputRequiredFields =
    { organizationId : Github.ScalarCodecs.Id
    , actor : String
    , actorType : Github.Enum.ActorType.ActorType
    }


type alias GrantMigratorRoleInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the GrantMigratorRoleInput input object.
-}
type alias GrantMigratorRoleInput =
    { organizationId : Github.ScalarCodecs.Id
    , actor : String
    , actorType : Github.Enum.ActorType.ActorType
    , clientMutationId : OptionalArgument String
    }


{-| Encode a GrantMigratorRoleInput into a value that can be used as an argument.
-}
encodeGrantMigratorRoleInput : GrantMigratorRoleInput -> Value
encodeGrantMigratorRoleInput input____ =
    Encode.maybeObject
        [ ( "organizationId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.organizationId |> Just ), ( "actor", Encode.string input____.actor |> Just ), ( "actorType", Encode.enum Github.Enum.ActorType.toString input____.actorType |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildInviteEnterpriseAdminInput :
    InviteEnterpriseAdminInputRequiredFields
    -> (InviteEnterpriseAdminInputOptionalFields -> InviteEnterpriseAdminInputOptionalFields)
    -> InviteEnterpriseAdminInput
buildInviteEnterpriseAdminInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { invitee = Absent, email = Absent, role = Absent, clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, invitee = optionals____.invitee, email = optionals____.email, role = optionals____.role, clientMutationId = optionals____.clientMutationId }


type alias InviteEnterpriseAdminInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id }


type alias InviteEnterpriseAdminInputOptionalFields =
    { invitee : OptionalArgument String
    , email : OptionalArgument String
    , role : OptionalArgument Github.Enum.EnterpriseAdministratorRole.EnterpriseAdministratorRole
    , clientMutationId : OptionalArgument String
    }


{-| Type for the InviteEnterpriseAdminInput input object.
-}
type alias InviteEnterpriseAdminInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , invitee : OptionalArgument String
    , email : OptionalArgument String
    , role : OptionalArgument Github.Enum.EnterpriseAdministratorRole.EnterpriseAdministratorRole
    , clientMutationId : OptionalArgument String
    }


{-| Encode a InviteEnterpriseAdminInput into a value that can be used as an argument.
-}
encodeInviteEnterpriseAdminInput : InviteEnterpriseAdminInput -> Value
encodeInviteEnterpriseAdminInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "invitee", Encode.string |> Encode.optional input____.invitee ), ( "email", Encode.string |> Encode.optional input____.email ), ( "role", Encode.enum Github.Enum.EnterpriseAdministratorRole.toString |> Encode.optional input____.role ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildIpAllowListEntryOrder :
    IpAllowListEntryOrderRequiredFields
    -> IpAllowListEntryOrder
buildIpAllowListEntryOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias IpAllowListEntryOrderRequiredFields =
    { field : Github.Enum.IpAllowListEntryOrderField.IpAllowListEntryOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the IpAllowListEntryOrder input object.
-}
type alias IpAllowListEntryOrder =
    { field : Github.Enum.IpAllowListEntryOrderField.IpAllowListEntryOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a IpAllowListEntryOrder into a value that can be used as an argument.
-}
encodeIpAllowListEntryOrder : IpAllowListEntryOrder -> Value
encodeIpAllowListEntryOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.IpAllowListEntryOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildIssueCommentOrder :
    IssueCommentOrderRequiredFields
    -> IssueCommentOrder
buildIssueCommentOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias IssueCommentOrderRequiredFields =
    { field : Github.Enum.IssueCommentOrderField.IssueCommentOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the IssueCommentOrder input object.
-}
type alias IssueCommentOrder =
    { field : Github.Enum.IssueCommentOrderField.IssueCommentOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a IssueCommentOrder into a value that can be used as an argument.
-}
encodeIssueCommentOrder : IssueCommentOrder -> Value
encodeIssueCommentOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.IssueCommentOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildIssueFilters :
    (IssueFiltersOptionalFields -> IssueFiltersOptionalFields)
    -> IssueFilters
buildIssueFilters fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { assignee = Absent, createdBy = Absent, labels = Absent, mentioned = Absent, milestone = Absent, milestoneNumber = Absent, since = Absent, states = Absent, viewerSubscribed = Absent }
    in
    { assignee = optionals____.assignee, createdBy = optionals____.createdBy, labels = optionals____.labels, mentioned = optionals____.mentioned, milestone = optionals____.milestone, milestoneNumber = optionals____.milestoneNumber, since = optionals____.since, states = optionals____.states, viewerSubscribed = optionals____.viewerSubscribed }


type alias IssueFiltersOptionalFields =
    { assignee : OptionalArgument String
    , createdBy : OptionalArgument String
    , labels : OptionalArgument (List String)
    , mentioned : OptionalArgument String
    , milestone : OptionalArgument String
    , milestoneNumber : OptionalArgument String
    , since : OptionalArgument Github.ScalarCodecs.DateTime
    , states : OptionalArgument (List Github.Enum.IssueState.IssueState)
    , viewerSubscribed : OptionalArgument Bool
    }


{-| Type for the IssueFilters input object.
-}
type alias IssueFilters =
    { assignee : OptionalArgument String
    , createdBy : OptionalArgument String
    , labels : OptionalArgument (List String)
    , mentioned : OptionalArgument String
    , milestone : OptionalArgument String
    , milestoneNumber : OptionalArgument String
    , since : OptionalArgument Github.ScalarCodecs.DateTime
    , states : OptionalArgument (List Github.Enum.IssueState.IssueState)
    , viewerSubscribed : OptionalArgument Bool
    }


{-| Encode a IssueFilters into a value that can be used as an argument.
-}
encodeIssueFilters : IssueFilters -> Value
encodeIssueFilters input____ =
    Encode.maybeObject
        [ ( "assignee", Encode.string |> Encode.optional input____.assignee ), ( "createdBy", Encode.string |> Encode.optional input____.createdBy ), ( "labels", (Encode.string |> Encode.list) |> Encode.optional input____.labels ), ( "mentioned", Encode.string |> Encode.optional input____.mentioned ), ( "milestone", Encode.string |> Encode.optional input____.milestone ), ( "milestoneNumber", Encode.string |> Encode.optional input____.milestoneNumber ), ( "since", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.since ), ( "states", (Encode.enum Github.Enum.IssueState.toString |> Encode.list) |> Encode.optional input____.states ), ( "viewerSubscribed", Encode.bool |> Encode.optional input____.viewerSubscribed ) ]


buildIssueOrder :
    IssueOrderRequiredFields
    -> IssueOrder
buildIssueOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias IssueOrderRequiredFields =
    { field : Github.Enum.IssueOrderField.IssueOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the IssueOrder input object.
-}
type alias IssueOrder =
    { field : Github.Enum.IssueOrderField.IssueOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a IssueOrder into a value that can be used as an argument.
-}
encodeIssueOrder : IssueOrder -> Value
encodeIssueOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.IssueOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildLabelOrder :
    LabelOrderRequiredFields
    -> LabelOrder
buildLabelOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias LabelOrderRequiredFields =
    { field : Github.Enum.LabelOrderField.LabelOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the LabelOrder input object.
-}
type alias LabelOrder =
    { field : Github.Enum.LabelOrderField.LabelOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a LabelOrder into a value that can be used as an argument.
-}
encodeLabelOrder : LabelOrder -> Value
encodeLabelOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.LabelOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildLanguageOrder :
    LanguageOrderRequiredFields
    -> LanguageOrder
buildLanguageOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias LanguageOrderRequiredFields =
    { field : Github.Enum.LanguageOrderField.LanguageOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the LanguageOrder input object.
-}
type alias LanguageOrder =
    { field : Github.Enum.LanguageOrderField.LanguageOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a LanguageOrder into a value that can be used as an argument.
-}
encodeLanguageOrder : LanguageOrder -> Value
encodeLanguageOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.LanguageOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildLinkRepositoryToProjectInput :
    LinkRepositoryToProjectInputRequiredFields
    -> (LinkRepositoryToProjectInputOptionalFields -> LinkRepositoryToProjectInputOptionalFields)
    -> LinkRepositoryToProjectInput
buildLinkRepositoryToProjectInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { projectId = required____.projectId, repositoryId = required____.repositoryId, clientMutationId = optionals____.clientMutationId }


type alias LinkRepositoryToProjectInputRequiredFields =
    { projectId : Github.ScalarCodecs.Id
    , repositoryId : Github.ScalarCodecs.Id
    }


type alias LinkRepositoryToProjectInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the LinkRepositoryToProjectInput input object.
-}
type alias LinkRepositoryToProjectInput =
    { projectId : Github.ScalarCodecs.Id
    , repositoryId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a LinkRepositoryToProjectInput into a value that can be used as an argument.
-}
encodeLinkRepositoryToProjectInput : LinkRepositoryToProjectInput -> Value
encodeLinkRepositoryToProjectInput input____ =
    Encode.maybeObject
        [ ( "projectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.projectId |> Just ), ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildLockLockableInput :
    LockLockableInputRequiredFields
    -> (LockLockableInputOptionalFields -> LockLockableInputOptionalFields)
    -> LockLockableInput
buildLockLockableInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { lockReason = Absent, clientMutationId = Absent }
    in
    { lockableId = required____.lockableId, lockReason = optionals____.lockReason, clientMutationId = optionals____.clientMutationId }


type alias LockLockableInputRequiredFields =
    { lockableId : Github.ScalarCodecs.Id }


type alias LockLockableInputOptionalFields =
    { lockReason : OptionalArgument Github.Enum.LockReason.LockReason
    , clientMutationId : OptionalArgument String
    }


{-| Type for the LockLockableInput input object.
-}
type alias LockLockableInput =
    { lockableId : Github.ScalarCodecs.Id
    , lockReason : OptionalArgument Github.Enum.LockReason.LockReason
    , clientMutationId : OptionalArgument String
    }


{-| Encode a LockLockableInput into a value that can be used as an argument.
-}
encodeLockLockableInput : LockLockableInput -> Value
encodeLockLockableInput input____ =
    Encode.maybeObject
        [ ( "lockableId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.lockableId |> Just ), ( "lockReason", Encode.enum Github.Enum.LockReason.toString |> Encode.optional input____.lockReason ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildMarkDiscussionCommentAsAnswerInput :
    MarkDiscussionCommentAsAnswerInputRequiredFields
    -> (MarkDiscussionCommentAsAnswerInputOptionalFields -> MarkDiscussionCommentAsAnswerInputOptionalFields)
    -> MarkDiscussionCommentAsAnswerInput
buildMarkDiscussionCommentAsAnswerInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { id = required____.id, clientMutationId = optionals____.clientMutationId }


type alias MarkDiscussionCommentAsAnswerInputRequiredFields =
    { id : Github.ScalarCodecs.Id }


type alias MarkDiscussionCommentAsAnswerInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the MarkDiscussionCommentAsAnswerInput input object.
-}
type alias MarkDiscussionCommentAsAnswerInput =
    { id : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a MarkDiscussionCommentAsAnswerInput into a value that can be used as an argument.
-}
encodeMarkDiscussionCommentAsAnswerInput : MarkDiscussionCommentAsAnswerInput -> Value
encodeMarkDiscussionCommentAsAnswerInput input____ =
    Encode.maybeObject
        [ ( "id", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildMarkFileAsViewedInput :
    MarkFileAsViewedInputRequiredFields
    -> (MarkFileAsViewedInputOptionalFields -> MarkFileAsViewedInputOptionalFields)
    -> MarkFileAsViewedInput
buildMarkFileAsViewedInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { pullRequestId = required____.pullRequestId, path = required____.path, clientMutationId = optionals____.clientMutationId }


type alias MarkFileAsViewedInputRequiredFields =
    { pullRequestId : Github.ScalarCodecs.Id
    , path : String
    }


type alias MarkFileAsViewedInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the MarkFileAsViewedInput input object.
-}
type alias MarkFileAsViewedInput =
    { pullRequestId : Github.ScalarCodecs.Id
    , path : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a MarkFileAsViewedInput into a value that can be used as an argument.
-}
encodeMarkFileAsViewedInput : MarkFileAsViewedInput -> Value
encodeMarkFileAsViewedInput input____ =
    Encode.maybeObject
        [ ( "pullRequestId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.pullRequestId |> Just ), ( "path", Encode.string input____.path |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildMarkPullRequestReadyForReviewInput :
    MarkPullRequestReadyForReviewInputRequiredFields
    -> (MarkPullRequestReadyForReviewInputOptionalFields -> MarkPullRequestReadyForReviewInputOptionalFields)
    -> MarkPullRequestReadyForReviewInput
buildMarkPullRequestReadyForReviewInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { pullRequestId = required____.pullRequestId, clientMutationId = optionals____.clientMutationId }


type alias MarkPullRequestReadyForReviewInputRequiredFields =
    { pullRequestId : Github.ScalarCodecs.Id }


type alias MarkPullRequestReadyForReviewInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the MarkPullRequestReadyForReviewInput input object.
-}
type alias MarkPullRequestReadyForReviewInput =
    { pullRequestId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a MarkPullRequestReadyForReviewInput into a value that can be used as an argument.
-}
encodeMarkPullRequestReadyForReviewInput : MarkPullRequestReadyForReviewInput -> Value
encodeMarkPullRequestReadyForReviewInput input____ =
    Encode.maybeObject
        [ ( "pullRequestId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.pullRequestId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildMergeBranchInput :
    MergeBranchInputRequiredFields
    -> (MergeBranchInputOptionalFields -> MergeBranchInputOptionalFields)
    -> MergeBranchInput
buildMergeBranchInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { commitMessage = Absent, authorEmail = Absent, clientMutationId = Absent }
    in
    { repositoryId = required____.repositoryId, base = required____.base, head = required____.head, commitMessage = optionals____.commitMessage, authorEmail = optionals____.authorEmail, clientMutationId = optionals____.clientMutationId }


type alias MergeBranchInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id
    , base : String
    , head : String
    }


type alias MergeBranchInputOptionalFields =
    { commitMessage : OptionalArgument String
    , authorEmail : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the MergeBranchInput input object.
-}
type alias MergeBranchInput =
    { repositoryId : Github.ScalarCodecs.Id
    , base : String
    , head : String
    , commitMessage : OptionalArgument String
    , authorEmail : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a MergeBranchInput into a value that can be used as an argument.
-}
encodeMergeBranchInput : MergeBranchInput -> Value
encodeMergeBranchInput input____ =
    Encode.maybeObject
        [ ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "base", Encode.string input____.base |> Just ), ( "head", Encode.string input____.head |> Just ), ( "commitMessage", Encode.string |> Encode.optional input____.commitMessage ), ( "authorEmail", Encode.string |> Encode.optional input____.authorEmail ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildMergePullRequestInput :
    MergePullRequestInputRequiredFields
    -> (MergePullRequestInputOptionalFields -> MergePullRequestInputOptionalFields)
    -> MergePullRequestInput
buildMergePullRequestInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { commitHeadline = Absent, commitBody = Absent, expectedHeadOid = Absent, mergeMethod = Absent, authorEmail = Absent, clientMutationId = Absent }
    in
    { pullRequestId = required____.pullRequestId, commitHeadline = optionals____.commitHeadline, commitBody = optionals____.commitBody, expectedHeadOid = optionals____.expectedHeadOid, mergeMethod = optionals____.mergeMethod, authorEmail = optionals____.authorEmail, clientMutationId = optionals____.clientMutationId }


type alias MergePullRequestInputRequiredFields =
    { pullRequestId : Github.ScalarCodecs.Id }


type alias MergePullRequestInputOptionalFields =
    { commitHeadline : OptionalArgument String
    , commitBody : OptionalArgument String
    , expectedHeadOid : OptionalArgument Github.ScalarCodecs.GitObjectID
    , mergeMethod : OptionalArgument Github.Enum.PullRequestMergeMethod.PullRequestMergeMethod
    , authorEmail : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the MergePullRequestInput input object.
-}
type alias MergePullRequestInput =
    { pullRequestId : Github.ScalarCodecs.Id
    , commitHeadline : OptionalArgument String
    , commitBody : OptionalArgument String
    , expectedHeadOid : OptionalArgument Github.ScalarCodecs.GitObjectID
    , mergeMethod : OptionalArgument Github.Enum.PullRequestMergeMethod.PullRequestMergeMethod
    , authorEmail : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a MergePullRequestInput into a value that can be used as an argument.
-}
encodeMergePullRequestInput : MergePullRequestInput -> Value
encodeMergePullRequestInput input____ =
    Encode.maybeObject
        [ ( "pullRequestId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.pullRequestId |> Just ), ( "commitHeadline", Encode.string |> Encode.optional input____.commitHeadline ), ( "commitBody", Encode.string |> Encode.optional input____.commitBody ), ( "expectedHeadOid", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecGitObjectID) |> Encode.optional input____.expectedHeadOid ), ( "mergeMethod", Encode.enum Github.Enum.PullRequestMergeMethod.toString |> Encode.optional input____.mergeMethod ), ( "authorEmail", Encode.string |> Encode.optional input____.authorEmail ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildMilestoneOrder :
    MilestoneOrderRequiredFields
    -> MilestoneOrder
buildMilestoneOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias MilestoneOrderRequiredFields =
    { field : Github.Enum.MilestoneOrderField.MilestoneOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the MilestoneOrder input object.
-}
type alias MilestoneOrder =
    { field : Github.Enum.MilestoneOrderField.MilestoneOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a MilestoneOrder into a value that can be used as an argument.
-}
encodeMilestoneOrder : MilestoneOrder -> Value
encodeMilestoneOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.MilestoneOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildMinimizeCommentInput :
    MinimizeCommentInputRequiredFields
    -> (MinimizeCommentInputOptionalFields -> MinimizeCommentInputOptionalFields)
    -> MinimizeCommentInput
buildMinimizeCommentInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { subjectId = required____.subjectId, classifier = required____.classifier, clientMutationId = optionals____.clientMutationId }


type alias MinimizeCommentInputRequiredFields =
    { subjectId : Github.ScalarCodecs.Id
    , classifier : Github.Enum.ReportedContentClassifiers.ReportedContentClassifiers
    }


type alias MinimizeCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the MinimizeCommentInput input object.
-}
type alias MinimizeCommentInput =
    { subjectId : Github.ScalarCodecs.Id
    , classifier : Github.Enum.ReportedContentClassifiers.ReportedContentClassifiers
    , clientMutationId : OptionalArgument String
    }


{-| Encode a MinimizeCommentInput into a value that can be used as an argument.
-}
encodeMinimizeCommentInput : MinimizeCommentInput -> Value
encodeMinimizeCommentInput input____ =
    Encode.maybeObject
        [ ( "subjectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.subjectId |> Just ), ( "classifier", Encode.enum Github.Enum.ReportedContentClassifiers.toString input____.classifier |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildMoveProjectCardInput :
    MoveProjectCardInputRequiredFields
    -> (MoveProjectCardInputOptionalFields -> MoveProjectCardInputOptionalFields)
    -> MoveProjectCardInput
buildMoveProjectCardInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { afterCardId = Absent, clientMutationId = Absent }
    in
    { cardId = required____.cardId, columnId = required____.columnId, afterCardId = optionals____.afterCardId, clientMutationId = optionals____.clientMutationId }


type alias MoveProjectCardInputRequiredFields =
    { cardId : Github.ScalarCodecs.Id
    , columnId : Github.ScalarCodecs.Id
    }


type alias MoveProjectCardInputOptionalFields =
    { afterCardId : OptionalArgument Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the MoveProjectCardInput input object.
-}
type alias MoveProjectCardInput =
    { cardId : Github.ScalarCodecs.Id
    , columnId : Github.ScalarCodecs.Id
    , afterCardId : OptionalArgument Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a MoveProjectCardInput into a value that can be used as an argument.
-}
encodeMoveProjectCardInput : MoveProjectCardInput -> Value
encodeMoveProjectCardInput input____ =
    Encode.maybeObject
        [ ( "cardId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.cardId |> Just ), ( "columnId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.columnId |> Just ), ( "afterCardId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.afterCardId ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildMoveProjectColumnInput :
    MoveProjectColumnInputRequiredFields
    -> (MoveProjectColumnInputOptionalFields -> MoveProjectColumnInputOptionalFields)
    -> MoveProjectColumnInput
buildMoveProjectColumnInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { afterColumnId = Absent, clientMutationId = Absent }
    in
    { columnId = required____.columnId, afterColumnId = optionals____.afterColumnId, clientMutationId = optionals____.clientMutationId }


type alias MoveProjectColumnInputRequiredFields =
    { columnId : Github.ScalarCodecs.Id }


type alias MoveProjectColumnInputOptionalFields =
    { afterColumnId : OptionalArgument Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the MoveProjectColumnInput input object.
-}
type alias MoveProjectColumnInput =
    { columnId : Github.ScalarCodecs.Id
    , afterColumnId : OptionalArgument Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a MoveProjectColumnInput into a value that can be used as an argument.
-}
encodeMoveProjectColumnInput : MoveProjectColumnInput -> Value
encodeMoveProjectColumnInput input____ =
    Encode.maybeObject
        [ ( "columnId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.columnId |> Just ), ( "afterColumnId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.afterColumnId ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildOrgEnterpriseOwnerOrder :
    OrgEnterpriseOwnerOrderRequiredFields
    -> OrgEnterpriseOwnerOrder
buildOrgEnterpriseOwnerOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias OrgEnterpriseOwnerOrderRequiredFields =
    { field : Github.Enum.OrgEnterpriseOwnerOrderField.OrgEnterpriseOwnerOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the OrgEnterpriseOwnerOrder input object.
-}
type alias OrgEnterpriseOwnerOrder =
    { field : Github.Enum.OrgEnterpriseOwnerOrderField.OrgEnterpriseOwnerOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a OrgEnterpriseOwnerOrder into a value that can be used as an argument.
-}
encodeOrgEnterpriseOwnerOrder : OrgEnterpriseOwnerOrder -> Value
encodeOrgEnterpriseOwnerOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.OrgEnterpriseOwnerOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildOrganizationOrder :
    OrganizationOrderRequiredFields
    -> OrganizationOrder
buildOrganizationOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias OrganizationOrderRequiredFields =
    { field : Github.Enum.OrganizationOrderField.OrganizationOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the OrganizationOrder input object.
-}
type alias OrganizationOrder =
    { field : Github.Enum.OrganizationOrderField.OrganizationOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a OrganizationOrder into a value that can be used as an argument.
-}
encodeOrganizationOrder : OrganizationOrder -> Value
encodeOrganizationOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.OrganizationOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildPackageFileOrder :
    (PackageFileOrderOptionalFields -> PackageFileOrderOptionalFields)
    -> PackageFileOrder
buildPackageFileOrder fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { field = Absent, direction = Absent }
    in
    { field = optionals____.field, direction = optionals____.direction }


type alias PackageFileOrderOptionalFields =
    { field : OptionalArgument Github.Enum.PackageFileOrderField.PackageFileOrderField
    , direction : OptionalArgument Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the PackageFileOrder input object.
-}
type alias PackageFileOrder =
    { field : OptionalArgument Github.Enum.PackageFileOrderField.PackageFileOrderField
    , direction : OptionalArgument Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a PackageFileOrder into a value that can be used as an argument.
-}
encodePackageFileOrder : PackageFileOrder -> Value
encodePackageFileOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.PackageFileOrderField.toString |> Encode.optional input____.field ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString |> Encode.optional input____.direction ) ]


buildPackageOrder :
    (PackageOrderOptionalFields -> PackageOrderOptionalFields)
    -> PackageOrder
buildPackageOrder fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { field = Absent, direction = Absent }
    in
    { field = optionals____.field, direction = optionals____.direction }


type alias PackageOrderOptionalFields =
    { field : OptionalArgument Github.Enum.PackageOrderField.PackageOrderField
    , direction : OptionalArgument Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the PackageOrder input object.
-}
type alias PackageOrder =
    { field : OptionalArgument Github.Enum.PackageOrderField.PackageOrderField
    , direction : OptionalArgument Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a PackageOrder into a value that can be used as an argument.
-}
encodePackageOrder : PackageOrder -> Value
encodePackageOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.PackageOrderField.toString |> Encode.optional input____.field ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString |> Encode.optional input____.direction ) ]


buildPackageVersionOrder :
    (PackageVersionOrderOptionalFields -> PackageVersionOrderOptionalFields)
    -> PackageVersionOrder
buildPackageVersionOrder fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { field = Absent, direction = Absent }
    in
    { field = optionals____.field, direction = optionals____.direction }


type alias PackageVersionOrderOptionalFields =
    { field : OptionalArgument Github.Enum.PackageVersionOrderField.PackageVersionOrderField
    , direction : OptionalArgument Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the PackageVersionOrder input object.
-}
type alias PackageVersionOrder =
    { field : OptionalArgument Github.Enum.PackageVersionOrderField.PackageVersionOrderField
    , direction : OptionalArgument Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a PackageVersionOrder into a value that can be used as an argument.
-}
encodePackageVersionOrder : PackageVersionOrder -> Value
encodePackageVersionOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.PackageVersionOrderField.toString |> Encode.optional input____.field ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString |> Encode.optional input____.direction ) ]


buildPinIssueInput :
    PinIssueInputRequiredFields
    -> (PinIssueInputOptionalFields -> PinIssueInputOptionalFields)
    -> PinIssueInput
buildPinIssueInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { issueId = required____.issueId, clientMutationId = optionals____.clientMutationId }


type alias PinIssueInputRequiredFields =
    { issueId : Github.ScalarCodecs.Id }


type alias PinIssueInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the PinIssueInput input object.
-}
type alias PinIssueInput =
    { issueId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a PinIssueInput into a value that can be used as an argument.
-}
encodePinIssueInput : PinIssueInput -> Value
encodePinIssueInput input____ =
    Encode.maybeObject
        [ ( "issueId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.issueId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildProjectOrder :
    ProjectOrderRequiredFields
    -> ProjectOrder
buildProjectOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias ProjectOrderRequiredFields =
    { field : Github.Enum.ProjectOrderField.ProjectOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the ProjectOrder input object.
-}
type alias ProjectOrder =
    { field : Github.Enum.ProjectOrderField.ProjectOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a ProjectOrder into a value that can be used as an argument.
-}
encodeProjectOrder : ProjectOrder -> Value
encodeProjectOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.ProjectOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildProjectV2FieldOrder :
    ProjectV2FieldOrderRequiredFields
    -> ProjectV2FieldOrder
buildProjectV2FieldOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias ProjectV2FieldOrderRequiredFields =
    { field : Github.Enum.ProjectV2FieldOrderField.ProjectV2FieldOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the ProjectV2FieldOrder input object.
-}
type alias ProjectV2FieldOrder =
    { field : Github.Enum.ProjectV2FieldOrderField.ProjectV2FieldOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a ProjectV2FieldOrder into a value that can be used as an argument.
-}
encodeProjectV2FieldOrder : ProjectV2FieldOrder -> Value
encodeProjectV2FieldOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.ProjectV2FieldOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildProjectV2FieldValue :
    (ProjectV2FieldValueOptionalFields -> ProjectV2FieldValueOptionalFields)
    -> ProjectV2FieldValue
buildProjectV2FieldValue fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { text = Absent, number = Absent, date = Absent, singleSelectOptionId = Absent, iterationId = Absent }
    in
    { text = optionals____.text, number = optionals____.number, date = optionals____.date, singleSelectOptionId = optionals____.singleSelectOptionId, iterationId = optionals____.iterationId }


type alias ProjectV2FieldValueOptionalFields =
    { text : OptionalArgument String
    , number : OptionalArgument Float
    , date : OptionalArgument Github.ScalarCodecs.Date
    , singleSelectOptionId : OptionalArgument String
    , iterationId : OptionalArgument String
    }


{-| Type for the ProjectV2FieldValue input object.
-}
type alias ProjectV2FieldValue =
    { text : OptionalArgument String
    , number : OptionalArgument Float
    , date : OptionalArgument Github.ScalarCodecs.Date
    , singleSelectOptionId : OptionalArgument String
    , iterationId : OptionalArgument String
    }


{-| Encode a ProjectV2FieldValue into a value that can be used as an argument.
-}
encodeProjectV2FieldValue : ProjectV2FieldValue -> Value
encodeProjectV2FieldValue input____ =
    Encode.maybeObject
        [ ( "text", Encode.string |> Encode.optional input____.text ), ( "number", Encode.float |> Encode.optional input____.number ), ( "date", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecDate) |> Encode.optional input____.date ), ( "singleSelectOptionId", Encode.string |> Encode.optional input____.singleSelectOptionId ), ( "iterationId", Encode.string |> Encode.optional input____.iterationId ) ]


buildProjectV2ItemFieldValueOrder :
    ProjectV2ItemFieldValueOrderRequiredFields
    -> ProjectV2ItemFieldValueOrder
buildProjectV2ItemFieldValueOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias ProjectV2ItemFieldValueOrderRequiredFields =
    { field : Github.Enum.ProjectV2ItemFieldValueOrderField.ProjectV2ItemFieldValueOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the ProjectV2ItemFieldValueOrder input object.
-}
type alias ProjectV2ItemFieldValueOrder =
    { field : Github.Enum.ProjectV2ItemFieldValueOrderField.ProjectV2ItemFieldValueOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a ProjectV2ItemFieldValueOrder into a value that can be used as an argument.
-}
encodeProjectV2ItemFieldValueOrder : ProjectV2ItemFieldValueOrder -> Value
encodeProjectV2ItemFieldValueOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.ProjectV2ItemFieldValueOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildProjectV2ItemOrder :
    ProjectV2ItemOrderRequiredFields
    -> ProjectV2ItemOrder
buildProjectV2ItemOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias ProjectV2ItemOrderRequiredFields =
    { field : Github.Enum.ProjectV2ItemOrderField.ProjectV2ItemOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the ProjectV2ItemOrder input object.
-}
type alias ProjectV2ItemOrder =
    { field : Github.Enum.ProjectV2ItemOrderField.ProjectV2ItemOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a ProjectV2ItemOrder into a value that can be used as an argument.
-}
encodeProjectV2ItemOrder : ProjectV2ItemOrder -> Value
encodeProjectV2ItemOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.ProjectV2ItemOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildProjectV2Order :
    ProjectV2OrderRequiredFields
    -> ProjectV2Order
buildProjectV2Order required____ =
    { field = required____.field, direction = required____.direction }


type alias ProjectV2OrderRequiredFields =
    { field : Github.Enum.ProjectV2OrderField.ProjectV2OrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the ProjectV2Order input object.
-}
type alias ProjectV2Order =
    { field : Github.Enum.ProjectV2OrderField.ProjectV2OrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a ProjectV2Order into a value that can be used as an argument.
-}
encodeProjectV2Order : ProjectV2Order -> Value
encodeProjectV2Order input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.ProjectV2OrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildProjectV2ViewOrder :
    ProjectV2ViewOrderRequiredFields
    -> ProjectV2ViewOrder
buildProjectV2ViewOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias ProjectV2ViewOrderRequiredFields =
    { field : Github.Enum.ProjectV2ViewOrderField.ProjectV2ViewOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the ProjectV2ViewOrder input object.
-}
type alias ProjectV2ViewOrder =
    { field : Github.Enum.ProjectV2ViewOrderField.ProjectV2ViewOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a ProjectV2ViewOrder into a value that can be used as an argument.
-}
encodeProjectV2ViewOrder : ProjectV2ViewOrder -> Value
encodeProjectV2ViewOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.ProjectV2ViewOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildPullRequestOrder :
    PullRequestOrderRequiredFields
    -> PullRequestOrder
buildPullRequestOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias PullRequestOrderRequiredFields =
    { field : Github.Enum.PullRequestOrderField.PullRequestOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the PullRequestOrder input object.
-}
type alias PullRequestOrder =
    { field : Github.Enum.PullRequestOrderField.PullRequestOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a PullRequestOrder into a value that can be used as an argument.
-}
encodePullRequestOrder : PullRequestOrder -> Value
encodePullRequestOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.PullRequestOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildReactionOrder :
    ReactionOrderRequiredFields
    -> ReactionOrder
buildReactionOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias ReactionOrderRequiredFields =
    { field : Github.Enum.ReactionOrderField.ReactionOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the ReactionOrder input object.
-}
type alias ReactionOrder =
    { field : Github.Enum.ReactionOrderField.ReactionOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a ReactionOrder into a value that can be used as an argument.
-}
encodeReactionOrder : ReactionOrder -> Value
encodeReactionOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.ReactionOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildRefOrder :
    RefOrderRequiredFields
    -> RefOrder
buildRefOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias RefOrderRequiredFields =
    { field : Github.Enum.RefOrderField.RefOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the RefOrder input object.
-}
type alias RefOrder =
    { field : Github.Enum.RefOrderField.RefOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a RefOrder into a value that can be used as an argument.
-}
encodeRefOrder : RefOrder -> Value
encodeRefOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.RefOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildRegenerateEnterpriseIdentityProviderRecoveryCodesInput :
    RegenerateEnterpriseIdentityProviderRecoveryCodesInputRequiredFields
    -> (RegenerateEnterpriseIdentityProviderRecoveryCodesInputOptionalFields -> RegenerateEnterpriseIdentityProviderRecoveryCodesInputOptionalFields)
    -> RegenerateEnterpriseIdentityProviderRecoveryCodesInput
buildRegenerateEnterpriseIdentityProviderRecoveryCodesInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, clientMutationId = optionals____.clientMutationId }


type alias RegenerateEnterpriseIdentityProviderRecoveryCodesInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id }


type alias RegenerateEnterpriseIdentityProviderRecoveryCodesInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RegenerateEnterpriseIdentityProviderRecoveryCodesInput input object.
-}
type alias RegenerateEnterpriseIdentityProviderRecoveryCodesInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RegenerateEnterpriseIdentityProviderRecoveryCodesInput into a value that can be used as an argument.
-}
encodeRegenerateEnterpriseIdentityProviderRecoveryCodesInput : RegenerateEnterpriseIdentityProviderRecoveryCodesInput -> Value
encodeRegenerateEnterpriseIdentityProviderRecoveryCodesInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildRegenerateVerifiableDomainTokenInput :
    RegenerateVerifiableDomainTokenInputRequiredFields
    -> (RegenerateVerifiableDomainTokenInputOptionalFields -> RegenerateVerifiableDomainTokenInputOptionalFields)
    -> RegenerateVerifiableDomainTokenInput
buildRegenerateVerifiableDomainTokenInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { id = required____.id, clientMutationId = optionals____.clientMutationId }


type alias RegenerateVerifiableDomainTokenInputRequiredFields =
    { id : Github.ScalarCodecs.Id }


type alias RegenerateVerifiableDomainTokenInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RegenerateVerifiableDomainTokenInput input object.
-}
type alias RegenerateVerifiableDomainTokenInput =
    { id : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RegenerateVerifiableDomainTokenInput into a value that can be used as an argument.
-}
encodeRegenerateVerifiableDomainTokenInput : RegenerateVerifiableDomainTokenInput -> Value
encodeRegenerateVerifiableDomainTokenInput input____ =
    Encode.maybeObject
        [ ( "id", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildRejectDeploymentsInput :
    RejectDeploymentsInputRequiredFields
    -> (RejectDeploymentsInputOptionalFields -> RejectDeploymentsInputOptionalFields)
    -> RejectDeploymentsInput
buildRejectDeploymentsInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { comment = Absent, clientMutationId = Absent }
    in
    { workflowRunId = required____.workflowRunId, environmentIds = required____.environmentIds, comment = optionals____.comment, clientMutationId = optionals____.clientMutationId }


type alias RejectDeploymentsInputRequiredFields =
    { workflowRunId : Github.ScalarCodecs.Id
    , environmentIds : List Github.ScalarCodecs.Id
    }


type alias RejectDeploymentsInputOptionalFields =
    { comment : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the RejectDeploymentsInput input object.
-}
type alias RejectDeploymentsInput =
    { workflowRunId : Github.ScalarCodecs.Id
    , environmentIds : List Github.ScalarCodecs.Id
    , comment : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RejectDeploymentsInput into a value that can be used as an argument.
-}
encodeRejectDeploymentsInput : RejectDeploymentsInput -> Value
encodeRejectDeploymentsInput input____ =
    Encode.maybeObject
        [ ( "workflowRunId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.workflowRunId |> Just ), ( "environmentIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) input____.environmentIds |> Just ), ( "comment", Encode.string |> Encode.optional input____.comment ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildReleaseOrder :
    ReleaseOrderRequiredFields
    -> ReleaseOrder
buildReleaseOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias ReleaseOrderRequiredFields =
    { field : Github.Enum.ReleaseOrderField.ReleaseOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the ReleaseOrder input object.
-}
type alias ReleaseOrder =
    { field : Github.Enum.ReleaseOrderField.ReleaseOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a ReleaseOrder into a value that can be used as an argument.
-}
encodeReleaseOrder : ReleaseOrder -> Value
encodeReleaseOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.ReleaseOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildRemoveAssigneesFromAssignableInput :
    RemoveAssigneesFromAssignableInputRequiredFields
    -> (RemoveAssigneesFromAssignableInputOptionalFields -> RemoveAssigneesFromAssignableInputOptionalFields)
    -> RemoveAssigneesFromAssignableInput
buildRemoveAssigneesFromAssignableInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { assignableId = required____.assignableId, assigneeIds = required____.assigneeIds, clientMutationId = optionals____.clientMutationId }


type alias RemoveAssigneesFromAssignableInputRequiredFields =
    { assignableId : Github.ScalarCodecs.Id
    , assigneeIds : List Github.ScalarCodecs.Id
    }


type alias RemoveAssigneesFromAssignableInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveAssigneesFromAssignableInput input object.
-}
type alias RemoveAssigneesFromAssignableInput =
    { assignableId : Github.ScalarCodecs.Id
    , assigneeIds : List Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveAssigneesFromAssignableInput into a value that can be used as an argument.
-}
encodeRemoveAssigneesFromAssignableInput : RemoveAssigneesFromAssignableInput -> Value
encodeRemoveAssigneesFromAssignableInput input____ =
    Encode.maybeObject
        [ ( "assignableId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.assignableId |> Just ), ( "assigneeIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) input____.assigneeIds |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildRemoveEnterpriseAdminInput :
    RemoveEnterpriseAdminInputRequiredFields
    -> (RemoveEnterpriseAdminInputOptionalFields -> RemoveEnterpriseAdminInputOptionalFields)
    -> RemoveEnterpriseAdminInput
buildRemoveEnterpriseAdminInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, login = required____.login, clientMutationId = optionals____.clientMutationId }


type alias RemoveEnterpriseAdminInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , login : String
    }


type alias RemoveEnterpriseAdminInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveEnterpriseAdminInput input object.
-}
type alias RemoveEnterpriseAdminInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , login : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveEnterpriseAdminInput into a value that can be used as an argument.
-}
encodeRemoveEnterpriseAdminInput : RemoveEnterpriseAdminInput -> Value
encodeRemoveEnterpriseAdminInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "login", Encode.string input____.login |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildRemoveEnterpriseIdentityProviderInput :
    RemoveEnterpriseIdentityProviderInputRequiredFields
    -> (RemoveEnterpriseIdentityProviderInputOptionalFields -> RemoveEnterpriseIdentityProviderInputOptionalFields)
    -> RemoveEnterpriseIdentityProviderInput
buildRemoveEnterpriseIdentityProviderInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, clientMutationId = optionals____.clientMutationId }


type alias RemoveEnterpriseIdentityProviderInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id }


type alias RemoveEnterpriseIdentityProviderInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveEnterpriseIdentityProviderInput input object.
-}
type alias RemoveEnterpriseIdentityProviderInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveEnterpriseIdentityProviderInput into a value that can be used as an argument.
-}
encodeRemoveEnterpriseIdentityProviderInput : RemoveEnterpriseIdentityProviderInput -> Value
encodeRemoveEnterpriseIdentityProviderInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildRemoveEnterpriseOrganizationInput :
    RemoveEnterpriseOrganizationInputRequiredFields
    -> (RemoveEnterpriseOrganizationInputOptionalFields -> RemoveEnterpriseOrganizationInputOptionalFields)
    -> RemoveEnterpriseOrganizationInput
buildRemoveEnterpriseOrganizationInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, organizationId = required____.organizationId, clientMutationId = optionals____.clientMutationId }


type alias RemoveEnterpriseOrganizationInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , organizationId : Github.ScalarCodecs.Id
    }


type alias RemoveEnterpriseOrganizationInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveEnterpriseOrganizationInput input object.
-}
type alias RemoveEnterpriseOrganizationInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , organizationId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveEnterpriseOrganizationInput into a value that can be used as an argument.
-}
encodeRemoveEnterpriseOrganizationInput : RemoveEnterpriseOrganizationInput -> Value
encodeRemoveEnterpriseOrganizationInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "organizationId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.organizationId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildRemoveEnterpriseSupportEntitlementInput :
    RemoveEnterpriseSupportEntitlementInputRequiredFields
    -> (RemoveEnterpriseSupportEntitlementInputOptionalFields -> RemoveEnterpriseSupportEntitlementInputOptionalFields)
    -> RemoveEnterpriseSupportEntitlementInput
buildRemoveEnterpriseSupportEntitlementInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, login = required____.login, clientMutationId = optionals____.clientMutationId }


type alias RemoveEnterpriseSupportEntitlementInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , login : String
    }


type alias RemoveEnterpriseSupportEntitlementInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveEnterpriseSupportEntitlementInput input object.
-}
type alias RemoveEnterpriseSupportEntitlementInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , login : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveEnterpriseSupportEntitlementInput into a value that can be used as an argument.
-}
encodeRemoveEnterpriseSupportEntitlementInput : RemoveEnterpriseSupportEntitlementInput -> Value
encodeRemoveEnterpriseSupportEntitlementInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "login", Encode.string input____.login |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildRemoveLabelsFromLabelableInput :
    RemoveLabelsFromLabelableInputRequiredFields
    -> (RemoveLabelsFromLabelableInputOptionalFields -> RemoveLabelsFromLabelableInputOptionalFields)
    -> RemoveLabelsFromLabelableInput
buildRemoveLabelsFromLabelableInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { labelableId = required____.labelableId, labelIds = required____.labelIds, clientMutationId = optionals____.clientMutationId }


type alias RemoveLabelsFromLabelableInputRequiredFields =
    { labelableId : Github.ScalarCodecs.Id
    , labelIds : List Github.ScalarCodecs.Id
    }


type alias RemoveLabelsFromLabelableInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveLabelsFromLabelableInput input object.
-}
type alias RemoveLabelsFromLabelableInput =
    { labelableId : Github.ScalarCodecs.Id
    , labelIds : List Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveLabelsFromLabelableInput into a value that can be used as an argument.
-}
encodeRemoveLabelsFromLabelableInput : RemoveLabelsFromLabelableInput -> Value
encodeRemoveLabelsFromLabelableInput input____ =
    Encode.maybeObject
        [ ( "labelableId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.labelableId |> Just ), ( "labelIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) input____.labelIds |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildRemoveOutsideCollaboratorInput :
    RemoveOutsideCollaboratorInputRequiredFields
    -> (RemoveOutsideCollaboratorInputOptionalFields -> RemoveOutsideCollaboratorInputOptionalFields)
    -> RemoveOutsideCollaboratorInput
buildRemoveOutsideCollaboratorInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { userId = required____.userId, organizationId = required____.organizationId, clientMutationId = optionals____.clientMutationId }


type alias RemoveOutsideCollaboratorInputRequiredFields =
    { userId : Github.ScalarCodecs.Id
    , organizationId : Github.ScalarCodecs.Id
    }


type alias RemoveOutsideCollaboratorInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveOutsideCollaboratorInput input object.
-}
type alias RemoveOutsideCollaboratorInput =
    { userId : Github.ScalarCodecs.Id
    , organizationId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveOutsideCollaboratorInput into a value that can be used as an argument.
-}
encodeRemoveOutsideCollaboratorInput : RemoveOutsideCollaboratorInput -> Value
encodeRemoveOutsideCollaboratorInput input____ =
    Encode.maybeObject
        [ ( "userId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.userId |> Just ), ( "organizationId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.organizationId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildRemoveReactionInput :
    RemoveReactionInputRequiredFields
    -> (RemoveReactionInputOptionalFields -> RemoveReactionInputOptionalFields)
    -> RemoveReactionInput
buildRemoveReactionInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { subjectId = required____.subjectId, content = required____.content, clientMutationId = optionals____.clientMutationId }


type alias RemoveReactionInputRequiredFields =
    { subjectId : Github.ScalarCodecs.Id
    , content : Github.Enum.ReactionContent.ReactionContent
    }


type alias RemoveReactionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveReactionInput input object.
-}
type alias RemoveReactionInput =
    { subjectId : Github.ScalarCodecs.Id
    , content : Github.Enum.ReactionContent.ReactionContent
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveReactionInput into a value that can be used as an argument.
-}
encodeRemoveReactionInput : RemoveReactionInput -> Value
encodeRemoveReactionInput input____ =
    Encode.maybeObject
        [ ( "subjectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.subjectId |> Just ), ( "content", Encode.enum Github.Enum.ReactionContent.toString input____.content |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildRemoveStarInput :
    RemoveStarInputRequiredFields
    -> (RemoveStarInputOptionalFields -> RemoveStarInputOptionalFields)
    -> RemoveStarInput
buildRemoveStarInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { starrableId = required____.starrableId, clientMutationId = optionals____.clientMutationId }


type alias RemoveStarInputRequiredFields =
    { starrableId : Github.ScalarCodecs.Id }


type alias RemoveStarInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveStarInput input object.
-}
type alias RemoveStarInput =
    { starrableId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveStarInput into a value that can be used as an argument.
-}
encodeRemoveStarInput : RemoveStarInput -> Value
encodeRemoveStarInput input____ =
    Encode.maybeObject
        [ ( "starrableId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.starrableId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildRemoveUpvoteInput :
    RemoveUpvoteInputRequiredFields
    -> (RemoveUpvoteInputOptionalFields -> RemoveUpvoteInputOptionalFields)
    -> RemoveUpvoteInput
buildRemoveUpvoteInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { subjectId = required____.subjectId, clientMutationId = optionals____.clientMutationId }


type alias RemoveUpvoteInputRequiredFields =
    { subjectId : Github.ScalarCodecs.Id }


type alias RemoveUpvoteInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RemoveUpvoteInput input object.
-}
type alias RemoveUpvoteInput =
    { subjectId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RemoveUpvoteInput into a value that can be used as an argument.
-}
encodeRemoveUpvoteInput : RemoveUpvoteInput -> Value
encodeRemoveUpvoteInput input____ =
    Encode.maybeObject
        [ ( "subjectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.subjectId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildReopenIssueInput :
    ReopenIssueInputRequiredFields
    -> (ReopenIssueInputOptionalFields -> ReopenIssueInputOptionalFields)
    -> ReopenIssueInput
buildReopenIssueInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { issueId = required____.issueId, clientMutationId = optionals____.clientMutationId }


type alias ReopenIssueInputRequiredFields =
    { issueId : Github.ScalarCodecs.Id }


type alias ReopenIssueInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the ReopenIssueInput input object.
-}
type alias ReopenIssueInput =
    { issueId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a ReopenIssueInput into a value that can be used as an argument.
-}
encodeReopenIssueInput : ReopenIssueInput -> Value
encodeReopenIssueInput input____ =
    Encode.maybeObject
        [ ( "issueId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.issueId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildReopenPullRequestInput :
    ReopenPullRequestInputRequiredFields
    -> (ReopenPullRequestInputOptionalFields -> ReopenPullRequestInputOptionalFields)
    -> ReopenPullRequestInput
buildReopenPullRequestInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { pullRequestId = required____.pullRequestId, clientMutationId = optionals____.clientMutationId }


type alias ReopenPullRequestInputRequiredFields =
    { pullRequestId : Github.ScalarCodecs.Id }


type alias ReopenPullRequestInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the ReopenPullRequestInput input object.
-}
type alias ReopenPullRequestInput =
    { pullRequestId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a ReopenPullRequestInput into a value that can be used as an argument.
-}
encodeReopenPullRequestInput : ReopenPullRequestInput -> Value
encodeReopenPullRequestInput input____ =
    Encode.maybeObject
        [ ( "pullRequestId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.pullRequestId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildRepositoryInvitationOrder :
    RepositoryInvitationOrderRequiredFields
    -> RepositoryInvitationOrder
buildRepositoryInvitationOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias RepositoryInvitationOrderRequiredFields =
    { field : Github.Enum.RepositoryInvitationOrderField.RepositoryInvitationOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the RepositoryInvitationOrder input object.
-}
type alias RepositoryInvitationOrder =
    { field : Github.Enum.RepositoryInvitationOrderField.RepositoryInvitationOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a RepositoryInvitationOrder into a value that can be used as an argument.
-}
encodeRepositoryInvitationOrder : RepositoryInvitationOrder -> Value
encodeRepositoryInvitationOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.RepositoryInvitationOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildRepositoryMigrationOrder :
    RepositoryMigrationOrderRequiredFields
    -> RepositoryMigrationOrder
buildRepositoryMigrationOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias RepositoryMigrationOrderRequiredFields =
    { field : Github.Enum.RepositoryMigrationOrderField.RepositoryMigrationOrderField
    , direction : Github.Enum.RepositoryMigrationOrderDirection.RepositoryMigrationOrderDirection
    }


{-| Type for the RepositoryMigrationOrder input object.
-}
type alias RepositoryMigrationOrder =
    { field : Github.Enum.RepositoryMigrationOrderField.RepositoryMigrationOrderField
    , direction : Github.Enum.RepositoryMigrationOrderDirection.RepositoryMigrationOrderDirection
    }


{-| Encode a RepositoryMigrationOrder into a value that can be used as an argument.
-}
encodeRepositoryMigrationOrder : RepositoryMigrationOrder -> Value
encodeRepositoryMigrationOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.RepositoryMigrationOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.RepositoryMigrationOrderDirection.toString input____.direction |> Just ) ]


buildRepositoryOrder :
    RepositoryOrderRequiredFields
    -> RepositoryOrder
buildRepositoryOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias RepositoryOrderRequiredFields =
    { field : Github.Enum.RepositoryOrderField.RepositoryOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the RepositoryOrder input object.
-}
type alias RepositoryOrder =
    { field : Github.Enum.RepositoryOrderField.RepositoryOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a RepositoryOrder into a value that can be used as an argument.
-}
encodeRepositoryOrder : RepositoryOrder -> Value
encodeRepositoryOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.RepositoryOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildRequestReviewsInput :
    RequestReviewsInputRequiredFields
    -> (RequestReviewsInputOptionalFields -> RequestReviewsInputOptionalFields)
    -> RequestReviewsInput
buildRequestReviewsInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { userIds = Absent, teamIds = Absent, union = Absent, clientMutationId = Absent }
    in
    { pullRequestId = required____.pullRequestId, userIds = optionals____.userIds, teamIds = optionals____.teamIds, union = optionals____.union, clientMutationId = optionals____.clientMutationId }


type alias RequestReviewsInputRequiredFields =
    { pullRequestId : Github.ScalarCodecs.Id }


type alias RequestReviewsInputOptionalFields =
    { userIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , teamIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , union : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the RequestReviewsInput input object.
-}
type alias RequestReviewsInput =
    { pullRequestId : Github.ScalarCodecs.Id
    , userIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , teamIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , union : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RequestReviewsInput into a value that can be used as an argument.
-}
encodeRequestReviewsInput : RequestReviewsInput -> Value
encodeRequestReviewsInput input____ =
    Encode.maybeObject
        [ ( "pullRequestId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.pullRequestId |> Just ), ( "userIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.userIds ), ( "teamIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.teamIds ), ( "union", Encode.bool |> Encode.optional input____.union ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildRequiredStatusCheckInput :
    RequiredStatusCheckInputRequiredFields
    -> (RequiredStatusCheckInputOptionalFields -> RequiredStatusCheckInputOptionalFields)
    -> RequiredStatusCheckInput
buildRequiredStatusCheckInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { appId = Absent }
    in
    { context = required____.context, appId = optionals____.appId }


type alias RequiredStatusCheckInputRequiredFields =
    { context : String }


type alias RequiredStatusCheckInputOptionalFields =
    { appId : OptionalArgument Github.ScalarCodecs.Id }


{-| Type for the RequiredStatusCheckInput input object.
-}
type alias RequiredStatusCheckInput =
    { context : String
    , appId : OptionalArgument Github.ScalarCodecs.Id
    }


{-| Encode a RequiredStatusCheckInput into a value that can be used as an argument.
-}
encodeRequiredStatusCheckInput : RequiredStatusCheckInput -> Value
encodeRequiredStatusCheckInput input____ =
    Encode.maybeObject
        [ ( "context", Encode.string input____.context |> Just ), ( "appId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.appId ) ]


buildRerequestCheckSuiteInput :
    RerequestCheckSuiteInputRequiredFields
    -> (RerequestCheckSuiteInputOptionalFields -> RerequestCheckSuiteInputOptionalFields)
    -> RerequestCheckSuiteInput
buildRerequestCheckSuiteInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { repositoryId = required____.repositoryId, checkSuiteId = required____.checkSuiteId, clientMutationId = optionals____.clientMutationId }


type alias RerequestCheckSuiteInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id
    , checkSuiteId : Github.ScalarCodecs.Id
    }


type alias RerequestCheckSuiteInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RerequestCheckSuiteInput input object.
-}
type alias RerequestCheckSuiteInput =
    { repositoryId : Github.ScalarCodecs.Id
    , checkSuiteId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RerequestCheckSuiteInput into a value that can be used as an argument.
-}
encodeRerequestCheckSuiteInput : RerequestCheckSuiteInput -> Value
encodeRerequestCheckSuiteInput input____ =
    Encode.maybeObject
        [ ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "checkSuiteId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.checkSuiteId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildResolveReviewThreadInput :
    ResolveReviewThreadInputRequiredFields
    -> (ResolveReviewThreadInputOptionalFields -> ResolveReviewThreadInputOptionalFields)
    -> ResolveReviewThreadInput
buildResolveReviewThreadInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { threadId = required____.threadId, clientMutationId = optionals____.clientMutationId }


type alias ResolveReviewThreadInputRequiredFields =
    { threadId : Github.ScalarCodecs.Id }


type alias ResolveReviewThreadInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the ResolveReviewThreadInput input object.
-}
type alias ResolveReviewThreadInput =
    { threadId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a ResolveReviewThreadInput into a value that can be used as an argument.
-}
encodeResolveReviewThreadInput : ResolveReviewThreadInput -> Value
encodeResolveReviewThreadInput input____ =
    Encode.maybeObject
        [ ( "threadId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.threadId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildRevokeEnterpriseOrganizationsMigratorRoleInput :
    RevokeEnterpriseOrganizationsMigratorRoleInputRequiredFields
    -> (RevokeEnterpriseOrganizationsMigratorRoleInputOptionalFields -> RevokeEnterpriseOrganizationsMigratorRoleInputOptionalFields)
    -> RevokeEnterpriseOrganizationsMigratorRoleInput
buildRevokeEnterpriseOrganizationsMigratorRoleInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, login = required____.login, clientMutationId = optionals____.clientMutationId }


type alias RevokeEnterpriseOrganizationsMigratorRoleInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , login : String
    }


type alias RevokeEnterpriseOrganizationsMigratorRoleInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RevokeEnterpriseOrganizationsMigratorRoleInput input object.
-}
type alias RevokeEnterpriseOrganizationsMigratorRoleInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , login : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RevokeEnterpriseOrganizationsMigratorRoleInput into a value that can be used as an argument.
-}
encodeRevokeEnterpriseOrganizationsMigratorRoleInput : RevokeEnterpriseOrganizationsMigratorRoleInput -> Value
encodeRevokeEnterpriseOrganizationsMigratorRoleInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "login", Encode.string input____.login |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildRevokeMigratorRoleInput :
    RevokeMigratorRoleInputRequiredFields
    -> (RevokeMigratorRoleInputOptionalFields -> RevokeMigratorRoleInputOptionalFields)
    -> RevokeMigratorRoleInput
buildRevokeMigratorRoleInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { organizationId = required____.organizationId, actor = required____.actor, actorType = required____.actorType, clientMutationId = optionals____.clientMutationId }


type alias RevokeMigratorRoleInputRequiredFields =
    { organizationId : Github.ScalarCodecs.Id
    , actor : String
    , actorType : Github.Enum.ActorType.ActorType
    }


type alias RevokeMigratorRoleInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the RevokeMigratorRoleInput input object.
-}
type alias RevokeMigratorRoleInput =
    { organizationId : Github.ScalarCodecs.Id
    , actor : String
    , actorType : Github.Enum.ActorType.ActorType
    , clientMutationId : OptionalArgument String
    }


{-| Encode a RevokeMigratorRoleInput into a value that can be used as an argument.
-}
encodeRevokeMigratorRoleInput : RevokeMigratorRoleInput -> Value
encodeRevokeMigratorRoleInput input____ =
    Encode.maybeObject
        [ ( "organizationId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.organizationId |> Just ), ( "actor", Encode.string input____.actor |> Just ), ( "actorType", Encode.enum Github.Enum.ActorType.toString input____.actorType |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildSavedReplyOrder :
    SavedReplyOrderRequiredFields
    -> SavedReplyOrder
buildSavedReplyOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias SavedReplyOrderRequiredFields =
    { field : Github.Enum.SavedReplyOrderField.SavedReplyOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the SavedReplyOrder input object.
-}
type alias SavedReplyOrder =
    { field : Github.Enum.SavedReplyOrderField.SavedReplyOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a SavedReplyOrder into a value that can be used as an argument.
-}
encodeSavedReplyOrder : SavedReplyOrder -> Value
encodeSavedReplyOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.SavedReplyOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildSecurityAdvisoryIdentifierFilter :
    SecurityAdvisoryIdentifierFilterRequiredFields
    -> SecurityAdvisoryIdentifierFilter
buildSecurityAdvisoryIdentifierFilter required____ =
    { type_ = required____.type_, value = required____.value }


type alias SecurityAdvisoryIdentifierFilterRequiredFields =
    { type_ : Github.Enum.SecurityAdvisoryIdentifierType.SecurityAdvisoryIdentifierType
    , value : String
    }


{-| Type for the SecurityAdvisoryIdentifierFilter input object.
-}
type alias SecurityAdvisoryIdentifierFilter =
    { type_ : Github.Enum.SecurityAdvisoryIdentifierType.SecurityAdvisoryIdentifierType
    , value : String
    }


{-| Encode a SecurityAdvisoryIdentifierFilter into a value that can be used as an argument.
-}
encodeSecurityAdvisoryIdentifierFilter : SecurityAdvisoryIdentifierFilter -> Value
encodeSecurityAdvisoryIdentifierFilter input____ =
    Encode.maybeObject
        [ ( "type", Encode.enum Github.Enum.SecurityAdvisoryIdentifierType.toString input____.type_ |> Just ), ( "value", Encode.string input____.value |> Just ) ]


buildSecurityAdvisoryOrder :
    SecurityAdvisoryOrderRequiredFields
    -> SecurityAdvisoryOrder
buildSecurityAdvisoryOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias SecurityAdvisoryOrderRequiredFields =
    { field : Github.Enum.SecurityAdvisoryOrderField.SecurityAdvisoryOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the SecurityAdvisoryOrder input object.
-}
type alias SecurityAdvisoryOrder =
    { field : Github.Enum.SecurityAdvisoryOrderField.SecurityAdvisoryOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a SecurityAdvisoryOrder into a value that can be used as an argument.
-}
encodeSecurityAdvisoryOrder : SecurityAdvisoryOrder -> Value
encodeSecurityAdvisoryOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.SecurityAdvisoryOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildSecurityVulnerabilityOrder :
    SecurityVulnerabilityOrderRequiredFields
    -> SecurityVulnerabilityOrder
buildSecurityVulnerabilityOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias SecurityVulnerabilityOrderRequiredFields =
    { field : Github.Enum.SecurityVulnerabilityOrderField.SecurityVulnerabilityOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the SecurityVulnerabilityOrder input object.
-}
type alias SecurityVulnerabilityOrder =
    { field : Github.Enum.SecurityVulnerabilityOrderField.SecurityVulnerabilityOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a SecurityVulnerabilityOrder into a value that can be used as an argument.
-}
encodeSecurityVulnerabilityOrder : SecurityVulnerabilityOrder -> Value
encodeSecurityVulnerabilityOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.SecurityVulnerabilityOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildSetEnterpriseIdentityProviderInput :
    SetEnterpriseIdentityProviderInputRequiredFields
    -> (SetEnterpriseIdentityProviderInputOptionalFields -> SetEnterpriseIdentityProviderInputOptionalFields)
    -> SetEnterpriseIdentityProviderInput
buildSetEnterpriseIdentityProviderInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { issuer = Absent, clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, ssoUrl = required____.ssoUrl, issuer = optionals____.issuer, idpCertificate = required____.idpCertificate, signatureMethod = required____.signatureMethod, digestMethod = required____.digestMethod, clientMutationId = optionals____.clientMutationId }


type alias SetEnterpriseIdentityProviderInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , ssoUrl : Github.ScalarCodecs.Uri
    , idpCertificate : String
    , signatureMethod : Github.Enum.SamlSignatureAlgorithm.SamlSignatureAlgorithm
    , digestMethod : Github.Enum.SamlDigestAlgorithm.SamlDigestAlgorithm
    }


type alias SetEnterpriseIdentityProviderInputOptionalFields =
    { issuer : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the SetEnterpriseIdentityProviderInput input object.
-}
type alias SetEnterpriseIdentityProviderInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , ssoUrl : Github.ScalarCodecs.Uri
    , issuer : OptionalArgument String
    , idpCertificate : String
    , signatureMethod : Github.Enum.SamlSignatureAlgorithm.SamlSignatureAlgorithm
    , digestMethod : Github.Enum.SamlDigestAlgorithm.SamlDigestAlgorithm
    , clientMutationId : OptionalArgument String
    }


{-| Encode a SetEnterpriseIdentityProviderInput into a value that can be used as an argument.
-}
encodeSetEnterpriseIdentityProviderInput : SetEnterpriseIdentityProviderInput -> Value
encodeSetEnterpriseIdentityProviderInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "ssoUrl", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecUri) input____.ssoUrl |> Just ), ( "issuer", Encode.string |> Encode.optional input____.issuer ), ( "idpCertificate", Encode.string input____.idpCertificate |> Just ), ( "signatureMethod", Encode.enum Github.Enum.SamlSignatureAlgorithm.toString input____.signatureMethod |> Just ), ( "digestMethod", Encode.enum Github.Enum.SamlDigestAlgorithm.toString input____.digestMethod |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildSetOrganizationInteractionLimitInput :
    SetOrganizationInteractionLimitInputRequiredFields
    -> (SetOrganizationInteractionLimitInputOptionalFields -> SetOrganizationInteractionLimitInputOptionalFields)
    -> SetOrganizationInteractionLimitInput
buildSetOrganizationInteractionLimitInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { expiry = Absent, clientMutationId = Absent }
    in
    { organizationId = required____.organizationId, limit = required____.limit, expiry = optionals____.expiry, clientMutationId = optionals____.clientMutationId }


type alias SetOrganizationInteractionLimitInputRequiredFields =
    { organizationId : Github.ScalarCodecs.Id
    , limit : Github.Enum.RepositoryInteractionLimit.RepositoryInteractionLimit
    }


type alias SetOrganizationInteractionLimitInputOptionalFields =
    { expiry : OptionalArgument Github.Enum.RepositoryInteractionLimitExpiry.RepositoryInteractionLimitExpiry
    , clientMutationId : OptionalArgument String
    }


{-| Type for the SetOrganizationInteractionLimitInput input object.
-}
type alias SetOrganizationInteractionLimitInput =
    { organizationId : Github.ScalarCodecs.Id
    , limit : Github.Enum.RepositoryInteractionLimit.RepositoryInteractionLimit
    , expiry : OptionalArgument Github.Enum.RepositoryInteractionLimitExpiry.RepositoryInteractionLimitExpiry
    , clientMutationId : OptionalArgument String
    }


{-| Encode a SetOrganizationInteractionLimitInput into a value that can be used as an argument.
-}
encodeSetOrganizationInteractionLimitInput : SetOrganizationInteractionLimitInput -> Value
encodeSetOrganizationInteractionLimitInput input____ =
    Encode.maybeObject
        [ ( "organizationId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.organizationId |> Just ), ( "limit", Encode.enum Github.Enum.RepositoryInteractionLimit.toString input____.limit |> Just ), ( "expiry", Encode.enum Github.Enum.RepositoryInteractionLimitExpiry.toString |> Encode.optional input____.expiry ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildSetRepositoryInteractionLimitInput :
    SetRepositoryInteractionLimitInputRequiredFields
    -> (SetRepositoryInteractionLimitInputOptionalFields -> SetRepositoryInteractionLimitInputOptionalFields)
    -> SetRepositoryInteractionLimitInput
buildSetRepositoryInteractionLimitInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { expiry = Absent, clientMutationId = Absent }
    in
    { repositoryId = required____.repositoryId, limit = required____.limit, expiry = optionals____.expiry, clientMutationId = optionals____.clientMutationId }


type alias SetRepositoryInteractionLimitInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id
    , limit : Github.Enum.RepositoryInteractionLimit.RepositoryInteractionLimit
    }


type alias SetRepositoryInteractionLimitInputOptionalFields =
    { expiry : OptionalArgument Github.Enum.RepositoryInteractionLimitExpiry.RepositoryInteractionLimitExpiry
    , clientMutationId : OptionalArgument String
    }


{-| Type for the SetRepositoryInteractionLimitInput input object.
-}
type alias SetRepositoryInteractionLimitInput =
    { repositoryId : Github.ScalarCodecs.Id
    , limit : Github.Enum.RepositoryInteractionLimit.RepositoryInteractionLimit
    , expiry : OptionalArgument Github.Enum.RepositoryInteractionLimitExpiry.RepositoryInteractionLimitExpiry
    , clientMutationId : OptionalArgument String
    }


{-| Encode a SetRepositoryInteractionLimitInput into a value that can be used as an argument.
-}
encodeSetRepositoryInteractionLimitInput : SetRepositoryInteractionLimitInput -> Value
encodeSetRepositoryInteractionLimitInput input____ =
    Encode.maybeObject
        [ ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "limit", Encode.enum Github.Enum.RepositoryInteractionLimit.toString input____.limit |> Just ), ( "expiry", Encode.enum Github.Enum.RepositoryInteractionLimitExpiry.toString |> Encode.optional input____.expiry ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildSetUserInteractionLimitInput :
    SetUserInteractionLimitInputRequiredFields
    -> (SetUserInteractionLimitInputOptionalFields -> SetUserInteractionLimitInputOptionalFields)
    -> SetUserInteractionLimitInput
buildSetUserInteractionLimitInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { expiry = Absent, clientMutationId = Absent }
    in
    { userId = required____.userId, limit = required____.limit, expiry = optionals____.expiry, clientMutationId = optionals____.clientMutationId }


type alias SetUserInteractionLimitInputRequiredFields =
    { userId : Github.ScalarCodecs.Id
    , limit : Github.Enum.RepositoryInteractionLimit.RepositoryInteractionLimit
    }


type alias SetUserInteractionLimitInputOptionalFields =
    { expiry : OptionalArgument Github.Enum.RepositoryInteractionLimitExpiry.RepositoryInteractionLimitExpiry
    , clientMutationId : OptionalArgument String
    }


{-| Type for the SetUserInteractionLimitInput input object.
-}
type alias SetUserInteractionLimitInput =
    { userId : Github.ScalarCodecs.Id
    , limit : Github.Enum.RepositoryInteractionLimit.RepositoryInteractionLimit
    , expiry : OptionalArgument Github.Enum.RepositoryInteractionLimitExpiry.RepositoryInteractionLimitExpiry
    , clientMutationId : OptionalArgument String
    }


{-| Encode a SetUserInteractionLimitInput into a value that can be used as an argument.
-}
encodeSetUserInteractionLimitInput : SetUserInteractionLimitInput -> Value
encodeSetUserInteractionLimitInput input____ =
    Encode.maybeObject
        [ ( "userId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.userId |> Just ), ( "limit", Encode.enum Github.Enum.RepositoryInteractionLimit.toString input____.limit |> Just ), ( "expiry", Encode.enum Github.Enum.RepositoryInteractionLimitExpiry.toString |> Encode.optional input____.expiry ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildSponsorOrder :
    SponsorOrderRequiredFields
    -> SponsorOrder
buildSponsorOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias SponsorOrderRequiredFields =
    { field : Github.Enum.SponsorOrderField.SponsorOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the SponsorOrder input object.
-}
type alias SponsorOrder =
    { field : Github.Enum.SponsorOrderField.SponsorOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a SponsorOrder into a value that can be used as an argument.
-}
encodeSponsorOrder : SponsorOrder -> Value
encodeSponsorOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.SponsorOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildSponsorableOrder :
    SponsorableOrderRequiredFields
    -> SponsorableOrder
buildSponsorableOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias SponsorableOrderRequiredFields =
    { field : Github.Enum.SponsorableOrderField.SponsorableOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the SponsorableOrder input object.
-}
type alias SponsorableOrder =
    { field : Github.Enum.SponsorableOrderField.SponsorableOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a SponsorableOrder into a value that can be used as an argument.
-}
encodeSponsorableOrder : SponsorableOrder -> Value
encodeSponsorableOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.SponsorableOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildSponsorsActivityOrder :
    SponsorsActivityOrderRequiredFields
    -> SponsorsActivityOrder
buildSponsorsActivityOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias SponsorsActivityOrderRequiredFields =
    { field : Github.Enum.SponsorsActivityOrderField.SponsorsActivityOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the SponsorsActivityOrder input object.
-}
type alias SponsorsActivityOrder =
    { field : Github.Enum.SponsorsActivityOrderField.SponsorsActivityOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a SponsorsActivityOrder into a value that can be used as an argument.
-}
encodeSponsorsActivityOrder : SponsorsActivityOrder -> Value
encodeSponsorsActivityOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.SponsorsActivityOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildSponsorsTierOrder :
    SponsorsTierOrderRequiredFields
    -> SponsorsTierOrder
buildSponsorsTierOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias SponsorsTierOrderRequiredFields =
    { field : Github.Enum.SponsorsTierOrderField.SponsorsTierOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the SponsorsTierOrder input object.
-}
type alias SponsorsTierOrder =
    { field : Github.Enum.SponsorsTierOrderField.SponsorsTierOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a SponsorsTierOrder into a value that can be used as an argument.
-}
encodeSponsorsTierOrder : SponsorsTierOrder -> Value
encodeSponsorsTierOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.SponsorsTierOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildSponsorshipNewsletterOrder :
    SponsorshipNewsletterOrderRequiredFields
    -> SponsorshipNewsletterOrder
buildSponsorshipNewsletterOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias SponsorshipNewsletterOrderRequiredFields =
    { field : Github.Enum.SponsorshipNewsletterOrderField.SponsorshipNewsletterOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the SponsorshipNewsletterOrder input object.
-}
type alias SponsorshipNewsletterOrder =
    { field : Github.Enum.SponsorshipNewsletterOrderField.SponsorshipNewsletterOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a SponsorshipNewsletterOrder into a value that can be used as an argument.
-}
encodeSponsorshipNewsletterOrder : SponsorshipNewsletterOrder -> Value
encodeSponsorshipNewsletterOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.SponsorshipNewsletterOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildSponsorshipOrder :
    SponsorshipOrderRequiredFields
    -> SponsorshipOrder
buildSponsorshipOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias SponsorshipOrderRequiredFields =
    { field : Github.Enum.SponsorshipOrderField.SponsorshipOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the SponsorshipOrder input object.
-}
type alias SponsorshipOrder =
    { field : Github.Enum.SponsorshipOrderField.SponsorshipOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a SponsorshipOrder into a value that can be used as an argument.
-}
encodeSponsorshipOrder : SponsorshipOrder -> Value
encodeSponsorshipOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.SponsorshipOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildStarOrder :
    StarOrderRequiredFields
    -> StarOrder
buildStarOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias StarOrderRequiredFields =
    { field : Github.Enum.StarOrderField.StarOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the StarOrder input object.
-}
type alias StarOrder =
    { field : Github.Enum.StarOrderField.StarOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a StarOrder into a value that can be used as an argument.
-}
encodeStarOrder : StarOrder -> Value
encodeStarOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.StarOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildStartRepositoryMigrationInput :
    StartRepositoryMigrationInputRequiredFields
    -> (StartRepositoryMigrationInputOptionalFields -> StartRepositoryMigrationInputOptionalFields)
    -> StartRepositoryMigrationInput
buildStartRepositoryMigrationInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { continueOnError = Absent, gitArchiveUrl = Absent, metadataArchiveUrl = Absent, githubPat = Absent, skipReleases = Absent, targetRepoVisibility = Absent, lockSource = Absent, clientMutationId = Absent }
    in
    { sourceId = required____.sourceId, ownerId = required____.ownerId, sourceRepositoryUrl = required____.sourceRepositoryUrl, repositoryName = required____.repositoryName, continueOnError = optionals____.continueOnError, gitArchiveUrl = optionals____.gitArchiveUrl, metadataArchiveUrl = optionals____.metadataArchiveUrl, accessToken = required____.accessToken, githubPat = optionals____.githubPat, skipReleases = optionals____.skipReleases, targetRepoVisibility = optionals____.targetRepoVisibility, lockSource = optionals____.lockSource, clientMutationId = optionals____.clientMutationId }


type alias StartRepositoryMigrationInputRequiredFields =
    { sourceId : Github.ScalarCodecs.Id
    , ownerId : Github.ScalarCodecs.Id
    , sourceRepositoryUrl : Github.ScalarCodecs.Uri
    , repositoryName : String
    , accessToken : String
    }


type alias StartRepositoryMigrationInputOptionalFields =
    { continueOnError : OptionalArgument Bool
    , gitArchiveUrl : OptionalArgument String
    , metadataArchiveUrl : OptionalArgument String
    , githubPat : OptionalArgument String
    , skipReleases : OptionalArgument Bool
    , targetRepoVisibility : OptionalArgument String
    , lockSource : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the StartRepositoryMigrationInput input object.
-}
type alias StartRepositoryMigrationInput =
    { sourceId : Github.ScalarCodecs.Id
    , ownerId : Github.ScalarCodecs.Id
    , sourceRepositoryUrl : Github.ScalarCodecs.Uri
    , repositoryName : String
    , continueOnError : OptionalArgument Bool
    , gitArchiveUrl : OptionalArgument String
    , metadataArchiveUrl : OptionalArgument String
    , accessToken : String
    , githubPat : OptionalArgument String
    , skipReleases : OptionalArgument Bool
    , targetRepoVisibility : OptionalArgument String
    , lockSource : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a StartRepositoryMigrationInput into a value that can be used as an argument.
-}
encodeStartRepositoryMigrationInput : StartRepositoryMigrationInput -> Value
encodeStartRepositoryMigrationInput input____ =
    Encode.maybeObject
        [ ( "sourceId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.sourceId |> Just ), ( "ownerId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.ownerId |> Just ), ( "sourceRepositoryUrl", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecUri) input____.sourceRepositoryUrl |> Just ), ( "repositoryName", Encode.string input____.repositoryName |> Just ), ( "continueOnError", Encode.bool |> Encode.optional input____.continueOnError ), ( "gitArchiveUrl", Encode.string |> Encode.optional input____.gitArchiveUrl ), ( "metadataArchiveUrl", Encode.string |> Encode.optional input____.metadataArchiveUrl ), ( "accessToken", Encode.string input____.accessToken |> Just ), ( "githubPat", Encode.string |> Encode.optional input____.githubPat ), ( "skipReleases", Encode.bool |> Encode.optional input____.skipReleases ), ( "targetRepoVisibility", Encode.string |> Encode.optional input____.targetRepoVisibility ), ( "lockSource", Encode.bool |> Encode.optional input____.lockSource ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildSubmitPullRequestReviewInput :
    SubmitPullRequestReviewInputRequiredFields
    -> (SubmitPullRequestReviewInputOptionalFields -> SubmitPullRequestReviewInputOptionalFields)
    -> SubmitPullRequestReviewInput
buildSubmitPullRequestReviewInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { pullRequestId = Absent, pullRequestReviewId = Absent, body = Absent, clientMutationId = Absent }
    in
    { pullRequestId = optionals____.pullRequestId, pullRequestReviewId = optionals____.pullRequestReviewId, event = required____.event, body = optionals____.body, clientMutationId = optionals____.clientMutationId }


type alias SubmitPullRequestReviewInputRequiredFields =
    { event : Github.Enum.PullRequestReviewEvent.PullRequestReviewEvent }


type alias SubmitPullRequestReviewInputOptionalFields =
    { pullRequestId : OptionalArgument Github.ScalarCodecs.Id
    , pullRequestReviewId : OptionalArgument Github.ScalarCodecs.Id
    , body : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the SubmitPullRequestReviewInput input object.
-}
type alias SubmitPullRequestReviewInput =
    { pullRequestId : OptionalArgument Github.ScalarCodecs.Id
    , pullRequestReviewId : OptionalArgument Github.ScalarCodecs.Id
    , event : Github.Enum.PullRequestReviewEvent.PullRequestReviewEvent
    , body : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a SubmitPullRequestReviewInput into a value that can be used as an argument.
-}
encodeSubmitPullRequestReviewInput : SubmitPullRequestReviewInput -> Value
encodeSubmitPullRequestReviewInput input____ =
    Encode.maybeObject
        [ ( "pullRequestId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.pullRequestId ), ( "pullRequestReviewId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.pullRequestReviewId ), ( "event", Encode.enum Github.Enum.PullRequestReviewEvent.toString input____.event |> Just ), ( "body", Encode.string |> Encode.optional input____.body ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildTeamDiscussionCommentOrder :
    TeamDiscussionCommentOrderRequiredFields
    -> TeamDiscussionCommentOrder
buildTeamDiscussionCommentOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias TeamDiscussionCommentOrderRequiredFields =
    { field : Github.Enum.TeamDiscussionCommentOrderField.TeamDiscussionCommentOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the TeamDiscussionCommentOrder input object.
-}
type alias TeamDiscussionCommentOrder =
    { field : Github.Enum.TeamDiscussionCommentOrderField.TeamDiscussionCommentOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a TeamDiscussionCommentOrder into a value that can be used as an argument.
-}
encodeTeamDiscussionCommentOrder : TeamDiscussionCommentOrder -> Value
encodeTeamDiscussionCommentOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.TeamDiscussionCommentOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildTeamDiscussionOrder :
    TeamDiscussionOrderRequiredFields
    -> TeamDiscussionOrder
buildTeamDiscussionOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias TeamDiscussionOrderRequiredFields =
    { field : Github.Enum.TeamDiscussionOrderField.TeamDiscussionOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the TeamDiscussionOrder input object.
-}
type alias TeamDiscussionOrder =
    { field : Github.Enum.TeamDiscussionOrderField.TeamDiscussionOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a TeamDiscussionOrder into a value that can be used as an argument.
-}
encodeTeamDiscussionOrder : TeamDiscussionOrder -> Value
encodeTeamDiscussionOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.TeamDiscussionOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildTeamMemberOrder :
    TeamMemberOrderRequiredFields
    -> TeamMemberOrder
buildTeamMemberOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias TeamMemberOrderRequiredFields =
    { field : Github.Enum.TeamMemberOrderField.TeamMemberOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the TeamMemberOrder input object.
-}
type alias TeamMemberOrder =
    { field : Github.Enum.TeamMemberOrderField.TeamMemberOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a TeamMemberOrder into a value that can be used as an argument.
-}
encodeTeamMemberOrder : TeamMemberOrder -> Value
encodeTeamMemberOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.TeamMemberOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildTeamOrder :
    TeamOrderRequiredFields
    -> TeamOrder
buildTeamOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias TeamOrderRequiredFields =
    { field : Github.Enum.TeamOrderField.TeamOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the TeamOrder input object.
-}
type alias TeamOrder =
    { field : Github.Enum.TeamOrderField.TeamOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a TeamOrder into a value that can be used as an argument.
-}
encodeTeamOrder : TeamOrder -> Value
encodeTeamOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.TeamOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildTeamRepositoryOrder :
    TeamRepositoryOrderRequiredFields
    -> TeamRepositoryOrder
buildTeamRepositoryOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias TeamRepositoryOrderRequiredFields =
    { field : Github.Enum.TeamRepositoryOrderField.TeamRepositoryOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the TeamRepositoryOrder input object.
-}
type alias TeamRepositoryOrder =
    { field : Github.Enum.TeamRepositoryOrderField.TeamRepositoryOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a TeamRepositoryOrder into a value that can be used as an argument.
-}
encodeTeamRepositoryOrder : TeamRepositoryOrder -> Value
encodeTeamRepositoryOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.TeamRepositoryOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildTransferIssueInput :
    TransferIssueInputRequiredFields
    -> (TransferIssueInputOptionalFields -> TransferIssueInputOptionalFields)
    -> TransferIssueInput
buildTransferIssueInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { createLabelsIfMissing = Absent, clientMutationId = Absent }
    in
    { issueId = required____.issueId, repositoryId = required____.repositoryId, createLabelsIfMissing = optionals____.createLabelsIfMissing, clientMutationId = optionals____.clientMutationId }


type alias TransferIssueInputRequiredFields =
    { issueId : Github.ScalarCodecs.Id
    , repositoryId : Github.ScalarCodecs.Id
    }


type alias TransferIssueInputOptionalFields =
    { createLabelsIfMissing : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the TransferIssueInput input object.
-}
type alias TransferIssueInput =
    { issueId : Github.ScalarCodecs.Id
    , repositoryId : Github.ScalarCodecs.Id
    , createLabelsIfMissing : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a TransferIssueInput into a value that can be used as an argument.
-}
encodeTransferIssueInput : TransferIssueInput -> Value
encodeTransferIssueInput input____ =
    Encode.maybeObject
        [ ( "issueId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.issueId |> Just ), ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "createLabelsIfMissing", Encode.bool |> Encode.optional input____.createLabelsIfMissing ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUnarchiveRepositoryInput :
    UnarchiveRepositoryInputRequiredFields
    -> (UnarchiveRepositoryInputOptionalFields -> UnarchiveRepositoryInputOptionalFields)
    -> UnarchiveRepositoryInput
buildUnarchiveRepositoryInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { repositoryId = required____.repositoryId, clientMutationId = optionals____.clientMutationId }


type alias UnarchiveRepositoryInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id }


type alias UnarchiveRepositoryInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UnarchiveRepositoryInput input object.
-}
type alias UnarchiveRepositoryInput =
    { repositoryId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UnarchiveRepositoryInput into a value that can be used as an argument.
-}
encodeUnarchiveRepositoryInput : UnarchiveRepositoryInput -> Value
encodeUnarchiveRepositoryInput input____ =
    Encode.maybeObject
        [ ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUnfollowOrganizationInput :
    UnfollowOrganizationInputRequiredFields
    -> (UnfollowOrganizationInputOptionalFields -> UnfollowOrganizationInputOptionalFields)
    -> UnfollowOrganizationInput
buildUnfollowOrganizationInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { organizationId = required____.organizationId, clientMutationId = optionals____.clientMutationId }


type alias UnfollowOrganizationInputRequiredFields =
    { organizationId : Github.ScalarCodecs.Id }


type alias UnfollowOrganizationInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UnfollowOrganizationInput input object.
-}
type alias UnfollowOrganizationInput =
    { organizationId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UnfollowOrganizationInput into a value that can be used as an argument.
-}
encodeUnfollowOrganizationInput : UnfollowOrganizationInput -> Value
encodeUnfollowOrganizationInput input____ =
    Encode.maybeObject
        [ ( "organizationId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.organizationId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUnfollowUserInput :
    UnfollowUserInputRequiredFields
    -> (UnfollowUserInputOptionalFields -> UnfollowUserInputOptionalFields)
    -> UnfollowUserInput
buildUnfollowUserInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { userId = required____.userId, clientMutationId = optionals____.clientMutationId }


type alias UnfollowUserInputRequiredFields =
    { userId : Github.ScalarCodecs.Id }


type alias UnfollowUserInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UnfollowUserInput input object.
-}
type alias UnfollowUserInput =
    { userId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UnfollowUserInput into a value that can be used as an argument.
-}
encodeUnfollowUserInput : UnfollowUserInput -> Value
encodeUnfollowUserInput input____ =
    Encode.maybeObject
        [ ( "userId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.userId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUnlinkRepositoryFromProjectInput :
    UnlinkRepositoryFromProjectInputRequiredFields
    -> (UnlinkRepositoryFromProjectInputOptionalFields -> UnlinkRepositoryFromProjectInputOptionalFields)
    -> UnlinkRepositoryFromProjectInput
buildUnlinkRepositoryFromProjectInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { projectId = required____.projectId, repositoryId = required____.repositoryId, clientMutationId = optionals____.clientMutationId }


type alias UnlinkRepositoryFromProjectInputRequiredFields =
    { projectId : Github.ScalarCodecs.Id
    , repositoryId : Github.ScalarCodecs.Id
    }


type alias UnlinkRepositoryFromProjectInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UnlinkRepositoryFromProjectInput input object.
-}
type alias UnlinkRepositoryFromProjectInput =
    { projectId : Github.ScalarCodecs.Id
    , repositoryId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UnlinkRepositoryFromProjectInput into a value that can be used as an argument.
-}
encodeUnlinkRepositoryFromProjectInput : UnlinkRepositoryFromProjectInput -> Value
encodeUnlinkRepositoryFromProjectInput input____ =
    Encode.maybeObject
        [ ( "projectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.projectId |> Just ), ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUnlockLockableInput :
    UnlockLockableInputRequiredFields
    -> (UnlockLockableInputOptionalFields -> UnlockLockableInputOptionalFields)
    -> UnlockLockableInput
buildUnlockLockableInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { lockableId = required____.lockableId, clientMutationId = optionals____.clientMutationId }


type alias UnlockLockableInputRequiredFields =
    { lockableId : Github.ScalarCodecs.Id }


type alias UnlockLockableInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UnlockLockableInput input object.
-}
type alias UnlockLockableInput =
    { lockableId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UnlockLockableInput into a value that can be used as an argument.
-}
encodeUnlockLockableInput : UnlockLockableInput -> Value
encodeUnlockLockableInput input____ =
    Encode.maybeObject
        [ ( "lockableId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.lockableId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUnmarkDiscussionCommentAsAnswerInput :
    UnmarkDiscussionCommentAsAnswerInputRequiredFields
    -> (UnmarkDiscussionCommentAsAnswerInputOptionalFields -> UnmarkDiscussionCommentAsAnswerInputOptionalFields)
    -> UnmarkDiscussionCommentAsAnswerInput
buildUnmarkDiscussionCommentAsAnswerInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { id = required____.id, clientMutationId = optionals____.clientMutationId }


type alias UnmarkDiscussionCommentAsAnswerInputRequiredFields =
    { id : Github.ScalarCodecs.Id }


type alias UnmarkDiscussionCommentAsAnswerInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UnmarkDiscussionCommentAsAnswerInput input object.
-}
type alias UnmarkDiscussionCommentAsAnswerInput =
    { id : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UnmarkDiscussionCommentAsAnswerInput into a value that can be used as an argument.
-}
encodeUnmarkDiscussionCommentAsAnswerInput : UnmarkDiscussionCommentAsAnswerInput -> Value
encodeUnmarkDiscussionCommentAsAnswerInput input____ =
    Encode.maybeObject
        [ ( "id", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUnmarkFileAsViewedInput :
    UnmarkFileAsViewedInputRequiredFields
    -> (UnmarkFileAsViewedInputOptionalFields -> UnmarkFileAsViewedInputOptionalFields)
    -> UnmarkFileAsViewedInput
buildUnmarkFileAsViewedInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { pullRequestId = required____.pullRequestId, path = required____.path, clientMutationId = optionals____.clientMutationId }


type alias UnmarkFileAsViewedInputRequiredFields =
    { pullRequestId : Github.ScalarCodecs.Id
    , path : String
    }


type alias UnmarkFileAsViewedInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UnmarkFileAsViewedInput input object.
-}
type alias UnmarkFileAsViewedInput =
    { pullRequestId : Github.ScalarCodecs.Id
    , path : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UnmarkFileAsViewedInput into a value that can be used as an argument.
-}
encodeUnmarkFileAsViewedInput : UnmarkFileAsViewedInput -> Value
encodeUnmarkFileAsViewedInput input____ =
    Encode.maybeObject
        [ ( "pullRequestId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.pullRequestId |> Just ), ( "path", Encode.string input____.path |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUnmarkIssueAsDuplicateInput :
    UnmarkIssueAsDuplicateInputRequiredFields
    -> (UnmarkIssueAsDuplicateInputOptionalFields -> UnmarkIssueAsDuplicateInputOptionalFields)
    -> UnmarkIssueAsDuplicateInput
buildUnmarkIssueAsDuplicateInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { duplicateId = required____.duplicateId, canonicalId = required____.canonicalId, clientMutationId = optionals____.clientMutationId }


type alias UnmarkIssueAsDuplicateInputRequiredFields =
    { duplicateId : Github.ScalarCodecs.Id
    , canonicalId : Github.ScalarCodecs.Id
    }


type alias UnmarkIssueAsDuplicateInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UnmarkIssueAsDuplicateInput input object.
-}
type alias UnmarkIssueAsDuplicateInput =
    { duplicateId : Github.ScalarCodecs.Id
    , canonicalId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UnmarkIssueAsDuplicateInput into a value that can be used as an argument.
-}
encodeUnmarkIssueAsDuplicateInput : UnmarkIssueAsDuplicateInput -> Value
encodeUnmarkIssueAsDuplicateInput input____ =
    Encode.maybeObject
        [ ( "duplicateId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.duplicateId |> Just ), ( "canonicalId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.canonicalId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUnminimizeCommentInput :
    UnminimizeCommentInputRequiredFields
    -> (UnminimizeCommentInputOptionalFields -> UnminimizeCommentInputOptionalFields)
    -> UnminimizeCommentInput
buildUnminimizeCommentInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { subjectId = required____.subjectId, clientMutationId = optionals____.clientMutationId }


type alias UnminimizeCommentInputRequiredFields =
    { subjectId : Github.ScalarCodecs.Id }


type alias UnminimizeCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UnminimizeCommentInput input object.
-}
type alias UnminimizeCommentInput =
    { subjectId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UnminimizeCommentInput into a value that can be used as an argument.
-}
encodeUnminimizeCommentInput : UnminimizeCommentInput -> Value
encodeUnminimizeCommentInput input____ =
    Encode.maybeObject
        [ ( "subjectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.subjectId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUnpinIssueInput :
    UnpinIssueInputRequiredFields
    -> (UnpinIssueInputOptionalFields -> UnpinIssueInputOptionalFields)
    -> UnpinIssueInput
buildUnpinIssueInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { issueId = required____.issueId, clientMutationId = optionals____.clientMutationId }


type alias UnpinIssueInputRequiredFields =
    { issueId : Github.ScalarCodecs.Id }


type alias UnpinIssueInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UnpinIssueInput input object.
-}
type alias UnpinIssueInput =
    { issueId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UnpinIssueInput into a value that can be used as an argument.
-}
encodeUnpinIssueInput : UnpinIssueInput -> Value
encodeUnpinIssueInput input____ =
    Encode.maybeObject
        [ ( "issueId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.issueId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUnresolveReviewThreadInput :
    UnresolveReviewThreadInputRequiredFields
    -> (UnresolveReviewThreadInputOptionalFields -> UnresolveReviewThreadInputOptionalFields)
    -> UnresolveReviewThreadInput
buildUnresolveReviewThreadInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { threadId = required____.threadId, clientMutationId = optionals____.clientMutationId }


type alias UnresolveReviewThreadInputRequiredFields =
    { threadId : Github.ScalarCodecs.Id }


type alias UnresolveReviewThreadInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UnresolveReviewThreadInput input object.
-}
type alias UnresolveReviewThreadInput =
    { threadId : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UnresolveReviewThreadInput into a value that can be used as an argument.
-}
encodeUnresolveReviewThreadInput : UnresolveReviewThreadInput -> Value
encodeUnresolveReviewThreadInput input____ =
    Encode.maybeObject
        [ ( "threadId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.threadId |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateBranchProtectionRuleInput :
    UpdateBranchProtectionRuleInputRequiredFields
    -> (UpdateBranchProtectionRuleInputOptionalFields -> UpdateBranchProtectionRuleInputOptionalFields)
    -> UpdateBranchProtectionRuleInput
buildUpdateBranchProtectionRuleInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { pattern = Absent, requiresApprovingReviews = Absent, requiredApprovingReviewCount = Absent, requiresCommitSignatures = Absent, requiresLinearHistory = Absent, blocksCreations = Absent, allowsForcePushes = Absent, allowsDeletions = Absent, isAdminEnforced = Absent, requiresStatusChecks = Absent, requiresStrictStatusChecks = Absent, requiresCodeOwnerReviews = Absent, dismissesStaleReviews = Absent, restrictsReviewDismissals = Absent, reviewDismissalActorIds = Absent, bypassPullRequestActorIds = Absent, bypassForcePushActorIds = Absent, restrictsPushes = Absent, pushActorIds = Absent, requiredStatusCheckContexts = Absent, requiredStatusChecks = Absent, requiresConversationResolution = Absent, requireLastPushApproval = Absent, lockBranch = Absent, lockAllowsFetchAndMerge = Absent, clientMutationId = Absent }
    in
    { branchProtectionRuleId = required____.branchProtectionRuleId, pattern = optionals____.pattern, requiresApprovingReviews = optionals____.requiresApprovingReviews, requiredApprovingReviewCount = optionals____.requiredApprovingReviewCount, requiresCommitSignatures = optionals____.requiresCommitSignatures, requiresLinearHistory = optionals____.requiresLinearHistory, blocksCreations = optionals____.blocksCreations, allowsForcePushes = optionals____.allowsForcePushes, allowsDeletions = optionals____.allowsDeletions, isAdminEnforced = optionals____.isAdminEnforced, requiresStatusChecks = optionals____.requiresStatusChecks, requiresStrictStatusChecks = optionals____.requiresStrictStatusChecks, requiresCodeOwnerReviews = optionals____.requiresCodeOwnerReviews, dismissesStaleReviews = optionals____.dismissesStaleReviews, restrictsReviewDismissals = optionals____.restrictsReviewDismissals, reviewDismissalActorIds = optionals____.reviewDismissalActorIds, bypassPullRequestActorIds = optionals____.bypassPullRequestActorIds, bypassForcePushActorIds = optionals____.bypassForcePushActorIds, restrictsPushes = optionals____.restrictsPushes, pushActorIds = optionals____.pushActorIds, requiredStatusCheckContexts = optionals____.requiredStatusCheckContexts, requiredStatusChecks = optionals____.requiredStatusChecks, requiresConversationResolution = optionals____.requiresConversationResolution, requireLastPushApproval = optionals____.requireLastPushApproval, lockBranch = optionals____.lockBranch, lockAllowsFetchAndMerge = optionals____.lockAllowsFetchAndMerge, clientMutationId = optionals____.clientMutationId }


type alias UpdateBranchProtectionRuleInputRequiredFields =
    { branchProtectionRuleId : Github.ScalarCodecs.Id }


type alias UpdateBranchProtectionRuleInputOptionalFields =
    { pattern : OptionalArgument String
    , requiresApprovingReviews : OptionalArgument Bool
    , requiredApprovingReviewCount : OptionalArgument Int
    , requiresCommitSignatures : OptionalArgument Bool
    , requiresLinearHistory : OptionalArgument Bool
    , blocksCreations : OptionalArgument Bool
    , allowsForcePushes : OptionalArgument Bool
    , allowsDeletions : OptionalArgument Bool
    , isAdminEnforced : OptionalArgument Bool
    , requiresStatusChecks : OptionalArgument Bool
    , requiresStrictStatusChecks : OptionalArgument Bool
    , requiresCodeOwnerReviews : OptionalArgument Bool
    , dismissesStaleReviews : OptionalArgument Bool
    , restrictsReviewDismissals : OptionalArgument Bool
    , reviewDismissalActorIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , bypassPullRequestActorIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , bypassForcePushActorIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , restrictsPushes : OptionalArgument Bool
    , pushActorIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , requiredStatusCheckContexts : OptionalArgument (List String)
    , requiredStatusChecks : OptionalArgument (List RequiredStatusCheckInput)
    , requiresConversationResolution : OptionalArgument Bool
    , requireLastPushApproval : OptionalArgument Bool
    , lockBranch : OptionalArgument Bool
    , lockAllowsFetchAndMerge : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateBranchProtectionRuleInput input object.
-}
type alias UpdateBranchProtectionRuleInput =
    { branchProtectionRuleId : Github.ScalarCodecs.Id
    , pattern : OptionalArgument String
    , requiresApprovingReviews : OptionalArgument Bool
    , requiredApprovingReviewCount : OptionalArgument Int
    , requiresCommitSignatures : OptionalArgument Bool
    , requiresLinearHistory : OptionalArgument Bool
    , blocksCreations : OptionalArgument Bool
    , allowsForcePushes : OptionalArgument Bool
    , allowsDeletions : OptionalArgument Bool
    , isAdminEnforced : OptionalArgument Bool
    , requiresStatusChecks : OptionalArgument Bool
    , requiresStrictStatusChecks : OptionalArgument Bool
    , requiresCodeOwnerReviews : OptionalArgument Bool
    , dismissesStaleReviews : OptionalArgument Bool
    , restrictsReviewDismissals : OptionalArgument Bool
    , reviewDismissalActorIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , bypassPullRequestActorIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , bypassForcePushActorIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , restrictsPushes : OptionalArgument Bool
    , pushActorIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , requiredStatusCheckContexts : OptionalArgument (List String)
    , requiredStatusChecks : OptionalArgument (List RequiredStatusCheckInput)
    , requiresConversationResolution : OptionalArgument Bool
    , requireLastPushApproval : OptionalArgument Bool
    , lockBranch : OptionalArgument Bool
    , lockAllowsFetchAndMerge : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateBranchProtectionRuleInput into a value that can be used as an argument.
-}
encodeUpdateBranchProtectionRuleInput : UpdateBranchProtectionRuleInput -> Value
encodeUpdateBranchProtectionRuleInput input____ =
    Encode.maybeObject
        [ ( "branchProtectionRuleId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.branchProtectionRuleId |> Just ), ( "pattern", Encode.string |> Encode.optional input____.pattern ), ( "requiresApprovingReviews", Encode.bool |> Encode.optional input____.requiresApprovingReviews ), ( "requiredApprovingReviewCount", Encode.int |> Encode.optional input____.requiredApprovingReviewCount ), ( "requiresCommitSignatures", Encode.bool |> Encode.optional input____.requiresCommitSignatures ), ( "requiresLinearHistory", Encode.bool |> Encode.optional input____.requiresLinearHistory ), ( "blocksCreations", Encode.bool |> Encode.optional input____.blocksCreations ), ( "allowsForcePushes", Encode.bool |> Encode.optional input____.allowsForcePushes ), ( "allowsDeletions", Encode.bool |> Encode.optional input____.allowsDeletions ), ( "isAdminEnforced", Encode.bool |> Encode.optional input____.isAdminEnforced ), ( "requiresStatusChecks", Encode.bool |> Encode.optional input____.requiresStatusChecks ), ( "requiresStrictStatusChecks", Encode.bool |> Encode.optional input____.requiresStrictStatusChecks ), ( "requiresCodeOwnerReviews", Encode.bool |> Encode.optional input____.requiresCodeOwnerReviews ), ( "dismissesStaleReviews", Encode.bool |> Encode.optional input____.dismissesStaleReviews ), ( "restrictsReviewDismissals", Encode.bool |> Encode.optional input____.restrictsReviewDismissals ), ( "reviewDismissalActorIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.reviewDismissalActorIds ), ( "bypassPullRequestActorIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.bypassPullRequestActorIds ), ( "bypassForcePushActorIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.bypassForcePushActorIds ), ( "restrictsPushes", Encode.bool |> Encode.optional input____.restrictsPushes ), ( "pushActorIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.pushActorIds ), ( "requiredStatusCheckContexts", (Encode.string |> Encode.list) |> Encode.optional input____.requiredStatusCheckContexts ), ( "requiredStatusChecks", (encodeRequiredStatusCheckInput |> Encode.list) |> Encode.optional input____.requiredStatusChecks ), ( "requiresConversationResolution", Encode.bool |> Encode.optional input____.requiresConversationResolution ), ( "requireLastPushApproval", Encode.bool |> Encode.optional input____.requireLastPushApproval ), ( "lockBranch", Encode.bool |> Encode.optional input____.lockBranch ), ( "lockAllowsFetchAndMerge", Encode.bool |> Encode.optional input____.lockAllowsFetchAndMerge ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateCheckRunInput :
    UpdateCheckRunInputRequiredFields
    -> (UpdateCheckRunInputOptionalFields -> UpdateCheckRunInputOptionalFields)
    -> UpdateCheckRunInput
buildUpdateCheckRunInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { name = Absent, detailsUrl = Absent, externalId = Absent, status = Absent, startedAt = Absent, conclusion = Absent, completedAt = Absent, output = Absent, actions = Absent, clientMutationId = Absent }
    in
    { repositoryId = required____.repositoryId, checkRunId = required____.checkRunId, name = optionals____.name, detailsUrl = optionals____.detailsUrl, externalId = optionals____.externalId, status = optionals____.status, startedAt = optionals____.startedAt, conclusion = optionals____.conclusion, completedAt = optionals____.completedAt, output = optionals____.output, actions = optionals____.actions, clientMutationId = optionals____.clientMutationId }


type alias UpdateCheckRunInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id
    , checkRunId : Github.ScalarCodecs.Id
    }


type alias UpdateCheckRunInputOptionalFields =
    { name : OptionalArgument String
    , detailsUrl : OptionalArgument Github.ScalarCodecs.Uri
    , externalId : OptionalArgument String
    , status : OptionalArgument Github.Enum.RequestableCheckStatusState.RequestableCheckStatusState
    , startedAt : OptionalArgument Github.ScalarCodecs.DateTime
    , conclusion : OptionalArgument Github.Enum.CheckConclusionState.CheckConclusionState
    , completedAt : OptionalArgument Github.ScalarCodecs.DateTime
    , output : OptionalArgument CheckRunOutput
    , actions : OptionalArgument (List CheckRunAction)
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateCheckRunInput input object.
-}
type alias UpdateCheckRunInput =
    { repositoryId : Github.ScalarCodecs.Id
    , checkRunId : Github.ScalarCodecs.Id
    , name : OptionalArgument String
    , detailsUrl : OptionalArgument Github.ScalarCodecs.Uri
    , externalId : OptionalArgument String
    , status : OptionalArgument Github.Enum.RequestableCheckStatusState.RequestableCheckStatusState
    , startedAt : OptionalArgument Github.ScalarCodecs.DateTime
    , conclusion : OptionalArgument Github.Enum.CheckConclusionState.CheckConclusionState
    , completedAt : OptionalArgument Github.ScalarCodecs.DateTime
    , output : OptionalArgument CheckRunOutput
    , actions : OptionalArgument (List CheckRunAction)
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateCheckRunInput into a value that can be used as an argument.
-}
encodeUpdateCheckRunInput : UpdateCheckRunInput -> Value
encodeUpdateCheckRunInput input____ =
    Encode.maybeObject
        [ ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "checkRunId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.checkRunId |> Just ), ( "name", Encode.string |> Encode.optional input____.name ), ( "detailsUrl", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecUri) |> Encode.optional input____.detailsUrl ), ( "externalId", Encode.string |> Encode.optional input____.externalId ), ( "status", Encode.enum Github.Enum.RequestableCheckStatusState.toString |> Encode.optional input____.status ), ( "startedAt", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.startedAt ), ( "conclusion", Encode.enum Github.Enum.CheckConclusionState.toString |> Encode.optional input____.conclusion ), ( "completedAt", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecDateTime) |> Encode.optional input____.completedAt ), ( "output", encodeCheckRunOutput |> Encode.optional input____.output ), ( "actions", (encodeCheckRunAction |> Encode.list) |> Encode.optional input____.actions ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateCheckSuitePreferencesInput :
    UpdateCheckSuitePreferencesInputRequiredFields
    -> (UpdateCheckSuitePreferencesInputOptionalFields -> UpdateCheckSuitePreferencesInputOptionalFields)
    -> UpdateCheckSuitePreferencesInput
buildUpdateCheckSuitePreferencesInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { repositoryId = required____.repositoryId, autoTriggerPreferences = required____.autoTriggerPreferences, clientMutationId = optionals____.clientMutationId }


type alias UpdateCheckSuitePreferencesInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id
    , autoTriggerPreferences : List CheckSuiteAutoTriggerPreference
    }


type alias UpdateCheckSuitePreferencesInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateCheckSuitePreferencesInput input object.
-}
type alias UpdateCheckSuitePreferencesInput =
    { repositoryId : Github.ScalarCodecs.Id
    , autoTriggerPreferences : List CheckSuiteAutoTriggerPreference
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateCheckSuitePreferencesInput into a value that can be used as an argument.
-}
encodeUpdateCheckSuitePreferencesInput : UpdateCheckSuitePreferencesInput -> Value
encodeUpdateCheckSuitePreferencesInput input____ =
    Encode.maybeObject
        [ ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "autoTriggerPreferences", (encodeCheckSuiteAutoTriggerPreference |> Encode.list) input____.autoTriggerPreferences |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateDiscussionCommentInput :
    UpdateDiscussionCommentInputRequiredFields
    -> (UpdateDiscussionCommentInputOptionalFields -> UpdateDiscussionCommentInputOptionalFields)
    -> UpdateDiscussionCommentInput
buildUpdateDiscussionCommentInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { commentId = required____.commentId, body = required____.body, clientMutationId = optionals____.clientMutationId }


type alias UpdateDiscussionCommentInputRequiredFields =
    { commentId : Github.ScalarCodecs.Id
    , body : String
    }


type alias UpdateDiscussionCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateDiscussionCommentInput input object.
-}
type alias UpdateDiscussionCommentInput =
    { commentId : Github.ScalarCodecs.Id
    , body : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateDiscussionCommentInput into a value that can be used as an argument.
-}
encodeUpdateDiscussionCommentInput : UpdateDiscussionCommentInput -> Value
encodeUpdateDiscussionCommentInput input____ =
    Encode.maybeObject
        [ ( "commentId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.commentId |> Just ), ( "body", Encode.string input____.body |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateDiscussionInput :
    UpdateDiscussionInputRequiredFields
    -> (UpdateDiscussionInputOptionalFields -> UpdateDiscussionInputOptionalFields)
    -> UpdateDiscussionInput
buildUpdateDiscussionInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { title = Absent, body = Absent, categoryId = Absent, clientMutationId = Absent }
    in
    { discussionId = required____.discussionId, title = optionals____.title, body = optionals____.body, categoryId = optionals____.categoryId, clientMutationId = optionals____.clientMutationId }


type alias UpdateDiscussionInputRequiredFields =
    { discussionId : Github.ScalarCodecs.Id }


type alias UpdateDiscussionInputOptionalFields =
    { title : OptionalArgument String
    , body : OptionalArgument String
    , categoryId : OptionalArgument Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateDiscussionInput input object.
-}
type alias UpdateDiscussionInput =
    { discussionId : Github.ScalarCodecs.Id
    , title : OptionalArgument String
    , body : OptionalArgument String
    , categoryId : OptionalArgument Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateDiscussionInput into a value that can be used as an argument.
-}
encodeUpdateDiscussionInput : UpdateDiscussionInput -> Value
encodeUpdateDiscussionInput input____ =
    Encode.maybeObject
        [ ( "discussionId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.discussionId |> Just ), ( "title", Encode.string |> Encode.optional input____.title ), ( "body", Encode.string |> Encode.optional input____.body ), ( "categoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.categoryId ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateEnterpriseAdministratorRoleInput :
    UpdateEnterpriseAdministratorRoleInputRequiredFields
    -> (UpdateEnterpriseAdministratorRoleInputOptionalFields -> UpdateEnterpriseAdministratorRoleInputOptionalFields)
    -> UpdateEnterpriseAdministratorRoleInput
buildUpdateEnterpriseAdministratorRoleInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, login = required____.login, role = required____.role, clientMutationId = optionals____.clientMutationId }


type alias UpdateEnterpriseAdministratorRoleInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , login : String
    , role : Github.Enum.EnterpriseAdministratorRole.EnterpriseAdministratorRole
    }


type alias UpdateEnterpriseAdministratorRoleInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseAdministratorRoleInput input object.
-}
type alias UpdateEnterpriseAdministratorRoleInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , login : String
    , role : Github.Enum.EnterpriseAdministratorRole.EnterpriseAdministratorRole
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseAdministratorRoleInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseAdministratorRoleInput : UpdateEnterpriseAdministratorRoleInput -> Value
encodeUpdateEnterpriseAdministratorRoleInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "login", Encode.string input____.login |> Just ), ( "role", Encode.enum Github.Enum.EnterpriseAdministratorRole.toString input____.role |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateEnterpriseAllowPrivateRepositoryForkingSettingInput :
    UpdateEnterpriseAllowPrivateRepositoryForkingSettingInputRequiredFields
    -> (UpdateEnterpriseAllowPrivateRepositoryForkingSettingInputOptionalFields -> UpdateEnterpriseAllowPrivateRepositoryForkingSettingInputOptionalFields)
    -> UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput
buildUpdateEnterpriseAllowPrivateRepositoryForkingSettingInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { policyValue = Absent, clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, settingValue = required____.settingValue, policyValue = optionals____.policyValue, clientMutationId = optionals____.clientMutationId }


type alias UpdateEnterpriseAllowPrivateRepositoryForkingSettingInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    }


type alias UpdateEnterpriseAllowPrivateRepositoryForkingSettingInputOptionalFields =
    { policyValue : OptionalArgument Github.Enum.EnterpriseAllowPrivateRepositoryForkingPolicyValue.EnterpriseAllowPrivateRepositoryForkingPolicyValue
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput input object.
-}
type alias UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    , policyValue : OptionalArgument Github.Enum.EnterpriseAllowPrivateRepositoryForkingPolicyValue.EnterpriseAllowPrivateRepositoryForkingPolicyValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseAllowPrivateRepositoryForkingSettingInput : UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput -> Value
encodeUpdateEnterpriseAllowPrivateRepositoryForkingSettingInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "settingValue", Encode.enum Github.Enum.EnterpriseEnabledDisabledSettingValue.toString input____.settingValue |> Just ), ( "policyValue", Encode.enum Github.Enum.EnterpriseAllowPrivateRepositoryForkingPolicyValue.toString |> Encode.optional input____.policyValue ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateEnterpriseDefaultRepositoryPermissionSettingInput :
    UpdateEnterpriseDefaultRepositoryPermissionSettingInputRequiredFields
    -> (UpdateEnterpriseDefaultRepositoryPermissionSettingInputOptionalFields -> UpdateEnterpriseDefaultRepositoryPermissionSettingInputOptionalFields)
    -> UpdateEnterpriseDefaultRepositoryPermissionSettingInput
buildUpdateEnterpriseDefaultRepositoryPermissionSettingInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, settingValue = required____.settingValue, clientMutationId = optionals____.clientMutationId }


type alias UpdateEnterpriseDefaultRepositoryPermissionSettingInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseDefaultRepositoryPermissionSettingValue.EnterpriseDefaultRepositoryPermissionSettingValue
    }


type alias UpdateEnterpriseDefaultRepositoryPermissionSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseDefaultRepositoryPermissionSettingInput input object.
-}
type alias UpdateEnterpriseDefaultRepositoryPermissionSettingInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseDefaultRepositoryPermissionSettingValue.EnterpriseDefaultRepositoryPermissionSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseDefaultRepositoryPermissionSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseDefaultRepositoryPermissionSettingInput : UpdateEnterpriseDefaultRepositoryPermissionSettingInput -> Value
encodeUpdateEnterpriseDefaultRepositoryPermissionSettingInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "settingValue", Encode.enum Github.Enum.EnterpriseDefaultRepositoryPermissionSettingValue.toString input____.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput :
    UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInputRequiredFields
    -> (UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInputOptionalFields -> UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInputOptionalFields)
    -> UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput
buildUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, settingValue = required____.settingValue, clientMutationId = optionals____.clientMutationId }


type alias UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    }


type alias UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput input object.
-}
type alias UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput : UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput -> Value
encodeUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "settingValue", Encode.enum Github.Enum.EnterpriseEnabledDisabledSettingValue.toString input____.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateEnterpriseMembersCanCreateRepositoriesSettingInput :
    UpdateEnterpriseMembersCanCreateRepositoriesSettingInputRequiredFields
    -> (UpdateEnterpriseMembersCanCreateRepositoriesSettingInputOptionalFields -> UpdateEnterpriseMembersCanCreateRepositoriesSettingInputOptionalFields)
    -> UpdateEnterpriseMembersCanCreateRepositoriesSettingInput
buildUpdateEnterpriseMembersCanCreateRepositoriesSettingInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { settingValue = Absent, membersCanCreateRepositoriesPolicyEnabled = Absent, membersCanCreatePublicRepositories = Absent, membersCanCreatePrivateRepositories = Absent, membersCanCreateInternalRepositories = Absent, clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, settingValue = optionals____.settingValue, membersCanCreateRepositoriesPolicyEnabled = optionals____.membersCanCreateRepositoriesPolicyEnabled, membersCanCreatePublicRepositories = optionals____.membersCanCreatePublicRepositories, membersCanCreatePrivateRepositories = optionals____.membersCanCreatePrivateRepositories, membersCanCreateInternalRepositories = optionals____.membersCanCreateInternalRepositories, clientMutationId = optionals____.clientMutationId }


type alias UpdateEnterpriseMembersCanCreateRepositoriesSettingInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id }


type alias UpdateEnterpriseMembersCanCreateRepositoriesSettingInputOptionalFields =
    { settingValue : OptionalArgument Github.Enum.EnterpriseMembersCanCreateRepositoriesSettingValue.EnterpriseMembersCanCreateRepositoriesSettingValue
    , membersCanCreateRepositoriesPolicyEnabled : OptionalArgument Bool
    , membersCanCreatePublicRepositories : OptionalArgument Bool
    , membersCanCreatePrivateRepositories : OptionalArgument Bool
    , membersCanCreateInternalRepositories : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateEnterpriseMembersCanCreateRepositoriesSettingInput input object.
-}
type alias UpdateEnterpriseMembersCanCreateRepositoriesSettingInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : OptionalArgument Github.Enum.EnterpriseMembersCanCreateRepositoriesSettingValue.EnterpriseMembersCanCreateRepositoriesSettingValue
    , membersCanCreateRepositoriesPolicyEnabled : OptionalArgument Bool
    , membersCanCreatePublicRepositories : OptionalArgument Bool
    , membersCanCreatePrivateRepositories : OptionalArgument Bool
    , membersCanCreateInternalRepositories : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseMembersCanCreateRepositoriesSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseMembersCanCreateRepositoriesSettingInput : UpdateEnterpriseMembersCanCreateRepositoriesSettingInput -> Value
encodeUpdateEnterpriseMembersCanCreateRepositoriesSettingInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "settingValue", Encode.enum Github.Enum.EnterpriseMembersCanCreateRepositoriesSettingValue.toString |> Encode.optional input____.settingValue ), ( "membersCanCreateRepositoriesPolicyEnabled", Encode.bool |> Encode.optional input____.membersCanCreateRepositoriesPolicyEnabled ), ( "membersCanCreatePublicRepositories", Encode.bool |> Encode.optional input____.membersCanCreatePublicRepositories ), ( "membersCanCreatePrivateRepositories", Encode.bool |> Encode.optional input____.membersCanCreatePrivateRepositories ), ( "membersCanCreateInternalRepositories", Encode.bool |> Encode.optional input____.membersCanCreateInternalRepositories ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateEnterpriseMembersCanDeleteIssuesSettingInput :
    UpdateEnterpriseMembersCanDeleteIssuesSettingInputRequiredFields
    -> (UpdateEnterpriseMembersCanDeleteIssuesSettingInputOptionalFields -> UpdateEnterpriseMembersCanDeleteIssuesSettingInputOptionalFields)
    -> UpdateEnterpriseMembersCanDeleteIssuesSettingInput
buildUpdateEnterpriseMembersCanDeleteIssuesSettingInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, settingValue = required____.settingValue, clientMutationId = optionals____.clientMutationId }


type alias UpdateEnterpriseMembersCanDeleteIssuesSettingInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    }


type alias UpdateEnterpriseMembersCanDeleteIssuesSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseMembersCanDeleteIssuesSettingInput input object.
-}
type alias UpdateEnterpriseMembersCanDeleteIssuesSettingInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseMembersCanDeleteIssuesSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseMembersCanDeleteIssuesSettingInput : UpdateEnterpriseMembersCanDeleteIssuesSettingInput -> Value
encodeUpdateEnterpriseMembersCanDeleteIssuesSettingInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "settingValue", Encode.enum Github.Enum.EnterpriseEnabledDisabledSettingValue.toString input____.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateEnterpriseMembersCanDeleteRepositoriesSettingInput :
    UpdateEnterpriseMembersCanDeleteRepositoriesSettingInputRequiredFields
    -> (UpdateEnterpriseMembersCanDeleteRepositoriesSettingInputOptionalFields -> UpdateEnterpriseMembersCanDeleteRepositoriesSettingInputOptionalFields)
    -> UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput
buildUpdateEnterpriseMembersCanDeleteRepositoriesSettingInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, settingValue = required____.settingValue, clientMutationId = optionals____.clientMutationId }


type alias UpdateEnterpriseMembersCanDeleteRepositoriesSettingInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    }


type alias UpdateEnterpriseMembersCanDeleteRepositoriesSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput input object.
-}
type alias UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseMembersCanDeleteRepositoriesSettingInput : UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput -> Value
encodeUpdateEnterpriseMembersCanDeleteRepositoriesSettingInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "settingValue", Encode.enum Github.Enum.EnterpriseEnabledDisabledSettingValue.toString input____.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateEnterpriseMembersCanInviteCollaboratorsSettingInput :
    UpdateEnterpriseMembersCanInviteCollaboratorsSettingInputRequiredFields
    -> (UpdateEnterpriseMembersCanInviteCollaboratorsSettingInputOptionalFields -> UpdateEnterpriseMembersCanInviteCollaboratorsSettingInputOptionalFields)
    -> UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput
buildUpdateEnterpriseMembersCanInviteCollaboratorsSettingInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, settingValue = required____.settingValue, clientMutationId = optionals____.clientMutationId }


type alias UpdateEnterpriseMembersCanInviteCollaboratorsSettingInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    }


type alias UpdateEnterpriseMembersCanInviteCollaboratorsSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput input object.
-}
type alias UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseMembersCanInviteCollaboratorsSettingInput : UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput -> Value
encodeUpdateEnterpriseMembersCanInviteCollaboratorsSettingInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "settingValue", Encode.enum Github.Enum.EnterpriseEnabledDisabledSettingValue.toString input____.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateEnterpriseMembersCanMakePurchasesSettingInput :
    UpdateEnterpriseMembersCanMakePurchasesSettingInputRequiredFields
    -> (UpdateEnterpriseMembersCanMakePurchasesSettingInputOptionalFields -> UpdateEnterpriseMembersCanMakePurchasesSettingInputOptionalFields)
    -> UpdateEnterpriseMembersCanMakePurchasesSettingInput
buildUpdateEnterpriseMembersCanMakePurchasesSettingInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, settingValue = required____.settingValue, clientMutationId = optionals____.clientMutationId }


type alias UpdateEnterpriseMembersCanMakePurchasesSettingInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseMembersCanMakePurchasesSettingValue.EnterpriseMembersCanMakePurchasesSettingValue
    }


type alias UpdateEnterpriseMembersCanMakePurchasesSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseMembersCanMakePurchasesSettingInput input object.
-}
type alias UpdateEnterpriseMembersCanMakePurchasesSettingInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseMembersCanMakePurchasesSettingValue.EnterpriseMembersCanMakePurchasesSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseMembersCanMakePurchasesSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseMembersCanMakePurchasesSettingInput : UpdateEnterpriseMembersCanMakePurchasesSettingInput -> Value
encodeUpdateEnterpriseMembersCanMakePurchasesSettingInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "settingValue", Encode.enum Github.Enum.EnterpriseMembersCanMakePurchasesSettingValue.toString input____.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput :
    UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInputRequiredFields
    -> (UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInputOptionalFields -> UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInputOptionalFields)
    -> UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput
buildUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, settingValue = required____.settingValue, clientMutationId = optionals____.clientMutationId }


type alias UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    }


type alias UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput input object.
-}
type alias UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput : UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput -> Value
encodeUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "settingValue", Encode.enum Github.Enum.EnterpriseEnabledDisabledSettingValue.toString input____.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateEnterpriseMembersCanViewDependencyInsightsSettingInput :
    UpdateEnterpriseMembersCanViewDependencyInsightsSettingInputRequiredFields
    -> (UpdateEnterpriseMembersCanViewDependencyInsightsSettingInputOptionalFields -> UpdateEnterpriseMembersCanViewDependencyInsightsSettingInputOptionalFields)
    -> UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput
buildUpdateEnterpriseMembersCanViewDependencyInsightsSettingInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, settingValue = required____.settingValue, clientMutationId = optionals____.clientMutationId }


type alias UpdateEnterpriseMembersCanViewDependencyInsightsSettingInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    }


type alias UpdateEnterpriseMembersCanViewDependencyInsightsSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput input object.
-}
type alias UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseMembersCanViewDependencyInsightsSettingInput : UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput -> Value
encodeUpdateEnterpriseMembersCanViewDependencyInsightsSettingInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "settingValue", Encode.enum Github.Enum.EnterpriseEnabledDisabledSettingValue.toString input____.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateEnterpriseOrganizationProjectsSettingInput :
    UpdateEnterpriseOrganizationProjectsSettingInputRequiredFields
    -> (UpdateEnterpriseOrganizationProjectsSettingInputOptionalFields -> UpdateEnterpriseOrganizationProjectsSettingInputOptionalFields)
    -> UpdateEnterpriseOrganizationProjectsSettingInput
buildUpdateEnterpriseOrganizationProjectsSettingInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, settingValue = required____.settingValue, clientMutationId = optionals____.clientMutationId }


type alias UpdateEnterpriseOrganizationProjectsSettingInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    }


type alias UpdateEnterpriseOrganizationProjectsSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseOrganizationProjectsSettingInput input object.
-}
type alias UpdateEnterpriseOrganizationProjectsSettingInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseOrganizationProjectsSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseOrganizationProjectsSettingInput : UpdateEnterpriseOrganizationProjectsSettingInput -> Value
encodeUpdateEnterpriseOrganizationProjectsSettingInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "settingValue", Encode.enum Github.Enum.EnterpriseEnabledDisabledSettingValue.toString input____.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateEnterpriseOwnerOrganizationRoleInput :
    UpdateEnterpriseOwnerOrganizationRoleInputRequiredFields
    -> (UpdateEnterpriseOwnerOrganizationRoleInputOptionalFields -> UpdateEnterpriseOwnerOrganizationRoleInputOptionalFields)
    -> UpdateEnterpriseOwnerOrganizationRoleInput
buildUpdateEnterpriseOwnerOrganizationRoleInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, organizationId = required____.organizationId, organizationRole = required____.organizationRole, clientMutationId = optionals____.clientMutationId }


type alias UpdateEnterpriseOwnerOrganizationRoleInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , organizationId : Github.ScalarCodecs.Id
    , organizationRole : Github.Enum.RoleInOrganization.RoleInOrganization
    }


type alias UpdateEnterpriseOwnerOrganizationRoleInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseOwnerOrganizationRoleInput input object.
-}
type alias UpdateEnterpriseOwnerOrganizationRoleInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , organizationId : Github.ScalarCodecs.Id
    , organizationRole : Github.Enum.RoleInOrganization.RoleInOrganization
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseOwnerOrganizationRoleInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseOwnerOrganizationRoleInput : UpdateEnterpriseOwnerOrganizationRoleInput -> Value
encodeUpdateEnterpriseOwnerOrganizationRoleInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "organizationId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.organizationId |> Just ), ( "organizationRole", Encode.enum Github.Enum.RoleInOrganization.toString input____.organizationRole |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateEnterpriseProfileInput :
    UpdateEnterpriseProfileInputRequiredFields
    -> (UpdateEnterpriseProfileInputOptionalFields -> UpdateEnterpriseProfileInputOptionalFields)
    -> UpdateEnterpriseProfileInput
buildUpdateEnterpriseProfileInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { name = Absent, description = Absent, websiteUrl = Absent, location = Absent, clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, name = optionals____.name, description = optionals____.description, websiteUrl = optionals____.websiteUrl, location = optionals____.location, clientMutationId = optionals____.clientMutationId }


type alias UpdateEnterpriseProfileInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id }


type alias UpdateEnterpriseProfileInputOptionalFields =
    { name : OptionalArgument String
    , description : OptionalArgument String
    , websiteUrl : OptionalArgument String
    , location : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateEnterpriseProfileInput input object.
-}
type alias UpdateEnterpriseProfileInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , name : OptionalArgument String
    , description : OptionalArgument String
    , websiteUrl : OptionalArgument String
    , location : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseProfileInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseProfileInput : UpdateEnterpriseProfileInput -> Value
encodeUpdateEnterpriseProfileInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "name", Encode.string |> Encode.optional input____.name ), ( "description", Encode.string |> Encode.optional input____.description ), ( "websiteUrl", Encode.string |> Encode.optional input____.websiteUrl ), ( "location", Encode.string |> Encode.optional input____.location ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateEnterpriseRepositoryProjectsSettingInput :
    UpdateEnterpriseRepositoryProjectsSettingInputRequiredFields
    -> (UpdateEnterpriseRepositoryProjectsSettingInputOptionalFields -> UpdateEnterpriseRepositoryProjectsSettingInputOptionalFields)
    -> UpdateEnterpriseRepositoryProjectsSettingInput
buildUpdateEnterpriseRepositoryProjectsSettingInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, settingValue = required____.settingValue, clientMutationId = optionals____.clientMutationId }


type alias UpdateEnterpriseRepositoryProjectsSettingInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    }


type alias UpdateEnterpriseRepositoryProjectsSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseRepositoryProjectsSettingInput input object.
-}
type alias UpdateEnterpriseRepositoryProjectsSettingInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseRepositoryProjectsSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseRepositoryProjectsSettingInput : UpdateEnterpriseRepositoryProjectsSettingInput -> Value
encodeUpdateEnterpriseRepositoryProjectsSettingInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "settingValue", Encode.enum Github.Enum.EnterpriseEnabledDisabledSettingValue.toString input____.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateEnterpriseTeamDiscussionsSettingInput :
    UpdateEnterpriseTeamDiscussionsSettingInputRequiredFields
    -> (UpdateEnterpriseTeamDiscussionsSettingInputOptionalFields -> UpdateEnterpriseTeamDiscussionsSettingInputOptionalFields)
    -> UpdateEnterpriseTeamDiscussionsSettingInput
buildUpdateEnterpriseTeamDiscussionsSettingInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, settingValue = required____.settingValue, clientMutationId = optionals____.clientMutationId }


type alias UpdateEnterpriseTeamDiscussionsSettingInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    }


type alias UpdateEnterpriseTeamDiscussionsSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseTeamDiscussionsSettingInput input object.
-}
type alias UpdateEnterpriseTeamDiscussionsSettingInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseEnabledDisabledSettingValue.EnterpriseEnabledDisabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseTeamDiscussionsSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseTeamDiscussionsSettingInput : UpdateEnterpriseTeamDiscussionsSettingInput -> Value
encodeUpdateEnterpriseTeamDiscussionsSettingInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "settingValue", Encode.enum Github.Enum.EnterpriseEnabledDisabledSettingValue.toString input____.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput :
    UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInputRequiredFields
    -> (UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInputOptionalFields -> UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInputOptionalFields)
    -> UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput
buildUpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { enterpriseId = required____.enterpriseId, settingValue = required____.settingValue, clientMutationId = optionals____.clientMutationId }


type alias UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInputRequiredFields =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseEnabledSettingValue.EnterpriseEnabledSettingValue
    }


type alias UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput input object.
-}
type alias UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput =
    { enterpriseId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.EnterpriseEnabledSettingValue.EnterpriseEnabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput into a value that can be used as an argument.
-}
encodeUpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput : UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput -> Value
encodeUpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput input____ =
    Encode.maybeObject
        [ ( "enterpriseId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.enterpriseId |> Just ), ( "settingValue", Encode.enum Github.Enum.EnterpriseEnabledSettingValue.toString input____.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateEnvironmentInput :
    UpdateEnvironmentInputRequiredFields
    -> (UpdateEnvironmentInputOptionalFields -> UpdateEnvironmentInputOptionalFields)
    -> UpdateEnvironmentInput
buildUpdateEnvironmentInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { waitTimer = Absent, reviewers = Absent, clientMutationId = Absent }
    in
    { environmentId = required____.environmentId, waitTimer = optionals____.waitTimer, reviewers = optionals____.reviewers, clientMutationId = optionals____.clientMutationId }


type alias UpdateEnvironmentInputRequiredFields =
    { environmentId : Github.ScalarCodecs.Id }


type alias UpdateEnvironmentInputOptionalFields =
    { waitTimer : OptionalArgument Int
    , reviewers : OptionalArgument (List Github.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateEnvironmentInput input object.
-}
type alias UpdateEnvironmentInput =
    { environmentId : Github.ScalarCodecs.Id
    , waitTimer : OptionalArgument Int
    , reviewers : OptionalArgument (List Github.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateEnvironmentInput into a value that can be used as an argument.
-}
encodeUpdateEnvironmentInput : UpdateEnvironmentInput -> Value
encodeUpdateEnvironmentInput input____ =
    Encode.maybeObject
        [ ( "environmentId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.environmentId |> Just ), ( "waitTimer", Encode.int |> Encode.optional input____.waitTimer ), ( "reviewers", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.reviewers ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateIpAllowListEnabledSettingInput :
    UpdateIpAllowListEnabledSettingInputRequiredFields
    -> (UpdateIpAllowListEnabledSettingInputOptionalFields -> UpdateIpAllowListEnabledSettingInputOptionalFields)
    -> UpdateIpAllowListEnabledSettingInput
buildUpdateIpAllowListEnabledSettingInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { ownerId = required____.ownerId, settingValue = required____.settingValue, clientMutationId = optionals____.clientMutationId }


type alias UpdateIpAllowListEnabledSettingInputRequiredFields =
    { ownerId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.IpAllowListEnabledSettingValue.IpAllowListEnabledSettingValue
    }


type alias UpdateIpAllowListEnabledSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateIpAllowListEnabledSettingInput input object.
-}
type alias UpdateIpAllowListEnabledSettingInput =
    { ownerId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.IpAllowListEnabledSettingValue.IpAllowListEnabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateIpAllowListEnabledSettingInput into a value that can be used as an argument.
-}
encodeUpdateIpAllowListEnabledSettingInput : UpdateIpAllowListEnabledSettingInput -> Value
encodeUpdateIpAllowListEnabledSettingInput input____ =
    Encode.maybeObject
        [ ( "ownerId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.ownerId |> Just ), ( "settingValue", Encode.enum Github.Enum.IpAllowListEnabledSettingValue.toString input____.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateIpAllowListEntryInput :
    UpdateIpAllowListEntryInputRequiredFields
    -> (UpdateIpAllowListEntryInputOptionalFields -> UpdateIpAllowListEntryInputOptionalFields)
    -> UpdateIpAllowListEntryInput
buildUpdateIpAllowListEntryInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { name = Absent, clientMutationId = Absent }
    in
    { ipAllowListEntryId = required____.ipAllowListEntryId, allowListValue = required____.allowListValue, name = optionals____.name, isActive = required____.isActive, clientMutationId = optionals____.clientMutationId }


type alias UpdateIpAllowListEntryInputRequiredFields =
    { ipAllowListEntryId : Github.ScalarCodecs.Id
    , allowListValue : String
    , isActive : Bool
    }


type alias UpdateIpAllowListEntryInputOptionalFields =
    { name : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateIpAllowListEntryInput input object.
-}
type alias UpdateIpAllowListEntryInput =
    { ipAllowListEntryId : Github.ScalarCodecs.Id
    , allowListValue : String
    , name : OptionalArgument String
    , isActive : Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateIpAllowListEntryInput into a value that can be used as an argument.
-}
encodeUpdateIpAllowListEntryInput : UpdateIpAllowListEntryInput -> Value
encodeUpdateIpAllowListEntryInput input____ =
    Encode.maybeObject
        [ ( "ipAllowListEntryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.ipAllowListEntryId |> Just ), ( "allowListValue", Encode.string input____.allowListValue |> Just ), ( "name", Encode.string |> Encode.optional input____.name ), ( "isActive", Encode.bool input____.isActive |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateIpAllowListForInstalledAppsEnabledSettingInput :
    UpdateIpAllowListForInstalledAppsEnabledSettingInputRequiredFields
    -> (UpdateIpAllowListForInstalledAppsEnabledSettingInputOptionalFields -> UpdateIpAllowListForInstalledAppsEnabledSettingInputOptionalFields)
    -> UpdateIpAllowListForInstalledAppsEnabledSettingInput
buildUpdateIpAllowListForInstalledAppsEnabledSettingInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { ownerId = required____.ownerId, settingValue = required____.settingValue, clientMutationId = optionals____.clientMutationId }


type alias UpdateIpAllowListForInstalledAppsEnabledSettingInputRequiredFields =
    { ownerId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.IpAllowListForInstalledAppsEnabledSettingValue.IpAllowListForInstalledAppsEnabledSettingValue
    }


type alias UpdateIpAllowListForInstalledAppsEnabledSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateIpAllowListForInstalledAppsEnabledSettingInput input object.
-}
type alias UpdateIpAllowListForInstalledAppsEnabledSettingInput =
    { ownerId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.IpAllowListForInstalledAppsEnabledSettingValue.IpAllowListForInstalledAppsEnabledSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateIpAllowListForInstalledAppsEnabledSettingInput into a value that can be used as an argument.
-}
encodeUpdateIpAllowListForInstalledAppsEnabledSettingInput : UpdateIpAllowListForInstalledAppsEnabledSettingInput -> Value
encodeUpdateIpAllowListForInstalledAppsEnabledSettingInput input____ =
    Encode.maybeObject
        [ ( "ownerId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.ownerId |> Just ), ( "settingValue", Encode.enum Github.Enum.IpAllowListForInstalledAppsEnabledSettingValue.toString input____.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateIssueCommentInput :
    UpdateIssueCommentInputRequiredFields
    -> (UpdateIssueCommentInputOptionalFields -> UpdateIssueCommentInputOptionalFields)
    -> UpdateIssueCommentInput
buildUpdateIssueCommentInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { id = required____.id, body = required____.body, clientMutationId = optionals____.clientMutationId }


type alias UpdateIssueCommentInputRequiredFields =
    { id : Github.ScalarCodecs.Id
    , body : String
    }


type alias UpdateIssueCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateIssueCommentInput input object.
-}
type alias UpdateIssueCommentInput =
    { id : Github.ScalarCodecs.Id
    , body : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateIssueCommentInput into a value that can be used as an argument.
-}
encodeUpdateIssueCommentInput : UpdateIssueCommentInput -> Value
encodeUpdateIssueCommentInput input____ =
    Encode.maybeObject
        [ ( "id", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "body", Encode.string input____.body |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateIssueInput :
    UpdateIssueInputRequiredFields
    -> (UpdateIssueInputOptionalFields -> UpdateIssueInputOptionalFields)
    -> UpdateIssueInput
buildUpdateIssueInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { title = Absent, body = Absent, assigneeIds = Absent, milestoneId = Absent, labelIds = Absent, state = Absent, projectIds = Absent, clientMutationId = Absent }
    in
    { id = required____.id, title = optionals____.title, body = optionals____.body, assigneeIds = optionals____.assigneeIds, milestoneId = optionals____.milestoneId, labelIds = optionals____.labelIds, state = optionals____.state, projectIds = optionals____.projectIds, clientMutationId = optionals____.clientMutationId }


type alias UpdateIssueInputRequiredFields =
    { id : Github.ScalarCodecs.Id }


type alias UpdateIssueInputOptionalFields =
    { title : OptionalArgument String
    , body : OptionalArgument String
    , assigneeIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , milestoneId : OptionalArgument Github.ScalarCodecs.Id
    , labelIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , state : OptionalArgument Github.Enum.IssueState.IssueState
    , projectIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateIssueInput input object.
-}
type alias UpdateIssueInput =
    { id : Github.ScalarCodecs.Id
    , title : OptionalArgument String
    , body : OptionalArgument String
    , assigneeIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , milestoneId : OptionalArgument Github.ScalarCodecs.Id
    , labelIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , state : OptionalArgument Github.Enum.IssueState.IssueState
    , projectIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateIssueInput into a value that can be used as an argument.
-}
encodeUpdateIssueInput : UpdateIssueInput -> Value
encodeUpdateIssueInput input____ =
    Encode.maybeObject
        [ ( "id", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "title", Encode.string |> Encode.optional input____.title ), ( "body", Encode.string |> Encode.optional input____.body ), ( "assigneeIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.assigneeIds ), ( "milestoneId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.milestoneId ), ( "labelIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.labelIds ), ( "state", Encode.enum Github.Enum.IssueState.toString |> Encode.optional input____.state ), ( "projectIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.projectIds ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateNotificationRestrictionSettingInput :
    UpdateNotificationRestrictionSettingInputRequiredFields
    -> (UpdateNotificationRestrictionSettingInputOptionalFields -> UpdateNotificationRestrictionSettingInputOptionalFields)
    -> UpdateNotificationRestrictionSettingInput
buildUpdateNotificationRestrictionSettingInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { ownerId = required____.ownerId, settingValue = required____.settingValue, clientMutationId = optionals____.clientMutationId }


type alias UpdateNotificationRestrictionSettingInputRequiredFields =
    { ownerId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.NotificationRestrictionSettingValue.NotificationRestrictionSettingValue
    }


type alias UpdateNotificationRestrictionSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateNotificationRestrictionSettingInput input object.
-}
type alias UpdateNotificationRestrictionSettingInput =
    { ownerId : Github.ScalarCodecs.Id
    , settingValue : Github.Enum.NotificationRestrictionSettingValue.NotificationRestrictionSettingValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateNotificationRestrictionSettingInput into a value that can be used as an argument.
-}
encodeUpdateNotificationRestrictionSettingInput : UpdateNotificationRestrictionSettingInput -> Value
encodeUpdateNotificationRestrictionSettingInput input____ =
    Encode.maybeObject
        [ ( "ownerId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.ownerId |> Just ), ( "settingValue", Encode.enum Github.Enum.NotificationRestrictionSettingValue.toString input____.settingValue |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateOrganizationAllowPrivateRepositoryForkingSettingInput :
    UpdateOrganizationAllowPrivateRepositoryForkingSettingInputRequiredFields
    -> (UpdateOrganizationAllowPrivateRepositoryForkingSettingInputOptionalFields -> UpdateOrganizationAllowPrivateRepositoryForkingSettingInputOptionalFields)
    -> UpdateOrganizationAllowPrivateRepositoryForkingSettingInput
buildUpdateOrganizationAllowPrivateRepositoryForkingSettingInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { organizationId = required____.organizationId, forkingEnabled = required____.forkingEnabled, clientMutationId = optionals____.clientMutationId }


type alias UpdateOrganizationAllowPrivateRepositoryForkingSettingInputRequiredFields =
    { organizationId : Github.ScalarCodecs.Id
    , forkingEnabled : Bool
    }


type alias UpdateOrganizationAllowPrivateRepositoryForkingSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateOrganizationAllowPrivateRepositoryForkingSettingInput input object.
-}
type alias UpdateOrganizationAllowPrivateRepositoryForkingSettingInput =
    { organizationId : Github.ScalarCodecs.Id
    , forkingEnabled : Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateOrganizationAllowPrivateRepositoryForkingSettingInput into a value that can be used as an argument.
-}
encodeUpdateOrganizationAllowPrivateRepositoryForkingSettingInput : UpdateOrganizationAllowPrivateRepositoryForkingSettingInput -> Value
encodeUpdateOrganizationAllowPrivateRepositoryForkingSettingInput input____ =
    Encode.maybeObject
        [ ( "organizationId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.organizationId |> Just ), ( "forkingEnabled", Encode.bool input____.forkingEnabled |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateOrganizationWebCommitSignoffSettingInput :
    UpdateOrganizationWebCommitSignoffSettingInputRequiredFields
    -> (UpdateOrganizationWebCommitSignoffSettingInputOptionalFields -> UpdateOrganizationWebCommitSignoffSettingInputOptionalFields)
    -> UpdateOrganizationWebCommitSignoffSettingInput
buildUpdateOrganizationWebCommitSignoffSettingInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { organizationId = required____.organizationId, webCommitSignoffRequired = required____.webCommitSignoffRequired, clientMutationId = optionals____.clientMutationId }


type alias UpdateOrganizationWebCommitSignoffSettingInputRequiredFields =
    { organizationId : Github.ScalarCodecs.Id
    , webCommitSignoffRequired : Bool
    }


type alias UpdateOrganizationWebCommitSignoffSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateOrganizationWebCommitSignoffSettingInput input object.
-}
type alias UpdateOrganizationWebCommitSignoffSettingInput =
    { organizationId : Github.ScalarCodecs.Id
    , webCommitSignoffRequired : Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateOrganizationWebCommitSignoffSettingInput into a value that can be used as an argument.
-}
encodeUpdateOrganizationWebCommitSignoffSettingInput : UpdateOrganizationWebCommitSignoffSettingInput -> Value
encodeUpdateOrganizationWebCommitSignoffSettingInput input____ =
    Encode.maybeObject
        [ ( "organizationId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.organizationId |> Just ), ( "webCommitSignoffRequired", Encode.bool input____.webCommitSignoffRequired |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateProjectCardInput :
    UpdateProjectCardInputRequiredFields
    -> (UpdateProjectCardInputOptionalFields -> UpdateProjectCardInputOptionalFields)
    -> UpdateProjectCardInput
buildUpdateProjectCardInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { isArchived = Absent, note = Absent, clientMutationId = Absent }
    in
    { projectCardId = required____.projectCardId, isArchived = optionals____.isArchived, note = optionals____.note, clientMutationId = optionals____.clientMutationId }


type alias UpdateProjectCardInputRequiredFields =
    { projectCardId : Github.ScalarCodecs.Id }


type alias UpdateProjectCardInputOptionalFields =
    { isArchived : OptionalArgument Bool
    , note : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateProjectCardInput input object.
-}
type alias UpdateProjectCardInput =
    { projectCardId : Github.ScalarCodecs.Id
    , isArchived : OptionalArgument Bool
    , note : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateProjectCardInput into a value that can be used as an argument.
-}
encodeUpdateProjectCardInput : UpdateProjectCardInput -> Value
encodeUpdateProjectCardInput input____ =
    Encode.maybeObject
        [ ( "projectCardId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.projectCardId |> Just ), ( "isArchived", Encode.bool |> Encode.optional input____.isArchived ), ( "note", Encode.string |> Encode.optional input____.note ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateProjectColumnInput :
    UpdateProjectColumnInputRequiredFields
    -> (UpdateProjectColumnInputOptionalFields -> UpdateProjectColumnInputOptionalFields)
    -> UpdateProjectColumnInput
buildUpdateProjectColumnInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { projectColumnId = required____.projectColumnId, name = required____.name, clientMutationId = optionals____.clientMutationId }


type alias UpdateProjectColumnInputRequiredFields =
    { projectColumnId : Github.ScalarCodecs.Id
    , name : String
    }


type alias UpdateProjectColumnInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateProjectColumnInput input object.
-}
type alias UpdateProjectColumnInput =
    { projectColumnId : Github.ScalarCodecs.Id
    , name : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateProjectColumnInput into a value that can be used as an argument.
-}
encodeUpdateProjectColumnInput : UpdateProjectColumnInput -> Value
encodeUpdateProjectColumnInput input____ =
    Encode.maybeObject
        [ ( "projectColumnId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.projectColumnId |> Just ), ( "name", Encode.string input____.name |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateProjectDraftIssueInput :
    UpdateProjectDraftIssueInputRequiredFields
    -> (UpdateProjectDraftIssueInputOptionalFields -> UpdateProjectDraftIssueInputOptionalFields)
    -> UpdateProjectDraftIssueInput
buildUpdateProjectDraftIssueInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { title = Absent, body = Absent, assigneeIds = Absent, clientMutationId = Absent }
    in
    { draftIssueId = required____.draftIssueId, title = optionals____.title, body = optionals____.body, assigneeIds = optionals____.assigneeIds, clientMutationId = optionals____.clientMutationId }


type alias UpdateProjectDraftIssueInputRequiredFields =
    { draftIssueId : Github.ScalarCodecs.Id }


type alias UpdateProjectDraftIssueInputOptionalFields =
    { title : OptionalArgument String
    , body : OptionalArgument String
    , assigneeIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateProjectDraftIssueInput input object.
-}
type alias UpdateProjectDraftIssueInput =
    { draftIssueId : Github.ScalarCodecs.Id
    , title : OptionalArgument String
    , body : OptionalArgument String
    , assigneeIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateProjectDraftIssueInput into a value that can be used as an argument.
-}
encodeUpdateProjectDraftIssueInput : UpdateProjectDraftIssueInput -> Value
encodeUpdateProjectDraftIssueInput input____ =
    Encode.maybeObject
        [ ( "draftIssueId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.draftIssueId |> Just ), ( "title", Encode.string |> Encode.optional input____.title ), ( "body", Encode.string |> Encode.optional input____.body ), ( "assigneeIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.assigneeIds ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateProjectInput :
    UpdateProjectInputRequiredFields
    -> (UpdateProjectInputOptionalFields -> UpdateProjectInputOptionalFields)
    -> UpdateProjectInput
buildUpdateProjectInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { name = Absent, body = Absent, state = Absent, public = Absent, clientMutationId = Absent }
    in
    { projectId = required____.projectId, name = optionals____.name, body = optionals____.body, state = optionals____.state, public = optionals____.public, clientMutationId = optionals____.clientMutationId }


type alias UpdateProjectInputRequiredFields =
    { projectId : Github.ScalarCodecs.Id }


type alias UpdateProjectInputOptionalFields =
    { name : OptionalArgument String
    , body : OptionalArgument String
    , state : OptionalArgument Github.Enum.ProjectState.ProjectState
    , public : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateProjectInput input object.
-}
type alias UpdateProjectInput =
    { projectId : Github.ScalarCodecs.Id
    , name : OptionalArgument String
    , body : OptionalArgument String
    , state : OptionalArgument Github.Enum.ProjectState.ProjectState
    , public : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateProjectInput into a value that can be used as an argument.
-}
encodeUpdateProjectInput : UpdateProjectInput -> Value
encodeUpdateProjectInput input____ =
    Encode.maybeObject
        [ ( "projectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.projectId |> Just ), ( "name", Encode.string |> Encode.optional input____.name ), ( "body", Encode.string |> Encode.optional input____.body ), ( "state", Encode.enum Github.Enum.ProjectState.toString |> Encode.optional input____.state ), ( "public", Encode.bool |> Encode.optional input____.public ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateProjectNextInput :
    (UpdateProjectNextInputOptionalFields -> UpdateProjectNextInputOptionalFields)
    -> UpdateProjectNextInput
buildUpdateProjectNextInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { projectId = Absent, title = Absent, description = Absent, shortDescription = Absent, closed = Absent, public = Absent, clientMutationId = Absent }
    in
    { projectId = optionals____.projectId, title = optionals____.title, description = optionals____.description, shortDescription = optionals____.shortDescription, closed = optionals____.closed, public = optionals____.public, clientMutationId = optionals____.clientMutationId }


type alias UpdateProjectNextInputOptionalFields =
    { projectId : OptionalArgument Github.ScalarCodecs.Id
    , title : OptionalArgument String
    , description : OptionalArgument String
    , shortDescription : OptionalArgument String
    , closed : OptionalArgument Bool
    , public : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateProjectNextInput input object.
-}
type alias UpdateProjectNextInput =
    { projectId : OptionalArgument Github.ScalarCodecs.Id
    , title : OptionalArgument String
    , description : OptionalArgument String
    , shortDescription : OptionalArgument String
    , closed : OptionalArgument Bool
    , public : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateProjectNextInput into a value that can be used as an argument.
-}
encodeUpdateProjectNextInput : UpdateProjectNextInput -> Value
encodeUpdateProjectNextInput input____ =
    Encode.maybeObject
        [ ( "projectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.projectId ), ( "title", Encode.string |> Encode.optional input____.title ), ( "description", Encode.string |> Encode.optional input____.description ), ( "shortDescription", Encode.string |> Encode.optional input____.shortDescription ), ( "closed", Encode.bool |> Encode.optional input____.closed ), ( "public", Encode.bool |> Encode.optional input____.public ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateProjectNextItemFieldInput :
    (UpdateProjectNextItemFieldInputOptionalFields -> UpdateProjectNextItemFieldInputOptionalFields)
    -> UpdateProjectNextItemFieldInput
buildUpdateProjectNextItemFieldInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { projectId = Absent, itemId = Absent, fieldId = Absent, value = Absent, clientMutationId = Absent }
    in
    { projectId = optionals____.projectId, itemId = optionals____.itemId, fieldId = optionals____.fieldId, value = optionals____.value, clientMutationId = optionals____.clientMutationId }


type alias UpdateProjectNextItemFieldInputOptionalFields =
    { projectId : OptionalArgument Github.ScalarCodecs.Id
    , itemId : OptionalArgument Github.ScalarCodecs.Id
    , fieldId : OptionalArgument Github.ScalarCodecs.Id
    , value : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateProjectNextItemFieldInput input object.
-}
type alias UpdateProjectNextItemFieldInput =
    { projectId : OptionalArgument Github.ScalarCodecs.Id
    , itemId : OptionalArgument Github.ScalarCodecs.Id
    , fieldId : OptionalArgument Github.ScalarCodecs.Id
    , value : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateProjectNextItemFieldInput into a value that can be used as an argument.
-}
encodeUpdateProjectNextItemFieldInput : UpdateProjectNextItemFieldInput -> Value
encodeUpdateProjectNextItemFieldInput input____ =
    Encode.maybeObject
        [ ( "projectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.projectId ), ( "itemId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.itemId ), ( "fieldId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.fieldId ), ( "value", Encode.string |> Encode.optional input____.value ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateProjectV2DraftIssueInput :
    UpdateProjectV2DraftIssueInputRequiredFields
    -> (UpdateProjectV2DraftIssueInputOptionalFields -> UpdateProjectV2DraftIssueInputOptionalFields)
    -> UpdateProjectV2DraftIssueInput
buildUpdateProjectV2DraftIssueInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { title = Absent, body = Absent, assigneeIds = Absent, clientMutationId = Absent }
    in
    { draftIssueId = required____.draftIssueId, title = optionals____.title, body = optionals____.body, assigneeIds = optionals____.assigneeIds, clientMutationId = optionals____.clientMutationId }


type alias UpdateProjectV2DraftIssueInputRequiredFields =
    { draftIssueId : Github.ScalarCodecs.Id }


type alias UpdateProjectV2DraftIssueInputOptionalFields =
    { title : OptionalArgument String
    , body : OptionalArgument String
    , assigneeIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateProjectV2DraftIssueInput input object.
-}
type alias UpdateProjectV2DraftIssueInput =
    { draftIssueId : Github.ScalarCodecs.Id
    , title : OptionalArgument String
    , body : OptionalArgument String
    , assigneeIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateProjectV2DraftIssueInput into a value that can be used as an argument.
-}
encodeUpdateProjectV2DraftIssueInput : UpdateProjectV2DraftIssueInput -> Value
encodeUpdateProjectV2DraftIssueInput input____ =
    Encode.maybeObject
        [ ( "draftIssueId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.draftIssueId |> Just ), ( "title", Encode.string |> Encode.optional input____.title ), ( "body", Encode.string |> Encode.optional input____.body ), ( "assigneeIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.assigneeIds ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateProjectV2Input :
    UpdateProjectV2InputRequiredFields
    -> (UpdateProjectV2InputOptionalFields -> UpdateProjectV2InputOptionalFields)
    -> UpdateProjectV2Input
buildUpdateProjectV2Input required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { title = Absent, shortDescription = Absent, readme = Absent, closed = Absent, public = Absent, clientMutationId = Absent }
    in
    { projectId = required____.projectId, title = optionals____.title, shortDescription = optionals____.shortDescription, readme = optionals____.readme, closed = optionals____.closed, public = optionals____.public, clientMutationId = optionals____.clientMutationId }


type alias UpdateProjectV2InputRequiredFields =
    { projectId : Github.ScalarCodecs.Id }


type alias UpdateProjectV2InputOptionalFields =
    { title : OptionalArgument String
    , shortDescription : OptionalArgument String
    , readme : OptionalArgument String
    , closed : OptionalArgument Bool
    , public : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateProjectV2Input input object.
-}
type alias UpdateProjectV2Input =
    { projectId : Github.ScalarCodecs.Id
    , title : OptionalArgument String
    , shortDescription : OptionalArgument String
    , readme : OptionalArgument String
    , closed : OptionalArgument Bool
    , public : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateProjectV2Input into a value that can be used as an argument.
-}
encodeUpdateProjectV2Input : UpdateProjectV2Input -> Value
encodeUpdateProjectV2Input input____ =
    Encode.maybeObject
        [ ( "projectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.projectId |> Just ), ( "title", Encode.string |> Encode.optional input____.title ), ( "shortDescription", Encode.string |> Encode.optional input____.shortDescription ), ( "readme", Encode.string |> Encode.optional input____.readme ), ( "closed", Encode.bool |> Encode.optional input____.closed ), ( "public", Encode.bool |> Encode.optional input____.public ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateProjectV2ItemFieldValueInput :
    UpdateProjectV2ItemFieldValueInputRequiredFields
    -> (UpdateProjectV2ItemFieldValueInputOptionalFields -> UpdateProjectV2ItemFieldValueInputOptionalFields)
    -> UpdateProjectV2ItemFieldValueInput
buildUpdateProjectV2ItemFieldValueInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { projectId = required____.projectId, itemId = required____.itemId, fieldId = required____.fieldId, value = required____.value, clientMutationId = optionals____.clientMutationId }


type alias UpdateProjectV2ItemFieldValueInputRequiredFields =
    { projectId : Github.ScalarCodecs.Id
    , itemId : Github.ScalarCodecs.Id
    , fieldId : Github.ScalarCodecs.Id
    , value : ProjectV2FieldValue
    }


type alias UpdateProjectV2ItemFieldValueInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateProjectV2ItemFieldValueInput input object.
-}
type alias UpdateProjectV2ItemFieldValueInput =
    { projectId : Github.ScalarCodecs.Id
    , itemId : Github.ScalarCodecs.Id
    , fieldId : Github.ScalarCodecs.Id
    , value : ProjectV2FieldValue
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateProjectV2ItemFieldValueInput into a value that can be used as an argument.
-}
encodeUpdateProjectV2ItemFieldValueInput : UpdateProjectV2ItemFieldValueInput -> Value
encodeUpdateProjectV2ItemFieldValueInput input____ =
    Encode.maybeObject
        [ ( "projectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.projectId |> Just ), ( "itemId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.itemId |> Just ), ( "fieldId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.fieldId |> Just ), ( "value", encodeProjectV2FieldValue input____.value |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateProjectV2ItemPositionInput :
    UpdateProjectV2ItemPositionInputRequiredFields
    -> (UpdateProjectV2ItemPositionInputOptionalFields -> UpdateProjectV2ItemPositionInputOptionalFields)
    -> UpdateProjectV2ItemPositionInput
buildUpdateProjectV2ItemPositionInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { afterId = Absent, clientMutationId = Absent }
    in
    { projectId = required____.projectId, itemId = required____.itemId, afterId = optionals____.afterId, clientMutationId = optionals____.clientMutationId }


type alias UpdateProjectV2ItemPositionInputRequiredFields =
    { projectId : Github.ScalarCodecs.Id
    , itemId : Github.ScalarCodecs.Id
    }


type alias UpdateProjectV2ItemPositionInputOptionalFields =
    { afterId : OptionalArgument Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateProjectV2ItemPositionInput input object.
-}
type alias UpdateProjectV2ItemPositionInput =
    { projectId : Github.ScalarCodecs.Id
    , itemId : Github.ScalarCodecs.Id
    , afterId : OptionalArgument Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateProjectV2ItemPositionInput into a value that can be used as an argument.
-}
encodeUpdateProjectV2ItemPositionInput : UpdateProjectV2ItemPositionInput -> Value
encodeUpdateProjectV2ItemPositionInput input____ =
    Encode.maybeObject
        [ ( "projectId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.projectId |> Just ), ( "itemId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.itemId |> Just ), ( "afterId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.afterId ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdatePullRequestBranchInput :
    UpdatePullRequestBranchInputRequiredFields
    -> (UpdatePullRequestBranchInputOptionalFields -> UpdatePullRequestBranchInputOptionalFields)
    -> UpdatePullRequestBranchInput
buildUpdatePullRequestBranchInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { expectedHeadOid = Absent, clientMutationId = Absent }
    in
    { pullRequestId = required____.pullRequestId, expectedHeadOid = optionals____.expectedHeadOid, clientMutationId = optionals____.clientMutationId }


type alias UpdatePullRequestBranchInputRequiredFields =
    { pullRequestId : Github.ScalarCodecs.Id }


type alias UpdatePullRequestBranchInputOptionalFields =
    { expectedHeadOid : OptionalArgument Github.ScalarCodecs.GitObjectID
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdatePullRequestBranchInput input object.
-}
type alias UpdatePullRequestBranchInput =
    { pullRequestId : Github.ScalarCodecs.Id
    , expectedHeadOid : OptionalArgument Github.ScalarCodecs.GitObjectID
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdatePullRequestBranchInput into a value that can be used as an argument.
-}
encodeUpdatePullRequestBranchInput : UpdatePullRequestBranchInput -> Value
encodeUpdatePullRequestBranchInput input____ =
    Encode.maybeObject
        [ ( "pullRequestId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.pullRequestId |> Just ), ( "expectedHeadOid", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecGitObjectID) |> Encode.optional input____.expectedHeadOid ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdatePullRequestInput :
    UpdatePullRequestInputRequiredFields
    -> (UpdatePullRequestInputOptionalFields -> UpdatePullRequestInputOptionalFields)
    -> UpdatePullRequestInput
buildUpdatePullRequestInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { baseRefName = Absent, title = Absent, body = Absent, state = Absent, maintainerCanModify = Absent, assigneeIds = Absent, milestoneId = Absent, labelIds = Absent, projectIds = Absent, clientMutationId = Absent }
    in
    { pullRequestId = required____.pullRequestId, baseRefName = optionals____.baseRefName, title = optionals____.title, body = optionals____.body, state = optionals____.state, maintainerCanModify = optionals____.maintainerCanModify, assigneeIds = optionals____.assigneeIds, milestoneId = optionals____.milestoneId, labelIds = optionals____.labelIds, projectIds = optionals____.projectIds, clientMutationId = optionals____.clientMutationId }


type alias UpdatePullRequestInputRequiredFields =
    { pullRequestId : Github.ScalarCodecs.Id }


type alias UpdatePullRequestInputOptionalFields =
    { baseRefName : OptionalArgument String
    , title : OptionalArgument String
    , body : OptionalArgument String
    , state : OptionalArgument Github.Enum.PullRequestUpdateState.PullRequestUpdateState
    , maintainerCanModify : OptionalArgument Bool
    , assigneeIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , milestoneId : OptionalArgument Github.ScalarCodecs.Id
    , labelIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , projectIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdatePullRequestInput input object.
-}
type alias UpdatePullRequestInput =
    { pullRequestId : Github.ScalarCodecs.Id
    , baseRefName : OptionalArgument String
    , title : OptionalArgument String
    , body : OptionalArgument String
    , state : OptionalArgument Github.Enum.PullRequestUpdateState.PullRequestUpdateState
    , maintainerCanModify : OptionalArgument Bool
    , assigneeIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , milestoneId : OptionalArgument Github.ScalarCodecs.Id
    , labelIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , projectIds : OptionalArgument (List Github.ScalarCodecs.Id)
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdatePullRequestInput into a value that can be used as an argument.
-}
encodeUpdatePullRequestInput : UpdatePullRequestInput -> Value
encodeUpdatePullRequestInput input____ =
    Encode.maybeObject
        [ ( "pullRequestId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.pullRequestId |> Just ), ( "baseRefName", Encode.string |> Encode.optional input____.baseRefName ), ( "title", Encode.string |> Encode.optional input____.title ), ( "body", Encode.string |> Encode.optional input____.body ), ( "state", Encode.enum Github.Enum.PullRequestUpdateState.toString |> Encode.optional input____.state ), ( "maintainerCanModify", Encode.bool |> Encode.optional input____.maintainerCanModify ), ( "assigneeIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.assigneeIds ), ( "milestoneId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.milestoneId ), ( "labelIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.labelIds ), ( "projectIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) |> Encode.optional input____.projectIds ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdatePullRequestReviewCommentInput :
    UpdatePullRequestReviewCommentInputRequiredFields
    -> (UpdatePullRequestReviewCommentInputOptionalFields -> UpdatePullRequestReviewCommentInputOptionalFields)
    -> UpdatePullRequestReviewCommentInput
buildUpdatePullRequestReviewCommentInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { pullRequestReviewCommentId = required____.pullRequestReviewCommentId, body = required____.body, clientMutationId = optionals____.clientMutationId }


type alias UpdatePullRequestReviewCommentInputRequiredFields =
    { pullRequestReviewCommentId : Github.ScalarCodecs.Id
    , body : String
    }


type alias UpdatePullRequestReviewCommentInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdatePullRequestReviewCommentInput input object.
-}
type alias UpdatePullRequestReviewCommentInput =
    { pullRequestReviewCommentId : Github.ScalarCodecs.Id
    , body : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdatePullRequestReviewCommentInput into a value that can be used as an argument.
-}
encodeUpdatePullRequestReviewCommentInput : UpdatePullRequestReviewCommentInput -> Value
encodeUpdatePullRequestReviewCommentInput input____ =
    Encode.maybeObject
        [ ( "pullRequestReviewCommentId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.pullRequestReviewCommentId |> Just ), ( "body", Encode.string input____.body |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdatePullRequestReviewInput :
    UpdatePullRequestReviewInputRequiredFields
    -> (UpdatePullRequestReviewInputOptionalFields -> UpdatePullRequestReviewInputOptionalFields)
    -> UpdatePullRequestReviewInput
buildUpdatePullRequestReviewInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { pullRequestReviewId = required____.pullRequestReviewId, body = required____.body, clientMutationId = optionals____.clientMutationId }


type alias UpdatePullRequestReviewInputRequiredFields =
    { pullRequestReviewId : Github.ScalarCodecs.Id
    , body : String
    }


type alias UpdatePullRequestReviewInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdatePullRequestReviewInput input object.
-}
type alias UpdatePullRequestReviewInput =
    { pullRequestReviewId : Github.ScalarCodecs.Id
    , body : String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdatePullRequestReviewInput into a value that can be used as an argument.
-}
encodeUpdatePullRequestReviewInput : UpdatePullRequestReviewInput -> Value
encodeUpdatePullRequestReviewInput input____ =
    Encode.maybeObject
        [ ( "pullRequestReviewId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.pullRequestReviewId |> Just ), ( "body", Encode.string input____.body |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateRefInput :
    UpdateRefInputRequiredFields
    -> (UpdateRefInputOptionalFields -> UpdateRefInputOptionalFields)
    -> UpdateRefInput
buildUpdateRefInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { force = Absent, clientMutationId = Absent }
    in
    { refId = required____.refId, oid = required____.oid, force = optionals____.force, clientMutationId = optionals____.clientMutationId }


type alias UpdateRefInputRequiredFields =
    { refId : Github.ScalarCodecs.Id
    , oid : Github.ScalarCodecs.GitObjectID
    }


type alias UpdateRefInputOptionalFields =
    { force : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateRefInput input object.
-}
type alias UpdateRefInput =
    { refId : Github.ScalarCodecs.Id
    , oid : Github.ScalarCodecs.GitObjectID
    , force : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateRefInput into a value that can be used as an argument.
-}
encodeUpdateRefInput : UpdateRefInput -> Value
encodeUpdateRefInput input____ =
    Encode.maybeObject
        [ ( "refId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.refId |> Just ), ( "oid", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecGitObjectID) input____.oid |> Just ), ( "force", Encode.bool |> Encode.optional input____.force ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateRepositoryInput :
    UpdateRepositoryInputRequiredFields
    -> (UpdateRepositoryInputOptionalFields -> UpdateRepositoryInputOptionalFields)
    -> UpdateRepositoryInput
buildUpdateRepositoryInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { name = Absent, description = Absent, template = Absent, homepageUrl = Absent, hasWikiEnabled = Absent, hasIssuesEnabled = Absent, hasProjectsEnabled = Absent, hasDiscussionsEnabled = Absent, clientMutationId = Absent }
    in
    { repositoryId = required____.repositoryId, name = optionals____.name, description = optionals____.description, template = optionals____.template, homepageUrl = optionals____.homepageUrl, hasWikiEnabled = optionals____.hasWikiEnabled, hasIssuesEnabled = optionals____.hasIssuesEnabled, hasProjectsEnabled = optionals____.hasProjectsEnabled, hasDiscussionsEnabled = optionals____.hasDiscussionsEnabled, clientMutationId = optionals____.clientMutationId }


type alias UpdateRepositoryInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id }


type alias UpdateRepositoryInputOptionalFields =
    { name : OptionalArgument String
    , description : OptionalArgument String
    , template : OptionalArgument Bool
    , homepageUrl : OptionalArgument Github.ScalarCodecs.Uri
    , hasWikiEnabled : OptionalArgument Bool
    , hasIssuesEnabled : OptionalArgument Bool
    , hasProjectsEnabled : OptionalArgument Bool
    , hasDiscussionsEnabled : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateRepositoryInput input object.
-}
type alias UpdateRepositoryInput =
    { repositoryId : Github.ScalarCodecs.Id
    , name : OptionalArgument String
    , description : OptionalArgument String
    , template : OptionalArgument Bool
    , homepageUrl : OptionalArgument Github.ScalarCodecs.Uri
    , hasWikiEnabled : OptionalArgument Bool
    , hasIssuesEnabled : OptionalArgument Bool
    , hasProjectsEnabled : OptionalArgument Bool
    , hasDiscussionsEnabled : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateRepositoryInput into a value that can be used as an argument.
-}
encodeUpdateRepositoryInput : UpdateRepositoryInput -> Value
encodeUpdateRepositoryInput input____ =
    Encode.maybeObject
        [ ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "name", Encode.string |> Encode.optional input____.name ), ( "description", Encode.string |> Encode.optional input____.description ), ( "template", Encode.bool |> Encode.optional input____.template ), ( "homepageUrl", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecUri) |> Encode.optional input____.homepageUrl ), ( "hasWikiEnabled", Encode.bool |> Encode.optional input____.hasWikiEnabled ), ( "hasIssuesEnabled", Encode.bool |> Encode.optional input____.hasIssuesEnabled ), ( "hasProjectsEnabled", Encode.bool |> Encode.optional input____.hasProjectsEnabled ), ( "hasDiscussionsEnabled", Encode.bool |> Encode.optional input____.hasDiscussionsEnabled ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateRepositoryWebCommitSignoffSettingInput :
    UpdateRepositoryWebCommitSignoffSettingInputRequiredFields
    -> (UpdateRepositoryWebCommitSignoffSettingInputOptionalFields -> UpdateRepositoryWebCommitSignoffSettingInputOptionalFields)
    -> UpdateRepositoryWebCommitSignoffSettingInput
buildUpdateRepositoryWebCommitSignoffSettingInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { repositoryId = required____.repositoryId, webCommitSignoffRequired = required____.webCommitSignoffRequired, clientMutationId = optionals____.clientMutationId }


type alias UpdateRepositoryWebCommitSignoffSettingInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id
    , webCommitSignoffRequired : Bool
    }


type alias UpdateRepositoryWebCommitSignoffSettingInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateRepositoryWebCommitSignoffSettingInput input object.
-}
type alias UpdateRepositoryWebCommitSignoffSettingInput =
    { repositoryId : Github.ScalarCodecs.Id
    , webCommitSignoffRequired : Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateRepositoryWebCommitSignoffSettingInput into a value that can be used as an argument.
-}
encodeUpdateRepositoryWebCommitSignoffSettingInput : UpdateRepositoryWebCommitSignoffSettingInput -> Value
encodeUpdateRepositoryWebCommitSignoffSettingInput input____ =
    Encode.maybeObject
        [ ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "webCommitSignoffRequired", Encode.bool input____.webCommitSignoffRequired |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateSponsorshipPreferencesInput :
    (UpdateSponsorshipPreferencesInputOptionalFields -> UpdateSponsorshipPreferencesInputOptionalFields)
    -> UpdateSponsorshipPreferencesInput
buildUpdateSponsorshipPreferencesInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { sponsorId = Absent, sponsorLogin = Absent, sponsorableId = Absent, sponsorableLogin = Absent, receiveEmails = Absent, privacyLevel = Absent, clientMutationId = Absent }
    in
    { sponsorId = optionals____.sponsorId, sponsorLogin = optionals____.sponsorLogin, sponsorableId = optionals____.sponsorableId, sponsorableLogin = optionals____.sponsorableLogin, receiveEmails = optionals____.receiveEmails, privacyLevel = optionals____.privacyLevel, clientMutationId = optionals____.clientMutationId }


type alias UpdateSponsorshipPreferencesInputOptionalFields =
    { sponsorId : OptionalArgument Github.ScalarCodecs.Id
    , sponsorLogin : OptionalArgument String
    , sponsorableId : OptionalArgument Github.ScalarCodecs.Id
    , sponsorableLogin : OptionalArgument String
    , receiveEmails : OptionalArgument Bool
    , privacyLevel : OptionalArgument Github.Enum.SponsorshipPrivacy.SponsorshipPrivacy
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateSponsorshipPreferencesInput input object.
-}
type alias UpdateSponsorshipPreferencesInput =
    { sponsorId : OptionalArgument Github.ScalarCodecs.Id
    , sponsorLogin : OptionalArgument String
    , sponsorableId : OptionalArgument Github.ScalarCodecs.Id
    , sponsorableLogin : OptionalArgument String
    , receiveEmails : OptionalArgument Bool
    , privacyLevel : OptionalArgument Github.Enum.SponsorshipPrivacy.SponsorshipPrivacy
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateSponsorshipPreferencesInput into a value that can be used as an argument.
-}
encodeUpdateSponsorshipPreferencesInput : UpdateSponsorshipPreferencesInput -> Value
encodeUpdateSponsorshipPreferencesInput input____ =
    Encode.maybeObject
        [ ( "sponsorId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.sponsorId ), ( "sponsorLogin", Encode.string |> Encode.optional input____.sponsorLogin ), ( "sponsorableId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.sponsorableId ), ( "sponsorableLogin", Encode.string |> Encode.optional input____.sponsorableLogin ), ( "receiveEmails", Encode.bool |> Encode.optional input____.receiveEmails ), ( "privacyLevel", Encode.enum Github.Enum.SponsorshipPrivacy.toString |> Encode.optional input____.privacyLevel ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateSubscriptionInput :
    UpdateSubscriptionInputRequiredFields
    -> (UpdateSubscriptionInputOptionalFields -> UpdateSubscriptionInputOptionalFields)
    -> UpdateSubscriptionInput
buildUpdateSubscriptionInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { subscribableId = required____.subscribableId, state = required____.state, clientMutationId = optionals____.clientMutationId }


type alias UpdateSubscriptionInputRequiredFields =
    { subscribableId : Github.ScalarCodecs.Id
    , state : Github.Enum.SubscriptionState.SubscriptionState
    }


type alias UpdateSubscriptionInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateSubscriptionInput input object.
-}
type alias UpdateSubscriptionInput =
    { subscribableId : Github.ScalarCodecs.Id
    , state : Github.Enum.SubscriptionState.SubscriptionState
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateSubscriptionInput into a value that can be used as an argument.
-}
encodeUpdateSubscriptionInput : UpdateSubscriptionInput -> Value
encodeUpdateSubscriptionInput input____ =
    Encode.maybeObject
        [ ( "subscribableId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.subscribableId |> Just ), ( "state", Encode.enum Github.Enum.SubscriptionState.toString input____.state |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateTeamDiscussionCommentInput :
    UpdateTeamDiscussionCommentInputRequiredFields
    -> (UpdateTeamDiscussionCommentInputOptionalFields -> UpdateTeamDiscussionCommentInputOptionalFields)
    -> UpdateTeamDiscussionCommentInput
buildUpdateTeamDiscussionCommentInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { bodyVersion = Absent, clientMutationId = Absent }
    in
    { id = required____.id, body = required____.body, bodyVersion = optionals____.bodyVersion, clientMutationId = optionals____.clientMutationId }


type alias UpdateTeamDiscussionCommentInputRequiredFields =
    { id : Github.ScalarCodecs.Id
    , body : String
    }


type alias UpdateTeamDiscussionCommentInputOptionalFields =
    { bodyVersion : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateTeamDiscussionCommentInput input object.
-}
type alias UpdateTeamDiscussionCommentInput =
    { id : Github.ScalarCodecs.Id
    , body : String
    , bodyVersion : OptionalArgument String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateTeamDiscussionCommentInput into a value that can be used as an argument.
-}
encodeUpdateTeamDiscussionCommentInput : UpdateTeamDiscussionCommentInput -> Value
encodeUpdateTeamDiscussionCommentInput input____ =
    Encode.maybeObject
        [ ( "id", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "body", Encode.string input____.body |> Just ), ( "bodyVersion", Encode.string |> Encode.optional input____.bodyVersion ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateTeamDiscussionInput :
    UpdateTeamDiscussionInputRequiredFields
    -> (UpdateTeamDiscussionInputOptionalFields -> UpdateTeamDiscussionInputOptionalFields)
    -> UpdateTeamDiscussionInput
buildUpdateTeamDiscussionInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { title = Absent, body = Absent, bodyVersion = Absent, pinned = Absent, clientMutationId = Absent }
    in
    { id = required____.id, title = optionals____.title, body = optionals____.body, bodyVersion = optionals____.bodyVersion, pinned = optionals____.pinned, clientMutationId = optionals____.clientMutationId }


type alias UpdateTeamDiscussionInputRequiredFields =
    { id : Github.ScalarCodecs.Id }


type alias UpdateTeamDiscussionInputOptionalFields =
    { title : OptionalArgument String
    , body : OptionalArgument String
    , bodyVersion : OptionalArgument String
    , pinned : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Type for the UpdateTeamDiscussionInput input object.
-}
type alias UpdateTeamDiscussionInput =
    { id : Github.ScalarCodecs.Id
    , title : OptionalArgument String
    , body : OptionalArgument String
    , bodyVersion : OptionalArgument String
    , pinned : OptionalArgument Bool
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateTeamDiscussionInput into a value that can be used as an argument.
-}
encodeUpdateTeamDiscussionInput : UpdateTeamDiscussionInput -> Value
encodeUpdateTeamDiscussionInput input____ =
    Encode.maybeObject
        [ ( "id", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "title", Encode.string |> Encode.optional input____.title ), ( "body", Encode.string |> Encode.optional input____.body ), ( "bodyVersion", Encode.string |> Encode.optional input____.bodyVersion ), ( "pinned", Encode.bool |> Encode.optional input____.pinned ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateTeamsRepositoryInput :
    UpdateTeamsRepositoryInputRequiredFields
    -> (UpdateTeamsRepositoryInputOptionalFields -> UpdateTeamsRepositoryInputOptionalFields)
    -> UpdateTeamsRepositoryInput
buildUpdateTeamsRepositoryInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { repositoryId = required____.repositoryId, teamIds = required____.teamIds, permission = required____.permission, clientMutationId = optionals____.clientMutationId }


type alias UpdateTeamsRepositoryInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id
    , teamIds : List Github.ScalarCodecs.Id
    , permission : Github.Enum.RepositoryPermission.RepositoryPermission
    }


type alias UpdateTeamsRepositoryInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateTeamsRepositoryInput input object.
-}
type alias UpdateTeamsRepositoryInput =
    { repositoryId : Github.ScalarCodecs.Id
    , teamIds : List Github.ScalarCodecs.Id
    , permission : Github.Enum.RepositoryPermission.RepositoryPermission
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateTeamsRepositoryInput into a value that can be used as an argument.
-}
encodeUpdateTeamsRepositoryInput : UpdateTeamsRepositoryInput -> Value
encodeUpdateTeamsRepositoryInput input____ =
    Encode.maybeObject
        [ ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "teamIds", ((Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) |> Encode.list) input____.teamIds |> Just ), ( "permission", Encode.enum Github.Enum.RepositoryPermission.toString input____.permission |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUpdateTopicsInput :
    UpdateTopicsInputRequiredFields
    -> (UpdateTopicsInputOptionalFields -> UpdateTopicsInputOptionalFields)
    -> UpdateTopicsInput
buildUpdateTopicsInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { repositoryId = required____.repositoryId, topicNames = required____.topicNames, clientMutationId = optionals____.clientMutationId }


type alias UpdateTopicsInputRequiredFields =
    { repositoryId : Github.ScalarCodecs.Id
    , topicNames : List String
    }


type alias UpdateTopicsInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the UpdateTopicsInput input object.
-}
type alias UpdateTopicsInput =
    { repositoryId : Github.ScalarCodecs.Id
    , topicNames : List String
    , clientMutationId : OptionalArgument String
    }


{-| Encode a UpdateTopicsInput into a value that can be used as an argument.
-}
encodeUpdateTopicsInput : UpdateTopicsInput -> Value
encodeUpdateTopicsInput input____ =
    Encode.maybeObject
        [ ( "repositoryId", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.repositoryId |> Just ), ( "topicNames", (Encode.string |> Encode.list) input____.topicNames |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildUserStatusOrder :
    UserStatusOrderRequiredFields
    -> UserStatusOrder
buildUserStatusOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias UserStatusOrderRequiredFields =
    { field : Github.Enum.UserStatusOrderField.UserStatusOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the UserStatusOrder input object.
-}
type alias UserStatusOrder =
    { field : Github.Enum.UserStatusOrderField.UserStatusOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a UserStatusOrder into a value that can be used as an argument.
-}
encodeUserStatusOrder : UserStatusOrder -> Value
encodeUserStatusOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.UserStatusOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildVerifiableDomainOrder :
    VerifiableDomainOrderRequiredFields
    -> VerifiableDomainOrder
buildVerifiableDomainOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias VerifiableDomainOrderRequiredFields =
    { field : Github.Enum.VerifiableDomainOrderField.VerifiableDomainOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the VerifiableDomainOrder input object.
-}
type alias VerifiableDomainOrder =
    { field : Github.Enum.VerifiableDomainOrderField.VerifiableDomainOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a VerifiableDomainOrder into a value that can be used as an argument.
-}
encodeVerifiableDomainOrder : VerifiableDomainOrder -> Value
encodeVerifiableDomainOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.VerifiableDomainOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]


buildVerifyVerifiableDomainInput :
    VerifyVerifiableDomainInputRequiredFields
    -> (VerifyVerifiableDomainInputOptionalFields -> VerifyVerifiableDomainInputOptionalFields)
    -> VerifyVerifiableDomainInput
buildVerifyVerifiableDomainInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { clientMutationId = Absent }
    in
    { id = required____.id, clientMutationId = optionals____.clientMutationId }


type alias VerifyVerifiableDomainInputRequiredFields =
    { id : Github.ScalarCodecs.Id }


type alias VerifyVerifiableDomainInputOptionalFields =
    { clientMutationId : OptionalArgument String }


{-| Type for the VerifyVerifiableDomainInput input object.
-}
type alias VerifyVerifiableDomainInput =
    { id : Github.ScalarCodecs.Id
    , clientMutationId : OptionalArgument String
    }


{-| Encode a VerifyVerifiableDomainInput into a value that can be used as an argument.
-}
encodeVerifyVerifiableDomainInput : VerifyVerifiableDomainInput -> Value
encodeVerifyVerifiableDomainInput input____ =
    Encode.maybeObject
        [ ( "id", (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId) input____.id |> Just ), ( "clientMutationId", Encode.string |> Encode.optional input____.clientMutationId ) ]


buildWorkflowRunOrder :
    WorkflowRunOrderRequiredFields
    -> WorkflowRunOrder
buildWorkflowRunOrder required____ =
    { field = required____.field, direction = required____.direction }


type alias WorkflowRunOrderRequiredFields =
    { field : Github.Enum.WorkflowRunOrderField.WorkflowRunOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Type for the WorkflowRunOrder input object.
-}
type alias WorkflowRunOrder =
    { field : Github.Enum.WorkflowRunOrderField.WorkflowRunOrderField
    , direction : Github.Enum.OrderDirection.OrderDirection
    }


{-| Encode a WorkflowRunOrder into a value that can be used as an argument.
-}
encodeWorkflowRunOrder : WorkflowRunOrder -> Value
encodeWorkflowRunOrder input____ =
    Encode.maybeObject
        [ ( "field", Encode.enum Github.Enum.WorkflowRunOrderField.toString input____.field |> Just ), ( "direction", Encode.enum Github.Enum.OrderDirection.toString input____.direction |> Just ) ]
