-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Enum.SecurityAdvisoryClassification exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Classification of the advisory.

  - General - Classification of general advisories.
  - Malware - Classification of malware advisories.

-}
type SecurityAdvisoryClassification
    = General
    | Malware


list : List SecurityAdvisoryClassification
list =
    [ General, Malware ]


decoder : Decoder SecurityAdvisoryClassification
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "GENERAL" ->
                        Decode.succeed General

                    "MALWARE" ->
                        Decode.succeed Malware

                    _ ->
                        Decode.fail ("Invalid SecurityAdvisoryClassification type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : SecurityAdvisoryClassification -> String
toString enum____ =
    case enum____ of
        General ->
            "GENERAL"

        Malware ->
            "MALWARE"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe SecurityAdvisoryClassification
fromString enumString____ =
    case enumString____ of
        "GENERAL" ->
            Just General

        "MALWARE" ->
            Just Malware

        _ ->
            Nothing
