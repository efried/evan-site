-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Enum.MigrationState exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The Octoshift migration state.

  - NotStarted - The Octoshift migration has not started.
  - Queued - The Octoshift migration has been queued.
  - InProgress - The Octoshift migration is in progress.
  - Succeeded - The Octoshift migration has succeeded.
  - Failed - The Octoshift migration has failed.
  - PendingValidation - The Octoshift migration needs to have its credentials validated.
  - FailedValidation - The Octoshift migration has invalid credentials.

-}
type MigrationState
    = NotStarted
    | Queued
    | InProgress
    | Succeeded
    | Failed
    | PendingValidation
    | FailedValidation


list : List MigrationState
list =
    [ NotStarted, Queued, InProgress, Succeeded, Failed, PendingValidation, FailedValidation ]


decoder : Decoder MigrationState
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "NOT_STARTED" ->
                        Decode.succeed NotStarted

                    "QUEUED" ->
                        Decode.succeed Queued

                    "IN_PROGRESS" ->
                        Decode.succeed InProgress

                    "SUCCEEDED" ->
                        Decode.succeed Succeeded

                    "FAILED" ->
                        Decode.succeed Failed

                    "PENDING_VALIDATION" ->
                        Decode.succeed PendingValidation

                    "FAILED_VALIDATION" ->
                        Decode.succeed FailedValidation

                    _ ->
                        Decode.fail ("Invalid MigrationState type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : MigrationState -> String
toString enum____ =
    case enum____ of
        NotStarted ->
            "NOT_STARTED"

        Queued ->
            "QUEUED"

        InProgress ->
            "IN_PROGRESS"

        Succeeded ->
            "SUCCEEDED"

        Failed ->
            "FAILED"

        PendingValidation ->
            "PENDING_VALIDATION"

        FailedValidation ->
            "FAILED_VALIDATION"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe MigrationState
fromString enumString____ =
    case enumString____ of
        "NOT_STARTED" ->
            Just NotStarted

        "QUEUED" ->
            Just Queued

        "IN_PROGRESS" ->
            Just InProgress

        "SUCCEEDED" ->
            Just Succeeded

        "FAILED" ->
            Just Failed

        "PENDING_VALIDATION" ->
            Just PendingValidation

        "FAILED_VALIDATION" ->
            Just FailedValidation

        _ ->
            Nothing
