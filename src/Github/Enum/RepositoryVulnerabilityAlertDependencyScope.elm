-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Enum.RepositoryVulnerabilityAlertDependencyScope exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The possible scopes of an alert's dependency.

  - Runtime - A dependency that is leveraged during application runtime
  - Development - A dependency that is only used in development

-}
type RepositoryVulnerabilityAlertDependencyScope
    = Runtime
    | Development


list : List RepositoryVulnerabilityAlertDependencyScope
list =
    [ Runtime, Development ]


decoder : Decoder RepositoryVulnerabilityAlertDependencyScope
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "RUNTIME" ->
                        Decode.succeed Runtime

                    "DEVELOPMENT" ->
                        Decode.succeed Development

                    _ ->
                        Decode.fail ("Invalid RepositoryVulnerabilityAlertDependencyScope type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : RepositoryVulnerabilityAlertDependencyScope -> String
toString enum____ =
    case enum____ of
        Runtime ->
            "RUNTIME"

        Development ->
            "DEVELOPMENT"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe RepositoryVulnerabilityAlertDependencyScope
fromString enumString____ =
    case enumString____ of
        "RUNTIME" ->
            Just Runtime

        "DEVELOPMENT" ->
            Just Development

        _ ->
            Nothing
