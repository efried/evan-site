-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Enum.PinnedDiscussionPattern exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Preconfigured background patterns that may be used to style discussions pinned within a repository.

  - DotFill - A solid dot pattern
  - Plus - A plus sign pattern
  - Zap - A lightning bolt pattern
  - ChevronUp - An upward-facing chevron pattern
  - Dot - A hollow dot pattern
  - HeartFill - A heart pattern

-}
type PinnedDiscussionPattern
    = DotFill
    | Plus
    | Zap
    | ChevronUp
    | Dot
    | HeartFill


list : List PinnedDiscussionPattern
list =
    [ DotFill, Plus, Zap, ChevronUp, Dot, HeartFill ]


decoder : Decoder PinnedDiscussionPattern
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "DOT_FILL" ->
                        Decode.succeed DotFill

                    "PLUS" ->
                        Decode.succeed Plus

                    "ZAP" ->
                        Decode.succeed Zap

                    "CHEVRON_UP" ->
                        Decode.succeed ChevronUp

                    "DOT" ->
                        Decode.succeed Dot

                    "HEART_FILL" ->
                        Decode.succeed HeartFill

                    _ ->
                        Decode.fail ("Invalid PinnedDiscussionPattern type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : PinnedDiscussionPattern -> String
toString enum____ =
    case enum____ of
        DotFill ->
            "DOT_FILL"

        Plus ->
            "PLUS"

        Zap ->
            "ZAP"

        ChevronUp ->
            "CHEVRON_UP"

        Dot ->
            "DOT"

        HeartFill ->
            "HEART_FILL"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe PinnedDiscussionPattern
fromString enumString____ =
    case enumString____ of
        "DOT_FILL" ->
            Just DotFill

        "PLUS" ->
            Just Plus

        "ZAP" ->
            Just Zap

        "CHEVRON_UP" ->
            Just ChevronUp

        "DOT" ->
            Just Dot

        "HEART_FILL" ->
            Just HeartFill

        _ ->
            Nothing
