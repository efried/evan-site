-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Enum.SponsorsActivityAction exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The possible actions that GitHub Sponsors activities can represent.

  - NewSponsorship - The activity was starting a sponsorship.
  - CancelledSponsorship - The activity was cancelling a sponsorship.
  - TierChange - The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change.
  - Refund - The activity was funds being refunded to the sponsor or GitHub.
  - PendingChange - The activity was scheduling a downgrade or cancellation.
  - SponsorMatchDisabled - The activity was disabling matching for a previously matched sponsorship.

-}
type SponsorsActivityAction
    = NewSponsorship
    | CancelledSponsorship
    | TierChange
    | Refund
    | PendingChange
    | SponsorMatchDisabled


list : List SponsorsActivityAction
list =
    [ NewSponsorship, CancelledSponsorship, TierChange, Refund, PendingChange, SponsorMatchDisabled ]


decoder : Decoder SponsorsActivityAction
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "NEW_SPONSORSHIP" ->
                        Decode.succeed NewSponsorship

                    "CANCELLED_SPONSORSHIP" ->
                        Decode.succeed CancelledSponsorship

                    "TIER_CHANGE" ->
                        Decode.succeed TierChange

                    "REFUND" ->
                        Decode.succeed Refund

                    "PENDING_CHANGE" ->
                        Decode.succeed PendingChange

                    "SPONSOR_MATCH_DISABLED" ->
                        Decode.succeed SponsorMatchDisabled

                    _ ->
                        Decode.fail ("Invalid SponsorsActivityAction type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : SponsorsActivityAction -> String
toString enum____ =
    case enum____ of
        NewSponsorship ->
            "NEW_SPONSORSHIP"

        CancelledSponsorship ->
            "CANCELLED_SPONSORSHIP"

        TierChange ->
            "TIER_CHANGE"

        Refund ->
            "REFUND"

        PendingChange ->
            "PENDING_CHANGE"

        SponsorMatchDisabled ->
            "SPONSOR_MATCH_DISABLED"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe SponsorsActivityAction
fromString enumString____ =
    case enumString____ of
        "NEW_SPONSORSHIP" ->
            Just NewSponsorship

        "CANCELLED_SPONSORSHIP" ->
            Just CancelledSponsorship

        "TIER_CHANGE" ->
            Just TierChange

        "REFUND" ->
            Just Refund

        "PENDING_CHANGE" ->
            Just PendingChange

        "SPONSOR_MATCH_DISABLED" ->
            Just SponsorMatchDisabled

        _ ->
            Nothing
