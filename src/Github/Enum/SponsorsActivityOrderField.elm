-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Enum.SponsorsActivityOrderField exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Properties by which GitHub Sponsors activity connections can be ordered.

  - Timestamp - Order activities by when they happened.

-}
type SponsorsActivityOrderField
    = Timestamp


list : List SponsorsActivityOrderField
list =
    [ Timestamp ]


decoder : Decoder SponsorsActivityOrderField
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "TIMESTAMP" ->
                        Decode.succeed Timestamp

                    _ ->
                        Decode.fail ("Invalid SponsorsActivityOrderField type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : SponsorsActivityOrderField -> String
toString enum____ =
    case enum____ of
        Timestamp ->
            "TIMESTAMP"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe SponsorsActivityOrderField
fromString enumString____ =
    case enumString____ of
        "TIMESTAMP" ->
            Just Timestamp

        _ ->
            Nothing
