-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Enum.DependencyGraphEcosystem exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The possible ecosystems of a dependency graph package.

  - Rubygems - Ruby gems hosted at RubyGems.org
  - Npm - JavaScript packages hosted at npmjs.com
  - Pip - Python packages hosted at PyPI.org
  - Maven - Java artifacts hosted at the Maven central repository
  - Nuget - .NET packages hosted at the NuGet Gallery
  - Composer - PHP packages hosted at packagist.org
  - Go - Go modules
  - Actions - GitHub Actions
  - Rust - Rust crates
  - Pub - Dart packages hosted at pub.dev

-}
type DependencyGraphEcosystem
    = Rubygems
    | Npm
    | Pip
    | Maven
    | Nuget
    | Composer
    | Go
    | Actions
    | Rust
    | Pub


list : List DependencyGraphEcosystem
list =
    [ Rubygems, Npm, Pip, Maven, Nuget, Composer, Go, Actions, Rust, Pub ]


decoder : Decoder DependencyGraphEcosystem
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "RUBYGEMS" ->
                        Decode.succeed Rubygems

                    "NPM" ->
                        Decode.succeed Npm

                    "PIP" ->
                        Decode.succeed Pip

                    "MAVEN" ->
                        Decode.succeed Maven

                    "NUGET" ->
                        Decode.succeed Nuget

                    "COMPOSER" ->
                        Decode.succeed Composer

                    "GO" ->
                        Decode.succeed Go

                    "ACTIONS" ->
                        Decode.succeed Actions

                    "RUST" ->
                        Decode.succeed Rust

                    "PUB" ->
                        Decode.succeed Pub

                    _ ->
                        Decode.fail ("Invalid DependencyGraphEcosystem type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : DependencyGraphEcosystem -> String
toString enum____ =
    case enum____ of
        Rubygems ->
            "RUBYGEMS"

        Npm ->
            "NPM"

        Pip ->
            "PIP"

        Maven ->
            "MAVEN"

        Nuget ->
            "NUGET"

        Composer ->
            "COMPOSER"

        Go ->
            "GO"

        Actions ->
            "ACTIONS"

        Rust ->
            "RUST"

        Pub ->
            "PUB"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe DependencyGraphEcosystem
fromString enumString____ =
    case enumString____ of
        "RUBYGEMS" ->
            Just Rubygems

        "NPM" ->
            Just Npm

        "PIP" ->
            Just Pip

        "MAVEN" ->
            Just Maven

        "NUGET" ->
            Just Nuget

        "COMPOSER" ->
            Just Composer

        "GO" ->
            Just Go

        "ACTIONS" ->
            Just Actions

        "RUST" ->
            Just Rust

        "PUB" ->
            Just Pub

        _ ->
            Nothing
