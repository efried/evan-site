-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Enum.ActorType exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The actor's type.

  - User - Indicates a user actor.
  - Team - Indicates a team actor.

-}
type ActorType
    = User
    | Team


list : List ActorType
list =
    [ User, Team ]


decoder : Decoder ActorType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "USER" ->
                        Decode.succeed User

                    "TEAM" ->
                        Decode.succeed Team

                    _ ->
                        Decode.fail ("Invalid ActorType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ActorType -> String
toString enum____ =
    case enum____ of
        User ->
            "USER"

        Team ->
            "TEAM"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ActorType
fromString enumString____ =
    case enumString____ of
        "USER" ->
            Just User

        "TEAM" ->
            Just Team

        _ ->
            Nothing
