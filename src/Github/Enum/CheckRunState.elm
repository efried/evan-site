-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Enum.CheckRunState exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The possible states of a check run in a status rollup.

  - ActionRequired - The check run requires action.
  - Cancelled - The check run has been cancelled.
  - Completed - The check run has been completed.
  - Failure - The check run has failed.
  - InProgress - The check run is in progress.
  - Neutral - The check run was neutral.
  - Pending - The check run is in pending state.
  - Queued - The check run has been queued.
  - Skipped - The check run was skipped.
  - Stale - The check run was marked stale by GitHub. Only GitHub can use this conclusion.
  - StartupFailure - The check run has failed at startup.
  - Success - The check run has succeeded.
  - TimedOut - The check run has timed out.
  - Waiting - The check run is in waiting state.

-}
type CheckRunState
    = ActionRequired
    | Cancelled
    | Completed
    | Failure
    | InProgress
    | Neutral
    | Pending
    | Queued
    | Skipped
    | Stale
    | StartupFailure
    | Success
    | TimedOut
    | Waiting


list : List CheckRunState
list =
    [ ActionRequired, Cancelled, Completed, Failure, InProgress, Neutral, Pending, Queued, Skipped, Stale, StartupFailure, Success, TimedOut, Waiting ]


decoder : Decoder CheckRunState
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "ACTION_REQUIRED" ->
                        Decode.succeed ActionRequired

                    "CANCELLED" ->
                        Decode.succeed Cancelled

                    "COMPLETED" ->
                        Decode.succeed Completed

                    "FAILURE" ->
                        Decode.succeed Failure

                    "IN_PROGRESS" ->
                        Decode.succeed InProgress

                    "NEUTRAL" ->
                        Decode.succeed Neutral

                    "PENDING" ->
                        Decode.succeed Pending

                    "QUEUED" ->
                        Decode.succeed Queued

                    "SKIPPED" ->
                        Decode.succeed Skipped

                    "STALE" ->
                        Decode.succeed Stale

                    "STARTUP_FAILURE" ->
                        Decode.succeed StartupFailure

                    "SUCCESS" ->
                        Decode.succeed Success

                    "TIMED_OUT" ->
                        Decode.succeed TimedOut

                    "WAITING" ->
                        Decode.succeed Waiting

                    _ ->
                        Decode.fail ("Invalid CheckRunState type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : CheckRunState -> String
toString enum____ =
    case enum____ of
        ActionRequired ->
            "ACTION_REQUIRED"

        Cancelled ->
            "CANCELLED"

        Completed ->
            "COMPLETED"

        Failure ->
            "FAILURE"

        InProgress ->
            "IN_PROGRESS"

        Neutral ->
            "NEUTRAL"

        Pending ->
            "PENDING"

        Queued ->
            "QUEUED"

        Skipped ->
            "SKIPPED"

        Stale ->
            "STALE"

        StartupFailure ->
            "STARTUP_FAILURE"

        Success ->
            "SUCCESS"

        TimedOut ->
            "TIMED_OUT"

        Waiting ->
            "WAITING"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe CheckRunState
fromString enumString____ =
    case enumString____ of
        "ACTION_REQUIRED" ->
            Just ActionRequired

        "CANCELLED" ->
            Just Cancelled

        "COMPLETED" ->
            Just Completed

        "FAILURE" ->
            Just Failure

        "IN_PROGRESS" ->
            Just InProgress

        "NEUTRAL" ->
            Just Neutral

        "PENDING" ->
            Just Pending

        "QUEUED" ->
            Just Queued

        "SKIPPED" ->
            Just Skipped

        "STALE" ->
            Just Stale

        "STARTUP_FAILURE" ->
            Just StartupFailure

        "SUCCESS" ->
            Just Success

        "TIMED_OUT" ->
            Just TimedOut

        "WAITING" ->
            Just Waiting

        _ ->
            Nothing
