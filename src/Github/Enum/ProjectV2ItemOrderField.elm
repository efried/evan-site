-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Enum.ProjectV2ItemOrderField exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| Properties by which project v2 item connections can be ordered.

  - Position - Order project v2 items by the their position in the project

-}
type ProjectV2ItemOrderField
    = Position


list : List ProjectV2ItemOrderField
list =
    [ Position ]


decoder : Decoder ProjectV2ItemOrderField
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "POSITION" ->
                        Decode.succeed Position

                    _ ->
                        Decode.fail ("Invalid ProjectV2ItemOrderField type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : ProjectV2ItemOrderField -> String
toString enum____ =
    case enum____ of
        Position ->
            "POSITION"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe ProjectV2ItemOrderField
fromString enumString____ =
    case enumString____ of
        "POSITION" ->
            Just Position

        _ ->
            Nothing
