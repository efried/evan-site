-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Enum.DismissReason exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The possible reasons that a Dependabot alert was dismissed.

  - FixStarted - A fix has already been started
  - NoBandwidth - No bandwidth to fix this
  - TolerableRisk - Risk is tolerable to this project
  - Inaccurate - This alert is inaccurate or incorrect
  - NotUsed - Vulnerable code is not actually used

-}
type DismissReason
    = FixStarted
    | NoBandwidth
    | TolerableRisk
    | Inaccurate
    | NotUsed


list : List DismissReason
list =
    [ FixStarted, NoBandwidth, TolerableRisk, Inaccurate, NotUsed ]


decoder : Decoder DismissReason
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "FIX_STARTED" ->
                        Decode.succeed FixStarted

                    "NO_BANDWIDTH" ->
                        Decode.succeed NoBandwidth

                    "TOLERABLE_RISK" ->
                        Decode.succeed TolerableRisk

                    "INACCURATE" ->
                        Decode.succeed Inaccurate

                    "NOT_USED" ->
                        Decode.succeed NotUsed

                    _ ->
                        Decode.fail ("Invalid DismissReason type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : DismissReason -> String
toString enum____ =
    case enum____ of
        FixStarted ->
            "FIX_STARTED"

        NoBandwidth ->
            "NO_BANDWIDTH"

        TolerableRisk ->
            "TOLERABLE_RISK"

        Inaccurate ->
            "INACCURATE"

        NotUsed ->
            "NOT_USED"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe DismissReason
fromString enumString____ =
    case enumString____ of
        "FIX_STARTED" ->
            Just FixStarted

        "NO_BANDWIDTH" ->
            Just NoBandwidth

        "TOLERABLE_RISK" ->
            Just TolerableRisk

        "INACCURATE" ->
            Just Inaccurate

        "NOT_USED" ->
            Just NotUsed

        _ ->
            Nothing
