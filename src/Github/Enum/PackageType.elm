-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Enum.PackageType exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The possible types of a package.

  - Npm - An npm package.
  - Rubygems - A rubygems package.
  - Maven - A maven package.
  - Docker - A docker image.
  - Debian - A debian package.
  - Nuget - A nuget package.
  - Pypi - A python package.

-}
type PackageType
    = Npm
    | Rubygems
    | Maven
    | Docker
    | Debian
    | Nuget
    | Pypi


list : List PackageType
list =
    [ Npm, Rubygems, Maven, Docker, Debian, Nuget, Pypi ]


decoder : Decoder PackageType
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "NPM" ->
                        Decode.succeed Npm

                    "RUBYGEMS" ->
                        Decode.succeed Rubygems

                    "MAVEN" ->
                        Decode.succeed Maven

                    "DOCKER" ->
                        Decode.succeed Docker

                    "DEBIAN" ->
                        Decode.succeed Debian

                    "NUGET" ->
                        Decode.succeed Nuget

                    "PYPI" ->
                        Decode.succeed Pypi

                    _ ->
                        Decode.fail ("Invalid PackageType type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : PackageType -> String
toString enum____ =
    case enum____ of
        Npm ->
            "NPM"

        Rubygems ->
            "RUBYGEMS"

        Maven ->
            "MAVEN"

        Docker ->
            "DOCKER"

        Debian ->
            "DEBIAN"

        Nuget ->
            "NUGET"

        Pypi ->
            "PYPI"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe PackageType
fromString enumString____ =
    case enumString____ of
        "NPM" ->
            Just Npm

        "RUBYGEMS" ->
            Just Rubygems

        "MAVEN" ->
            Just Maven

        "DOCKER" ->
            Just Docker

        "DEBIAN" ->
            Just Debian

        "NUGET" ->
            Just Nuget

        "PYPI" ->
            Just Pypi

        _ ->
            Nothing
