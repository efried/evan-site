-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Enum.RepositoryVulnerabilityAlertState exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| The possible states of an alert

  - Open - An alert that is still open.
  - Fixed - An alert that has been resolved by a code change.
  - Dismissed - An alert that has been manually closed by a user.

-}
type RepositoryVulnerabilityAlertState
    = Open
    | Fixed
    | Dismissed


list : List RepositoryVulnerabilityAlertState
list =
    [ Open, Fixed, Dismissed ]


decoder : Decoder RepositoryVulnerabilityAlertState
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "OPEN" ->
                        Decode.succeed Open

                    "FIXED" ->
                        Decode.succeed Fixed

                    "DISMISSED" ->
                        Decode.succeed Dismissed

                    _ ->
                        Decode.fail ("Invalid RepositoryVulnerabilityAlertState type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : RepositoryVulnerabilityAlertState -> String
toString enum____ =
    case enum____ of
        Open ->
            "OPEN"

        Fixed ->
            "FIXED"

        Dismissed ->
            "DISMISSED"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe RepositoryVulnerabilityAlertState
fromString enumString____ =
    case enumString____ of
        "OPEN" ->
            Just Open

        "FIXED" ->
            Just Fixed

        "DISMISSED" ->
            Just Dismissed

        _ ->
            Nothing
