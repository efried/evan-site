-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Interface.Migration exposing (..)

import Github.Enum.MigrationState
import Github.InputObject
import Github.Interface
import Github.Object
import Github.Scalar
import Github.ScalarCodecs
import Github.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode


type alias Fragments decodesTo =
    { onRepositoryMigration : SelectionSet decodesTo Github.Object.RepositoryMigration
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo Github.Interface.Migration
fragments selections____ =
    Object.exhaustiveFragmentSelection
        [ Object.buildFragment "RepositoryMigration" selections____.onRepositoryMigration
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onRepositoryMigration = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


{-| The Octoshift migration flag to continue on error.
-}
continueOnError : SelectionSet Bool Github.Interface.Migration
continueOnError =
    Object.selectionForField "Bool" "continueOnError" [] Decode.bool


{-| Identifies the date and time when the object was created.
-}
createdAt : SelectionSet Github.ScalarCodecs.DateTime Github.Interface.Migration
createdAt =
    Object.selectionForField "ScalarCodecs.DateTime" "createdAt" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecDateTime |> .decoder)


{-| Identifies the primary key from the database.
-}
databaseId : SelectionSet (Maybe String) Github.Interface.Migration
databaseId =
    Object.selectionForField "(Maybe String)" "databaseId" [] (Decode.string |> Decode.nullable)


{-| The reason the migration failed.
-}
failureReason : SelectionSet (Maybe String) Github.Interface.Migration
failureReason =
    Object.selectionForField "(Maybe String)" "failureReason" [] (Decode.string |> Decode.nullable)


id : SelectionSet Github.ScalarCodecs.Id Github.Interface.Migration
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| The URL for the migration log (expires 1 day after migration completes).
-}
migrationLogUrl : SelectionSet (Maybe Github.ScalarCodecs.Uri) Github.Interface.Migration
migrationLogUrl =
    Object.selectionForField "(Maybe ScalarCodecs.Uri)" "migrationLogUrl" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecUri |> .decoder |> Decode.nullable)


{-| The Octoshift migration source.
-}
migrationSource :
    SelectionSet decodesTo Github.Object.MigrationSource
    -> SelectionSet decodesTo Github.Interface.Migration
migrationSource object____ =
    Object.selectionForCompositeField "migrationSource" [] object____ Basics.identity


{-| The target repository name.
-}
repositoryName : SelectionSet String Github.Interface.Migration
repositoryName =
    Object.selectionForField "String" "repositoryName" [] Decode.string


{-| The Octoshift migration source URL.
-}
sourceUrl : SelectionSet Github.ScalarCodecs.Uri Github.Interface.Migration
sourceUrl =
    Object.selectionForField "ScalarCodecs.Uri" "sourceUrl" [] (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapCodecs |> .codecUri |> .decoder)


{-| The Octoshift migration state.
-}
state : SelectionSet Github.Enum.MigrationState.MigrationState Github.Interface.Migration
state =
    Object.selectionForField "Enum.MigrationState.MigrationState" "state" [] Github.Enum.MigrationState.decoder
