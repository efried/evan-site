-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Interface.Sponsorable exposing (..)

import Github.Enum.SponsorsActivityAction
import Github.Enum.SponsorsActivityPeriod
import Github.InputObject
import Github.Interface
import Github.Object
import Github.Scalar
import Github.ScalarCodecs
import Github.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode


type alias Fragments decodesTo =
    { onOrganization : SelectionSet decodesTo Github.Object.Organization
    , onUser : SelectionSet decodesTo Github.Object.User
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo Github.Interface.Sponsorable
fragments selections____ =
    Object.exhaustiveFragmentSelection
        [ Object.buildFragment "Organization" selections____.onOrganization
        , Object.buildFragment "User" selections____.onUser
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onOrganization = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onUser = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


{-| The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
-}
estimatedNextSponsorsPayoutInCents : SelectionSet Int Github.Interface.Sponsorable
estimatedNextSponsorsPayoutInCents =
    Object.selectionForField "Int" "estimatedNextSponsorsPayoutInCents" [] Decode.int


{-| True if this user/organization has a GitHub Sponsors listing.
-}
hasSponsorsListing : SelectionSet Bool Github.Interface.Sponsorable
hasSponsorsListing =
    Object.selectionForField "Bool" "hasSponsorsListing" [] Decode.bool


type alias IsSponsoredByRequiredArguments =
    { accountLogin : String }


{-| Check if the given account is sponsoring this user/organization.

  - accountLogin - The target account's login.

-}
isSponsoredBy :
    IsSponsoredByRequiredArguments
    -> SelectionSet Bool Github.Interface.Sponsorable
isSponsoredBy requiredArgs____ =
    Object.selectionForField "Bool" "isSponsoredBy" [ Argument.required "accountLogin" requiredArgs____.accountLogin Encode.string ] Decode.bool


{-| True if the viewer is sponsored by this user/organization.
-}
isSponsoringViewer : SelectionSet Bool Github.Interface.Sponsorable
isSponsoringViewer =
    Object.selectionForField "Bool" "isSponsoringViewer" [] Decode.bool


{-| The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
-}
monthlyEstimatedSponsorsIncomeInCents : SelectionSet Int Github.Interface.Sponsorable
monthlyEstimatedSponsorsIncomeInCents =
    Object.selectionForField "Int" "monthlyEstimatedSponsorsIncomeInCents" [] Decode.int


type alias SponsoringOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.SponsorOrder
    }


{-| List of users and organizations this entity is sponsoring.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for the users and organizations returned from the connection.

-}
sponsoring :
    (SponsoringOptionalArguments -> SponsoringOptionalArguments)
    -> SelectionSet decodesTo Github.Object.SponsorConnection
    -> SelectionSet decodesTo Github.Interface.Sponsorable
sponsoring fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeSponsorOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "sponsoring" optionalArgs____ object____ Basics.identity


type alias SponsorsOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , tierId : OptionalArgument Github.ScalarCodecs.Id
    , orderBy : OptionalArgument Github.InputObject.SponsorOrder
    }


{-| List of sponsors for this user or organization.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - tierId - If given, will filter for sponsors at the given tier. Will only return sponsors whose tier the viewer is permitted to see.
  - orderBy - Ordering options for sponsors returned from the connection.

-}
sponsors :
    (SponsorsOptionalArguments -> SponsorsOptionalArguments)
    -> SelectionSet decodesTo Github.Object.SponsorConnection
    -> SelectionSet decodesTo Github.Interface.Sponsorable
sponsors fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, tierId = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "tierId" filledInOptionals____.tierId (Github.ScalarCodecs.codecs |> Github.Scalar.unwrapEncoder .codecId), Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeSponsorOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "sponsors" optionalArgs____ object____ Basics.identity


type alias SponsorsActivitiesOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , period : OptionalArgument Github.Enum.SponsorsActivityPeriod.SponsorsActivityPeriod
    , orderBy : OptionalArgument Github.InputObject.SponsorsActivityOrder
    , actions : OptionalArgument (List Github.Enum.SponsorsActivityAction.SponsorsActivityAction)
    }


{-| Events involving this sponsorable, such as new sponsorships.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - period - Filter activities returned to only those that occurred in the most recent specified time period. Set to ALL to avoid filtering by when the activity occurred.
  - orderBy - Ordering options for activity returned from the connection.
  - actions - Filter activities to only the specified actions.

-}
sponsorsActivities :
    (SponsorsActivitiesOptionalArguments -> SponsorsActivitiesOptionalArguments)
    -> SelectionSet decodesTo Github.Object.SponsorsActivityConnection
    -> SelectionSet decodesTo Github.Interface.Sponsorable
sponsorsActivities fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, period = Absent, orderBy = Absent, actions = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "period" filledInOptionals____.period (Encode.enum Github.Enum.SponsorsActivityPeriod.toString), Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeSponsorsActivityOrder, Argument.optional "actions" filledInOptionals____.actions (Encode.enum Github.Enum.SponsorsActivityAction.toString |> Encode.list) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "sponsorsActivities" optionalArgs____ object____ Basics.identity


{-| The GitHub Sponsors listing for this user or organization.
-}
sponsorsListing :
    SelectionSet decodesTo Github.Object.SponsorsListing
    -> SelectionSet (Maybe decodesTo) Github.Interface.Sponsorable
sponsorsListing object____ =
    Object.selectionForCompositeField "sponsorsListing" [] object____ (Basics.identity >> Decode.nullable)


{-| The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. Only returns a sponsorship if it is active.
-}
sponsorshipForViewerAsSponsor :
    SelectionSet decodesTo Github.Object.Sponsorship
    -> SelectionSet (Maybe decodesTo) Github.Interface.Sponsorable
sponsorshipForViewerAsSponsor object____ =
    Object.selectionForCompositeField "sponsorshipForViewerAsSponsor" [] object____ (Basics.identity >> Decode.nullable)


{-| The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. Only returns a sponsorship if it is active.
-}
sponsorshipForViewerAsSponsorable :
    SelectionSet decodesTo Github.Object.Sponsorship
    -> SelectionSet (Maybe decodesTo) Github.Interface.Sponsorable
sponsorshipForViewerAsSponsorable object____ =
    Object.selectionForCompositeField "sponsorshipForViewerAsSponsorable" [] object____ (Basics.identity >> Decode.nullable)


type alias SponsorshipNewslettersOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.SponsorshipNewsletterOrder
    }


{-| List of sponsorship updates sent from this sponsorable to sponsors.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for sponsorship updates returned from the connection.

-}
sponsorshipNewsletters :
    (SponsorshipNewslettersOptionalArguments -> SponsorshipNewslettersOptionalArguments)
    -> SelectionSet decodesTo Github.Object.SponsorshipNewsletterConnection
    -> SelectionSet decodesTo Github.Interface.Sponsorable
sponsorshipNewsletters fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeSponsorshipNewsletterOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "sponsorshipNewsletters" optionalArgs____ object____ Basics.identity


type alias SponsorshipsAsMaintainerOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , includePrivate : OptionalArgument Bool
    , orderBy : OptionalArgument Github.InputObject.SponsorshipOrder
    }


{-| This object's sponsorships as the maintainer.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - includePrivate - Whether or not to include private sponsorships in the result set
  - orderBy - Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.

-}
sponsorshipsAsMaintainer :
    (SponsorshipsAsMaintainerOptionalArguments -> SponsorshipsAsMaintainerOptionalArguments)
    -> SelectionSet decodesTo Github.Object.SponsorshipConnection
    -> SelectionSet decodesTo Github.Interface.Sponsorable
sponsorshipsAsMaintainer fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, includePrivate = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "includePrivate" filledInOptionals____.includePrivate Encode.bool, Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeSponsorshipOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "sponsorshipsAsMaintainer" optionalArgs____ object____ Basics.identity


type alias SponsorshipsAsSponsorOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , orderBy : OptionalArgument Github.InputObject.SponsorshipOrder
    }


{-| This object's sponsorships as the sponsor.

  - after - Returns the elements in the list that come after the specified cursor.
  - before - Returns the elements in the list that come before the specified cursor.
  - first - Returns the first _n_ elements from the list.
  - last - Returns the last _n_ elements from the list.
  - orderBy - Ordering options for sponsorships returned from this connection. If left blank, the sponsorships will be ordered based on relevancy to the viewer.

-}
sponsorshipsAsSponsor :
    (SponsorshipsAsSponsorOptionalArguments -> SponsorshipsAsSponsorOptionalArguments)
    -> SelectionSet decodesTo Github.Object.SponsorshipConnection
    -> SelectionSet decodesTo Github.Interface.Sponsorable
sponsorshipsAsSponsor fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { after = Absent, before = Absent, first = Absent, last = Absent, orderBy = Absent }

        optionalArgs____ =
            [ Argument.optional "after" filledInOptionals____.after Encode.string, Argument.optional "before" filledInOptionals____.before Encode.string, Argument.optional "first" filledInOptionals____.first Encode.int, Argument.optional "last" filledInOptionals____.last Encode.int, Argument.optional "orderBy" filledInOptionals____.orderBy Github.InputObject.encodeSponsorshipOrder ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "sponsorshipsAsSponsor" optionalArgs____ object____ Basics.identity


{-| Whether or not the viewer is able to sponsor this user/organization.
-}
viewerCanSponsor : SelectionSet Bool Github.Interface.Sponsorable
viewerCanSponsor =
    Object.selectionForField "Bool" "viewerCanSponsor" [] Decode.bool


{-| True if the viewer is sponsoring this user/organization.
-}
viewerIsSponsoring : SelectionSet Bool Github.Interface.Sponsorable
viewerIsSponsoring =
    Object.selectionForField "Bool" "viewerIsSponsoring" [] Decode.bool
