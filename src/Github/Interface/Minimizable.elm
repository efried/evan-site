-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Github.Interface.Minimizable exposing (..)

import Github.InputObject
import Github.Interface
import Github.Object
import Github.Scalar
import Github.ScalarCodecs
import Github.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (FragmentSelectionSet(..), SelectionSet(..))
import Json.Decode as Decode


type alias Fragments decodesTo =
    { onCommitComment : SelectionSet decodesTo Github.Object.CommitComment
    , onDiscussionComment : SelectionSet decodesTo Github.Object.DiscussionComment
    , onGistComment : SelectionSet decodesTo Github.Object.GistComment
    , onIssueComment : SelectionSet decodesTo Github.Object.IssueComment
    , onPullRequestReviewComment : SelectionSet decodesTo Github.Object.PullRequestReviewComment
    }


{-| Build an exhaustive selection of type-specific fragments.
-}
fragments :
    Fragments decodesTo
    -> SelectionSet decodesTo Github.Interface.Minimizable
fragments selections____ =
    Object.exhaustiveFragmentSelection
        [ Object.buildFragment "CommitComment" selections____.onCommitComment
        , Object.buildFragment "DiscussionComment" selections____.onDiscussionComment
        , Object.buildFragment "GistComment" selections____.onGistComment
        , Object.buildFragment "IssueComment" selections____.onIssueComment
        , Object.buildFragment "PullRequestReviewComment" selections____.onPullRequestReviewComment
        ]


{-| Can be used to create a non-exhaustive set of fragments by using the record
update syntax to add `SelectionSet`s for the types you want to handle.
-}
maybeFragments : Fragments (Maybe decodesTo)
maybeFragments =
    { onCommitComment = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onDiscussionComment = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onGistComment = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onIssueComment = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    , onPullRequestReviewComment = Graphql.SelectionSet.empty |> Graphql.SelectionSet.map (\_ -> Nothing)
    }


{-| Returns whether or not a comment has been minimized.
-}
isMinimized : SelectionSet Bool Github.Interface.Minimizable
isMinimized =
    Object.selectionForField "Bool" "isMinimized" [] Decode.bool


{-| Returns why the comment was minimized. One of `abuse`, `off-topic`, `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and formatting of these values differs from the inputs to the `MinimizeComment` mutation.
-}
minimizedReason : SelectionSet (Maybe String) Github.Interface.Minimizable
minimizedReason =
    Object.selectionForField "(Maybe String)" "minimizedReason" [] (Decode.string |> Decode.nullable)


{-| Check if the current viewer can minimize this object.
-}
viewerCanMinimize : SelectionSet Bool Github.Interface.Minimizable
viewerCanMinimize =
    Object.selectionForField "Bool" "viewerCanMinimize" [] Decode.bool
